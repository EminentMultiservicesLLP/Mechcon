@model BISERP.Area.Purchase.Models.PurchaseOrderModel
@Scripts.Render("~/bundles/jquerymodels")
<script>
    $(function () {
        $(".datepicker").datepicker({
            showOn: "button",
            buttonImage: "/Content/images/calendar.gif",
            buttonImageOnly: true,
            buttonText: "Select date",
            'changeMonth': true,
            'changeYear': true,
            'yearRange': '2021:2030',
            "format": "dd-M-yyyy",
            todayBtn: "linked",
            pickerPosition: "bottom-left",
            "todayHighlight": true,
            autoclose: true,
        }).datepicker("setDate", new Date());
        $("#anim").change(function () {
            $(".datepicker").datepicker("option", "showAnim", "fadeIn");
        });
    });
</script>
<style>
    td, th {
        padding: 5px;
    }
</style>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    <h5 class="page-header orangeDottedBottomBorder"> PURCHASE ORDER </h5>
    @* new addition 2024 *@
    <div id="SearchGridModal" class="modal fade" role="dialog" data-backdrop="false">
        <div class="modal-dialog find-search-grid-modal">
            <div class="modal-content gridmodal-content">
                <div class="modal-header gridmodal-header">
                    <button type="button" class="close" onclick="closeModal()">&times;</button>
                    <h4 class="modal-title">Details</h4>
                </div>
                <div class="modal-body">
                    <div class="fill">
                        <div id="searchgrid" hidden></div>
                        <div id="RFQAuthorizedGrid" hidden></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="ReportModal" class="modal fade" role="dialog" data-backdrop="false">
        <div class="modal-dialog find-search-grid-modal">
            <div class="modal-content gridmodal-content">
                <div class="modal-header gridmodal-header">
                    <button type="button" class="close" onclick="closeModal()">&times;</button>
                    <h4 class="modal-title">Report</h4>
                </div>
                <div class="modal-body">
                    <div class="fill">
                        <iframe id="iframeReportViewer" style="width:100%;height:400px"></iframe>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="panel-group">
        <div class="panel panel-default">
            <div class="panel-groupingBoder">
                <div class="panel-heading">
                    <div class="panel-title">
                        Entry Form
                    </div>
                </div>
                <div id="collapse2" class="panel-collapse collapse in" aria-expanded="true">
                    <div class="panel-body">
                        <div class="submit-row">
                            <div class="col-sm-6" style="text-align:start">
                                @*<a data-toggle="collapse" class="btn btn-info" href="#SearchDetails">Show/Hide top Search Panel</a>*@
                                <button type="button" class="btn btn-success" id="btnSavePurchaseOrder">Save</button>
                                <button type="button" class="btn btn-primary" id="btnAddPO">Reset</button>
                                <button type="button" class="btn btn-danger" id="btAuthorisedRFQ">Authorised-PR</button>
                            </div>
                            <div class="col-sm-6" style="text-align:end">
                                <button type="button" class="btn btn-info" id="btnSearch">Find</button>
                                <a data-toggle="collapse" class="btn btn-warning" id="btnExport" href="#ReportPreview">Report</a>&nbsp;&nbsp;&nbsp;
                                <div hidden>
                                    @Html.Label("Select Report Type -- ") &nbsp;&nbsp;&nbsp;
                                    @Html.RadioButton("ReportType", "Vertical", true)&nbsp; Vertical &nbsp;&nbsp;
                                    @Html.RadioButton("ReportType", "Horizontal")&nbsp; Horizontal
                                </div>
                            </div>
                        </div>
                        <fieldset class="fieldsetCustom">
                            <legend class="legendCustom">Purchase Order Form</legend>

                            <div class="row">
                                <div class="col-sm-2">
                                    @Html.LabelFor(model => model.PODate)
                                    @Html.TextBoxFor(model => model.PODate, new { @class = "form-control datepicker", @disabled = "disabled" })
                                </div>
                                <div class="col-sm-2">
                                    @Html.LabelFor(model => model.PONo)
                                    @Html.TextBoxFor(model => model.PONo, new Dictionary<string, object> { { "readonly", "readonly" }, { "Value", "Auto" }, { "class", "form-control" } })
                                    @Html.HiddenFor(model => model.ID)
                                </div>

                                <div class="col-sm-2">
                                    @Html.LabelFor(model => model.StoreId, "Project")
                                    @Html.DropDownList("ddlStores", new SelectList(string.Empty, "Value", "Text"), "--Select Project--", new { @class = "wrapperdropdown-content form-control" })
                                </div>

                                <div class="col-sm-2">
                                    @Html.LabelFor(model => model.Against)
                                    <select id="Against" class="wrapper-dropdown form-control" disabled>
                                        <option class="wrapperdropdown-content" value="0" selected="selected">Indent</option>
                                    </select>
                                </div>
                                <div class="col-sm-2">
                                    @Html.LabelFor(model => model.RFQNo)
                                    @Html.TextBoxFor(model => model.RFQNo, "", new { @class = "form-control" })
                                    @Html.HiddenFor(model => model.RFQId)
                                </div>
                                <div class="col-sm-2">
                                    @Html.LabelFor(model => model.RefNo)
                                    @Html.TextBoxFor(model => model.RefNo, new { @class = "form-control" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-2">
                                    @Html.LabelFor(model => model.SupplierName, new { @class = "required" })
                                    @Html.TextBoxFor(model => model.SupplierName, new Dictionary<string, object> { { "class", "form-control" } })
                                    @Html.HiddenFor(model => model.SupplierID)
                                </div>
                                <div class="col-sm-2" hidden>
                                    @Html.LabelFor(model => model.PoVendorId)
                                    @Html.TextBoxFor(model => model.PoVendorName, new Dictionary<string, object> { { "class", "form-control" } })
                                    @Html.HiddenFor(model => model.PoVendorId)
                                </div>
                                <div class="col-sm-2">
                                    @Html.LabelFor(model => model.Transport)
                                    @Html.TextBoxFor(model => model.Transport, new { @class = "form-control" })
                                </div>
                                <div class="col-sm-2">
                                    @Html.LabelFor(model => model.DeliveryAddress, new { @class = "required" })
                                    @Html.TextBoxFor(model => model.DeliveryAddress, new { @class = "form-control" })
                                    @Html.HiddenFor(m => m.VendorId)
                                </div>
                                <div class="col-sm-2">
                                    @Html.LabelFor(model => model.DeliveryDate)
                                    @Html.TextBoxFor(model => model.DeliveryDate, new { @class = "form-control datepicker" })
                                </div>
                                <div class="col-sm-2">
                                    @Html.Label("Balance:")
                                    @Html.TextBox("BalanceDue", null, new { @class = "form-control" })
                                </div>
                                <div class="col-sm-0" style="display: none">
                                    @Html.TextBox("BudgetCost")
                                </div>
                                <div class="col-sm-0" style="display: none">
                                    @Html.TextBox("UtilizedBudget")
                                </div>
                                <div class="col-sm-2">
                                    <label for="PurchaseTerm">Purchase Term</label>
                                    <select class="form-control" id="PurchaseTerm">
                                        <option value="">Select Purchase Term</option>
                                        <option value="t1">t1</option>
                                        <option value="t2">t2</option>
                                        <option value="t3">t3</option>
                                    </select>
                                </div>
                            </div>
                            <div class="submit-row">
                                <button type="button" class="btn btn-primary" data-toggle="modal" id="btnShowItems">Add Item</button>
                                <button type="button" class="btn btn-danger" id="btnRemoveItem">Remove Item</button>
                                <button type="button" class="btn btn-primary" id="btnShowAttachments">View Files</button>
                                @*<button type="button" class="btn btn-info" id="btnDownloadAttachment">Download Files</button>*@
                            </div>
                        </fieldset>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="panel-group">
        <div class="panel panel-default">
            <div class="panel-groupingBoder">
                <div class="fill">
                    <div id="pogrid"></div>
                </div>
            </div>
        </div>
    </div>
    <div class="panel-group">
        <div class="panel panel-default">
            <div class="panel-groupingBoder">
                <div class="panel-heading">
                    <div class="panel-title">
                        <a class="collapsediv" data-toggle="collapse" href="#content" style="color:white">
                            Purchase Order Tab
                        </a>
                    </div>
                </div>
                <div id="content">
                    <div id="content-tab">
                        <ul id="tabs" class="nav nav-tabs" data-tabs="tabs" style="padding: 1px;">
                            <li class="active tab"><a href="#tab1" data-toggle="tab" style="margin: 0;">Total</a></li>
                            <li><a href="#tab2" data-toggle="tab" style="margin: 0;">Delivery Terms</a></li>
                            <li><a href="#tab3" data-toggle="tab" style="margin: 0;">Payment Terms</a></li>
                            <li><a href="#tab4" data-toggle="tab" style="margin: 0;">Freight</a></li>
                            <li><a href="#tab5" data-toggle="tab" style="margin: 0;">Special Notes</a></li>
                            <li><a href="#tab6" data-toggle="tab" style="margin: 0;">P&F</a></li>
                            <li><a href="#tab7" data-toggle="tab" style="margin: 0;">Inspection</a></li>
                        </ul>
                        <fieldset class="fieldsetCustom">
                            <div id="my-tab-content" class="tab-content" style="border:none">
                                <div class="tab-pane active" id="tab1">
                                    <table align="right">
                                        <tr>
                                            <td>@Html.LabelFor(model => model.Amount)</td>
                                            <td>
                                                @Html.TextBoxFor(model => model.Amount, new Dictionary<string, object> { { "readonly", "true" }, { "class", "form-control" } })
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>@Html.LabelFor(model => model.Tax)</td>
                                            <td>
                                                @Html.TextBoxFor(model => model.Tax, new Dictionary<string, object> { { "readonly", "true" }, { "class", "form-control" } })
                                            </td>
                                        </tr>

                                        <tr>
                                            <td>@Html.LabelFor(model => model.Discount)</td>
                                            <td>
                                                @Html.TextBoxFor(model => model.Discount, new Dictionary<string, object> { { "readonly", "true" }, { "class", "form-control" } })
                                            </td>
                                        </tr>

                                        <tr>
                                            <td>@Html.LabelFor(model => model.GrandTotal)</td>
                                            <td>
                                                @Html.TextBoxFor(model => model.GrandTotal, new Dictionary<string, object> { { "readonly", "true" }, { "class", "form-control" } })
                                            </td>
                                        </tr>
                                    </table>
                                </div>
                                <div class="tab-pane" id="tab2">
                                    <br>
                                    <div class="form-group" align="left">
                                        <button type="button" class="btn btn-primary" id="btnViewDelTerms">Add Term</button>
                                        <button type="button" class="btn btn-danger" id="btnRemoveDelTerms">Remove Term</button>
                                    </div>
                                    <div id="DeliveryTermgrid"></div>
                                </div>
                                <div class="tab-pane" id="tab3">
                                    <br>
                                    <div class="form-group" align="left">
                                        <button type="button" class="btn btn-primary" id="btnViewPayTerms">Add Term</button>
                                        <button type="button" class="btn btn-danger" id="btnRemovePayTerms">Remove Term</button>
                                    </div>
                                    <div id="PaymentTermgrid"></div>
                                </div>
                                <div class="tab-pane" id="tab4">
                                    <br>
                                    <div class="form-group" align="left">
                                        <button type="button" class="btn btn-primary" id="btnViewOtherTerms">Add Term</button>
                                        <button type="button" class="btn btn-danger" id="btnRemoveOtherTerms">Remove Term</button>
                                    </div>
                                    <div id="OtherTermgrid"></div>
                                </div>
                                <div class="tab-pane" id="tab5">
                                    <br>
                                    <div class="col-sm-12">
                                        <div class="form-group">
                                            <div class="col-sm-1">
                                                <label for="Details">Special Notes</label>
                                            </div>
                                            <div class="col-sm-4">
                                                @Html.TextAreaFor(model => model.Details, new { @class = "form-control", style = "width: 1170px; height: 164px;" })
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="tab-pane" id="tab6">
                                    <br>
                                    <div class="form-group" align="left">
                                        <button type="button" class="btn btn-primary" id="btnBasisTerms">Add Term</button>
                                        <button type="button" class="btn btn-danger" id="btnRemoveBasisTerms">Remove Term</button>
                                    </div>
                                    <div id="Basistermgrid"></div>
                                </div>
                                <div class="tab-pane" id="tab7">
                                    <br>
                                    <div class="form-group" align="left">
                                        <button type="button" class="btn btn-primary" id="btninspectionTerms">Add Term</button>
                                        <button type="button" class="btn btn-danger" id="btnRemoveinspectionTerms">Remove Term</button>
                                    </div>
                                    <div id="Inspection"></div>
                                </div>
                            </div>
                        </fieldset>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="IndentModal" title="Select Request No" style="display: none;">
        <div id="Indentgrid"></div>
    </div>
    <div id="SupplierModal" title="Select Items" style="display: none;">
        <div id="Suppliergrid"></div>
    </div>
    <div id="PoVendorgridModal" title="Select vendor" style="display: none;">
        <div id="PoVendorgrid"></div>
    </div>

    @*<div id="ItemModal" class="modal fade" role="dialog">
            <div class="modal-dialog" style="width: 900px">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Select Item</h4>
                    </div>
                    <div class="modal-body">
                        <div id="Itemgrid"></div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" data-dismiss="modal" id="btnAddItems">Add</button>
                        <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                    </div>
                </div>

            </div>
        </div>*@

    <div id="TaxModal" title="Select Tax" style="display: none;">
        <div id="Taxgrid"></div>
        <button type="button" class="btn btn-primary" data-dismiss="modal" id="btnUpdateTax">Update</button>
        <button type="button" class="btn btn-danger closeJQModel" data-dismiss="modal">Close</button>
    </div>

    <div id="ItemModal" title="Select Item" style="display: none;">
        <div id="Itemgrid"></div>
        <button type="button" class="btn btn-primary" data-dismiss="modal" id="btnAddItems">Add</button>
        <button type="button" class="btn btn-danger closeJQModel" data-dismiss="modal">Close</button>
    </div>

    <div id="DeliveryItemModal" title="Select Delivery Terms" style="display: none;">
        <div id="SearchDeliveryTermgrid"></div>
        <button type="button" class="btn btn-primary" data-dismiss="modal" id="btnAddDeliveryTerm">Add</button>
        <button type="button" class="btn btn-danger closeJQModel" data-dismiss="modal">Close</button>
    </div>
    <div id="PaymentItemModal" title="Select Payment Terms" style="display: none;">
        <div id="SearchPaymentTermgrid"></div>
        <button type="button" class="btn btn-primary" data-dismiss="modal" id="btnAddPaymentTerm">Add</button>
        <button type="button" class="btn btn-danger closeJQModel" data-dismiss="modal">Close</button>
    </div>

    <div id="OtherItemModal" title="Select Freight" style="display: none;">
        <div id="SearchOtherTermgrid"></div>
        <button type="button" class="btn btn-primary" data-dismiss="modal" id="btnAddOtherTerm">Add</button>
    </div>
    <div id="BasisItemModal" title="Select P&F" style="display: none;">
        <div id="SearchBasisTermgrid"></div>
        <button type="button" class="btn btn-primary" data-dismiss="modal" id="btnAddBasisTerm">Add</button>
    </div>
    <div id="InspectionItemModal" title="Select Inspection Term" style="display: none;">
        <div id="SearchInspectionTermgrid"></div>
        <button type="button" class="btn btn-primary" data-dismiss="modal" id="btnAddInspectionTerm">Add</button>
    </div>
    @*<div title="View Attachments" id="ViewModal" style="display: none;">
            <div class="col-sm-10">
                <ul id="displayImages" class="attachment" style='margin:5px; overflow-y: scroll;' />
            </div>
        </div>*@
    <div id="VendorModal" title="Select Vendor" style="display: none;">
        <div id="Vendorgrid"></div>
    </div>


    @*The Modal*@
    <div id="ViewModal" class="modal slideModal">
        @*Modal content*@
        <div class="modal-content slideContent">
            <span class="close slideClose" onclick="closeImageModal()"> &#x2715 </span>
            <div id="slideshow-container">
                <!--Slidshow-->
            </div>
            <div>
                <a class="prev slide-prev" onclick="plusSlides(-1)">❮</a>
                <a class="next slide-next" onclick="plusSlides(1)">❯</a>
            </div>
        </div>
    </div>

    @* RequiredDate *@
    <div class="modal" id="RequiredDatePopUpModel" role="dialog" data-backdrop="false">
        <div class="modal-dialog">
            <div class="modal-content" style="width:650px;height:100%;display:inline-block;">
                <div class="modal-header" style="min-height: 51.43px; padding: 15px; border-bottom: 1px solid #e5e5e5;">
                    <div class="col-sm-8 col-md-8">
                        <h4 class="modal-title"><b>Select Required Date</b></h4>
                    </div>
                    <div class="col-sm-4 col-md-4">
                        <button type="button" class="close" data-dismiss="modal" style="align-content:flex-end">&times;</button>
                    </div>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-sm-12 col-md-6 col-lg-4">
                            <label for="RequiredDateM">Required Date</label>
                            <input class="form-control datepicker" name="RequiredDateM" id="RequiredDateM" />
                        </div>
                    </div>
                </div>
                <div class="modal-footer" style="padding: 10px; text-align: right; border-top: 1px solid #e5e5e5;">
                    <button type="button" class="save btn btn-success" data-dismiss="modal" style="align-content:flex-end" onclick="setRequiredDate()">Set</button>
                </div>
            </div>
        </div>
    </div>
}
<script type="text/javascript">
    var appSetting = '@BISERP.Common.Constants.ScandocUrl';
    var $Indentgrid, $prePOGrandtotal;
    var $Suppliergrid;
    var $Taxgrid;
    var $Itemgrid;
    var $searchgrid;
    var $RFQAuthoorizedGrid;
    var $pogrid;
    var $SearchDeliveryTermgrid; var $DeliveryTermgrid;
    var $SearchPaymentTermgrid; var $PaymentTermgrid;
    var $SearchOtherTermgrid; var $OtherTermgrid;
    var $Inspection; var $SearchInspectionTermgrid;
    var suplierid;
    var $Basis; var $SearchBasisTermgrid;
    var tempcategoryId = 0, budgetbalanc = 0, selectedPORowIndx = null;
    var deliveryAddress = "";
    var rowIndxForTax;
    loadMechconData();
    function loadMechconData() {
        $.ajax({
            type: "GET", //HTTP POST Method
            url: '/MechconMaster/GetMechconData', // Controller/View
            success: function (data) {
                if (data != null) {
                    deliveryAddress = data.Address;
                    $("#DeliveryAddress").val(deliveryAddress);
                }
                else {
                    ShowAlert("error", "Failed to load Data");
                }
            }
        });
    }

    $("#ddlStores").prop('disabled', true);
    $("#RFQNo").prop('disabled', true);//RFQNo
    $("#BalanceDue").prop('disabled', true);
    function LoadSearchGrid() {

        $.ajax({
            url: "/PurchaseOrder/GetUnAuthorizationPo",
            cache: false,
            async: true,
            method: "GET",
            dataType: "JSON",
            data: { StoreId: 0 },
            beforeSend: function () {
                $searchgrid.pqGrid("showLoading");
            },
            complete: function () {
                $searchgrid.pqGrid("hideLoading");
            },
            success: function (response) {
                $("#searchgrid").show();
                if (response.success == true) {
                    $searchgrid.pqGrid("hideLoading");
                    $searchgrid.pqGrid("option", "dataModel.data", response.records);
                    $searchgrid.pqGrid("refreshDataAndView");
                }
                $searchgrid.pqGrid("refreshDataAndView");
            }
        });
    }
    function LoadIndentgrid() {
        $("#IndentModal").dialog({
            height: 400,
            width: 800,
            modal: true,
            open: function (evt, ui) {

                $.ajax({
                    type: "GET",
                    url: "/PurchaseIndent/AuthorizedPurchaseIndent",
                    datatype: "Json",
                    data: { StoreId: $("#ddlStores").val() },
                    beforeSend: function () {
                        $Indentgrid.pqGrid("showLoading");
                    },
                    complete: function () {
                        $Indentgrid.pqGrid("hideLoading");
                    },
                    success: function (data) {
                        if (data.success) {
                            tempcategoryId = data.ItemCategoryId;
                            $Indentgrid.pqGrid("hideLoading");
                            $Indentgrid.pqGrid("option", "dataModel.data", data.records);
                            $Indentgrid.pqGrid("refreshDataAndView");
                        } else {
                            ClearParamGrid('Indentgrid');
                            //ShowAlert("error", data.Messsage);
                        }
                    },
                    error: function (request, status, error) {
                        ClearParamGrid('Indentgrid');
                        $Indentgrid.pqGrid("hideLoading");
                        ShowAlert("error", "Server error! Please Contact Administrator");
                        return;
                    }
                });
            },
            close: function (event, ui) {
            },
            show: {
                effect: "blind",
                duration: 500
            }
        });
    }
    function editRow(rowIndx) {
        rowIndxForTax = rowIndx;
        $("#TaxModal").dialog({
            width: 883,
            modal: true,
            open: function (evt, ui) {
                $.ajax({
                    type: "GET",
                    url: "/Master/TaxMaster",
                    datatype: "Json",
                    success: function (data) {
                        $Taxgrid.pqGrid("option", "dataModel.data", data);
                        $Taxgrid.pqGrid("refreshDataAndView");
                    }
                });
            }
        });
    }
    function LoadTaxgrid() {
        $.ajax({
            type: "GET",
            url: "/Master/TaxMaster",
            datatype: "Json",
            success: function (data) {

                $Taxgrid.pqGrid("option", "dataModel.data", data);
                $Taxgrid.pqGrid("refreshDataAndView");
            }
        });
    }
    function LoadItemgrid() {
        var searchStoreId = $("#ddlStores").val();
        $("#ItemModal").dialog({
            height: 500,
            width: 900,
            modal: true,
            open: function (evt, ui) {
                $.ajax({
                    type: "GET",
                    url: "/ItemMaster/GetItemsByStoreItemType/",
                    data: { StoreId: searchStoreId },
                    datatype: "Json",
                    beforeSend: function () {
                        //    $Itemgrid = $("#Itemgrid").pqGrid(TaxM);
                        $Itemgrid.pqGrid("showLoading");
                    },
                    complete: function () {
                        $Itemgrid.pqGrid("hideLoading");
                    },
                    success: function (data) {
                        // $("#ItemModal").modal('toggle');
                        $Itemgrid.pqGrid("hideLoading");
                        $Itemgrid.pqGrid("option", "dataModel.data", data);
                        $Itemgrid.pqGrid("refreshDataAndView");
                    },
                    error: function (request, status, error) {
                        //ClearParamGrid("Itemgrid");
                        $Itemgrid.pqGrid("hideLoading");
                        ShowAlert("error", "Error while loading Itemlist");
                        return;
                    }
                });
            }
        });
    }
    function LoadSearchDeliveryTermgrid() {
        $("#DeliveryItemModal").dialog({
            height: 500,
            width: 900,
            modal: true,
            open: function (evt, ui) {
                $.ajax({
                    type: "GET",
                    url: "/DeliveryTerm/GetActiveDeliveryTerms",
                    datatype: "Json",
                    success: function (data) {
                        $SearchDeliveryTermgrid.pqGrid("option", "dataModel.data", data.records);
                        $SearchDeliveryTermgrid.pqGrid("refreshDataAndView");
                    }
                });
            }
        });
    }
    function LoadSearchPaymentTermgrid() {
        $("#PaymentItemModal").dialog({
            height: 500,
            width: 900,
            modal: true,
            open: function (evt, ui) {
                $.ajax({
                    type: "GET",
                    url: "/PaymentTermMaster/GetActivePaymentTerm",
                    datatype: "Json",
                    success: function (data) {
                        $SearchPaymentTermgrid.pqGrid("option", "dataModel.data", data.records);
                        $SearchPaymentTermgrid.pqGrid("refreshDataAndView");
                    }
                });
            }

        });
    }
    function LoadSearchOtherTermgrid() {
        $("#OtherItemModal").dialog({
            height: 500,
            width: 900,
            modal: true,
            open: function (evt, ui) {
                $.ajax({
                    type: "GET",
                    url: "/OtherTermMaster/GetActiveOtherTerm",
                    datatype: "Json",
                    success: function (data) {
                        $SearchOtherTermgrid.pqGrid("option", "dataModel.data", data.records);
                        $SearchOtherTermgrid.pqGrid("refreshDataAndView");
                    }
                });
            }
        });
    }
    function LoadSearchBasisTermgrid() {
        $("#BasisItemModal").dialog({
            height: 500,
            width: 900,
            modal: true,
            open: function (evt, ui) {
                $.ajax({
                    type: "GET",
                    url: "/OtherTermMaster/AllBasisTerm",
                    datatype: "Json",
                    success: function (data) {
                        $SearchBasisTermgrid.pqGrid("option", "dataModel.data", data.records);
                        $SearchBasisTermgrid.pqGrid("refreshDataAndView");
                    }
                });
            }
        });
    }
    function LoadSearchInspectionTermgrid() {
        $("#InspectionItemModal").dialog({
            height: 500,
            width: 900,
            modal: true,
            open: function (evt, ui) {
                $.ajax({
                    type: "GET",
                    url: "/OtherTermMaster/AllInspectionTerm",
                    datatype: "Json",
                    success: function (data) {
                        $SearchInspectionTermgrid.pqGrid("option", "dataModel.data", data.records);
                        $SearchInspectionTermgrid.pqGrid("refreshDataAndView");
                    }
                });
            }
        });
    }
    function ClearFormOnReset() {
        $("#ID").val(""); $("#PONo").val(""); $("#PODate").datepicker().datepicker("setDate", new Date()); $("#RefNo").val(""); $("#RFQNo").val(""); $("#RFQId").val("");
        $("#SupplierName").val(""); $("#SupplierId").val(""); $("#DeliveryAddress").val(deliveryAddress); $("#ddlStores").val("0");
        $("#Amount").val(""); $("#Tax").val(""); $("#OtherCharges").val(""); $("#Discount").val(""); $("#GrandTotal").val(""); $('#BalanceDue').val("");
        ClearParamGrid("pogrid");
        ClearParamGrid("DeliveryTermgrid");
        ClearParamGrid("PaymentTermgrid");
        ClearParamGrid("OtherTermgrid");
        $DeliveryTermgrid.pqGrid("refreshDataAndView");
        $PaymentTermgrid.pqGrid("refreshDataAndView");
        $OtherTermgrid.pqGrid("refreshDataAndView");
        //ClearParamGridByObject($DeliveryTermgrid);
        //ClearParamGridByObject($PaymentTermgrid);
        //ClearParamGridByObject($OtherTermgrid);
        ClearParamGrid('Basistermgrid');
        ClearParamGrid('Inspection');
        $("#Basistermgrid").html('');
        //$("#DeliveryTermgrid").html('');
        //$("#PaymentTermgrid").html('');
    }
    function ClearForm() {
        $("#ID").val(""); $("#PONo").val(""); $("#PODate").datepicker().datepicker("setDate", new Date()); $("#RefNo").val(""); $("#RFQNo").val(""); $("#RFQId").val("");
        $("#SupplierName").val(""); $("#SupplierId").val(""); $("#DeliveryAddress").val(deliveryAddress); $("#ddlStores").val("0"); $("#VendorId").val("");
        $("#Amount").val(""); $("#Tax").val(""); $("#OtherCharges").val(""); $("#Discount").val(""); $("#GrandTotal").val(""); $("#Transport").val(""); $("#PurchaseTerm").val(""); $("#BED").val("");
        $("#Edu").val(""); $("#PoVendorName").val(""); $("#PoVendorId").val("");
        $("#SHECess").val("");
        $('#BalanceDue').val("");
        var colM = $pogrid.pqGrid("option", "colModel");
        colM[2].editable = true;
        $pogrid.pqGrid("option", "colModel", colM);
        ClearParamGrid('pogrid');
        ClearParamGrid('DeliveryTermgrid');
        ClearParamGrid('PaymentTermgrid');
        ClearParamGrid('OtherTermgrid');
        ClearParamGrid('Basistermgrid');
        ClearParamGrid('Inspection');
        suplierid = "0";
        $("#DeliveryDate").datepicker().datepicker("setDate", new Date());
    }

    $(document).ready(function () {
        $("#btnShowItems").hide();
        $('#Against').change(function () {
            if ($('#Against').val() == "0") {
                $("#btnShowItems").hide();
                ClearParamGrid("pogrid");
                $("#RFQNo").val("");
                $("#RFQId").val("");
                $("#RFQNo").prop("disabled", false);
            }
            else {
                $("#btnShowItems").show();
                $("#RFQNo").val("");
                $("#RFQId").val("");
                $("#RFQNo").prop("disabled", true);
                ClearParamGrid("pogrid");
            }
        });

        $.ajax({
            type: "GET",
            url: "/Master/MainStores",
            datatype: "Json",
            success: function (data) {
                $.each(data, function (index, value) {
                    $('#ddlStores').append('<option value="' + value.ID + '">' + value.Code + '</option>');
                });
            }
        });

        $('#RFQNo').on('click', function () {
            if ($("#ddlStores").val() == "") {
                ShowAlert("error", "Please Select Store");
                return;
            }
            LoadIndentgrid();
        });

        $("#btnAddPO").on('click', function () {
            ClearForm();
        });
        function getRowIndx() {
            var arr = $pogrid.pqGrid('selection', { type: 'row', method: 'getSelection' });
            if (arr && arr.length > 0) {
                return arr[0].rowIndx;
            }
            else {
                ShowAlert("error", "Select a row.");
                return null;
            }
        }
        $('#btnRemoveItem').on('click', function () {
            if (selectedPORowIndx == null) {
                return;
            }
            $("#pogrid").pqGrid("deleteRow", { rowIndx: selectedPORowIndx });
            selectedPORowIndx = null;
        });


        $('#btnSavePurchaseOrder').on('click', function () {
            if ($("#Against").val() === "0") {

                if ($("#RFQId").val() === "") {
                    ShowAlert('error', 'Please Select Request No');
                    return;
                }
            }
            if (parseInt($("#ID").val()) > 0) {
                var bal = 0, totbudget = 0;
                bal = parseFloat($("#BalanceDue").val());
                totbudget = parseFloat($prePOGrandtotal) + bal;
                if (parseFloat($("#GrandTotal").val()) > totbudget) {
                    ShowAlert('warning', 'Propose Budget for the project Exceeded');
                    return;
                }
            }
            else if (parseFloat($("#GrandTotal").val()) > parseFloat(budgetbalanc)) {

                ShowAlert('warning', 'Propose Budget for the project Exceeded');
                return;
            }

            if ($("#ddlStores").val() === "" || $("#ddlStores").val() === "0") {
                ShowAlert('warning', 'Please Select Project Code');
                return;
            }
            //if ($("#VendorId").val() === "" || $("#VendorId").val() === "0") {
            //    ShowAlert('warning', 'Please Select Vendor for delivery Address');
            //    return;
            //}
            if ($("#DeliveryAddress").val() === "") {
                ShowAlert('warning', 'Please enter Delivery Address');
                return;
            }
            var podetails;
            try {
                podetails = $pogrid.pqGrid("option", "dataModel.data");
            }
            catch (err) {
                podetails = $("#pogrid").pqGrid("option", "dataModel.data");
            }
            if ($("#SupplierID").val() == undefined || $("#SupplierID").val() === "" || $("#SupplierID").val() === "0") {
                $("#SupplierID").val(suplierid);
            }
            if ($("#SupplierID").val() == undefined || $("#SupplierID").val() === "" || $("#SupplierID").val() === "0") {
                if ($("#PoVendorId").val() == undefined || $("#PoVendorId").val() === "" || $("#PoVendorId").val() === "0") {
                    ShowAlert("error", "Please Select Supplier");
                    //ShowAlert("error", "Please Select Supplier OR Vendor Name");
                    return;
                }

            }

            if (podetails != undefined) {
                if (podetails.length > 0) {
                    if (jLinq.from(podetails).empty("PackSize").or(undefined).count() > 0) {
                        ShowAlert("error", "Please Select PackSize");
                        return;
                    }
                    if (jLinq.from(podetails).empty("OrderingUnit").or(undefined).count() > 0) {
                        ShowAlert("error", "Please Select Unit");
                        return;
                    }
                }
                else {
                    ShowAlert("error", "No Items to save.");
                    return;
                }
            }
            var chekRate = 0;
            $.each(podetails, function (key, value) {
                if (value.Rate === "" || value.Rate == undefined || value.Rate === 0) chekRate++;
            });
            if (chekRate > 0) {
                ShowAlert("warning", "Rate is '0'");
                return;
            }
            var getDelData = $DeliveryTermgrid.pqGrid("option", "dataModel.data");
            var delgridData = jLinq.from(getDelData).equals("state", true).select();

            var getPayData = $PaymentTermgrid.pqGrid("option", "dataModel.data");
            var paygridData = jLinq.from(getPayData).equals("state", true).select();

            var getOtherData = $OtherTermgrid.pqGrid("option", "dataModel.data");
            var othgridData = jLinq.from(getOtherData).equals("state", true).select();

            var getbasisdata = $Basis.pqGrid("option", "dataModel.data");
            var poBasis = jLinq.from(getbasisdata).equals("state", true).select();

            var getinspectiondata = $Inspection.pqGrid("option", "dataModel.data");
            var poInspectio = jLinq.from(getinspectiondata).equals("state", true).select();
            var purchaseOrder = JSON.stringify({ //Passing data
                ID: $("#ID").val(),
                PONo: $("#PONo").val(),
                PODate: $("#PODate").val(),
                RefNo: $("#RefNo").val(),
                Againstid: $("#Against").val(),
                RFQId: $("#RFQId").val(),
                SupplierID: $("#SupplierID").val(),
                Transport: $("#Transport").val(),
                PurchaseTerm: $("#PurchaseTerm").val(),
                DeliveryAddress: $("#DeliveryAddress").val(),
                StoreId: $("#ddlStores").val(),
                Amount: $("#Amount").val(),
                Tax: $("#Tax").val(),
                OtherCharges: $("#OtherCharges").val(),
                Discount: $("#Discount").val(),
                GrandTotal: $("#GrandTotal").val(),
                BED: $("#BED").val(),
                Edu: $("#Edu").val(),
                SHECess: $("#SHECess").val(),
                Details: $("#Details").val(),
                VendorId: $("#VendorId").val(),
                PoVendorId: $("#PoVendorId").val(),
                PODetails: podetails,
                PODeliveryTerms: delgridData,
                POPaymenterms: paygridData,
                POOtherTerms: othgridData,
                POBasis: poBasis,
                POInspectio: poInspectio,
                DeliveryDate:$("#DeliveryDate").val()
            });

            $.ajax({
                type: "POST", //HTTP POST Method
                traditional: true,
                contentType: 'application/json; charset=utf-8',
                url: '/PurchaseOrder/SavePurchaseOrder', // Controller/View
                data: purchaseOrder,
                success: function (msg) {
                    if (msg.success) {
                        if ($("#ID").val() == "") {
                            ShowAlert("success", "Generated PO Nos : " + msg.Message);
                        }
                        else {
                            ShowAlert("success", "PO updated successfully");
                        }
                        ClearForm();
                    }
                    else {
                        ShowAlert("error", msg.Message);
                    }
                },
                error: function (jqXHR, exception) {
                    ShowAlert("Falied to authorize/cancel", "error", "Error while updation! Please contact administrator!");
                }
            });
        });
    });

    /********* Tax Grid *********/
    $(document).ready(function () {
        var dataTaxM = { location: "local", sorting: 'local' }
        var colTaxM = [
            {
                dataIndx: "state", maxWidth: 25, minWidth: 25,  align: "center", type: 'checkBoxSelection', cls: 'ui-state-default', sortable: false,
                editor: false, dataType: 'bool',
                cb: {
                    select: true,
                    all: false, //checkbox selection in the header affect current page only.
                    header: true //show checkbox in header.
                }
            },
            { title: "", dataIndx: "Taxid", dataType: "integer", hidden: true },
            { title: "Code", dataIndx: "Tax_Code", width: 50, editable: false },
            { title: "Name", dataIndx: "Tax_name", width: 160, editable: false },

            { title: "Tax Type", dataIndx: "Tax_Type", width: 50, hidden: true },
            { title: "Percentage", dataIndx: "Tax_percentage", width: 120, editable: false },
            { title: "Formula", dataIndx: "Formula", width: 350, editable: false },
            { title: "Tax IncExc", dataIndx: "Tax_EncExc", width: 100, editable: false },
            { title: "Taxes", dataIndx: "Taxes", hidden: true }
        ];
        var TaxM = {
            width: 'flex',
            height: 300,
            sortable: false,
            numberCell: { show: false },
            hoverMode: 'cell',
            showTop: false,
            resizable: true,
            scrollModel: { autoFit: true },
            draggable: false,
            wrap: false,
            editable: true,
            columnBorders: true,
            selectionModel: { type: 'row' },
            colModel: colTaxM,
            dataModel: dataTaxM,
            pageModel: { type: "local", rPP: 20 },
        };
        $Taxgrid = $("#Taxgrid").pqGrid(TaxM);
        //LoadTaxgrid();
    });

    /********* Supplier Grid *********/
    $(document).ready(function () {
        var SupplierM = {
            height: 400,
            autoSizeInterval: 0,
            scrollModel: { autoFit: true },
            dragColumns: { enabled: false },
            hoverMode: 'cell',
            editor: { type: 'textbox' },
            filterModel: { on: true, mode: "AND", header: true },
            showTop: false,
            resizable: true,
            virtualX: true,
            colModel: colSupplierM,
            dataModel: dataSupplierM,
            pageModel: { type: "local", rPP: 20 },
            toggle: function (evt, ui) {
                if (ui.state == 'max') {
                    $(".ui-dialog,.ui-widget-overlay").css('position', 'static');
                }
                else {
                    $(".ui-dialog,.ui-widget-overlay").css('position', 'absolute');
                }
            },
            cellClick: function (evt, ui) {
                if (ui.rowData) {
                    var record = ui.rowData;
                    $("#SupplierID").val(record.ID);
                    $("#SupplierName").val(record.Name);
                    //$("#DeliveryAddress").val(record.FullAddress);
                    ClosePopupWindow("SupplierModal");
                    var colM = $pogrid.pqGrid("option", "colModel");
                    colM[2].editable = false;
                    $pogrid.pqGrid("option", "colModel", colM);

                }
            }
        };
        $("#SupplierName").on('click', function () {
            ShowSupplierListPoup("Suppliergrid", "SupplierModal", SupplierM, "/Master/AllSupplier/");
        });
    });
    /********* Indent Grid *********/
    $(document).ready(function () {
        var dataIndentM = { location: "local", sorting: 'local' }
        var colIndentM = [
            { title: "", dataIndx: "IndentId", dataType: "integer", hidden: true },
            {
                title: "Request No", dataIndx: "IndentNumber", width: 400,
                filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
            },
            { title: "Indent Date", dataIndx: "strIndentDate", width: 200, dataType: "date" }
        ];
        var IndentM = {
            height: 350,
            sortable: false,
            numberCell: { show: false },
            title: "Authorized Indents",
            hoverMode: 'row',
            showTop: false,
            resizable: true,
            wrap: false,
            editable: false,
            filterModel: { on: true, mode: "AND", header: true },
            selectionModel: { type: 'row', mode: 'single' },
            colModel: colIndentM,
            dataModel: dataIndentM,
            pageModel: { type: "local", rPP: 20 },
            rowClick: function (evt, ui) {
                ClearParamGrid("pogrid");
                if (ui.rowData) {
                    var rowIndx = parseInt(ui.rowIndx);
                    var record = ui.rowData;
                    $("#RFQNo").val(record.IndentNumber);
                    $("#RFQId").val(record.IndentId);
                    ClosePopupWindow("IndentModal");

                    $.ajax({
                        type: "GET",
                        url: "/PurchaseIndent/AuthPurchaseIndentItems/",
                        data: { IndentId: record.IndentId },
                        datatype: "Json",
                        success: function (data) {
                            var dataMGrid = [];
                            $.each(data, function (index, value) {
                                var grdData = {
                                    'POIndDtlId': value.IndentDetailId, 'ItemID': value.ItemId, 'SupplierId': $("#SupplierId").val(), 'SupplierName': $("#SupplierName").val(), 'ItemName': value.ItemName, 'Qty': value.AuthorisedQty, 'Amount': 0,
                                    'TaxAmount': value.TaxAmount, 'PackSize': value.PackSize, 'PackSizeId': value.PackSizeId, 'Rate': value.ItemRate, 'MRP': value.MRP, 'OrderingUnit': value.UnitName, 'FreeQty': 0, 'OctroiC': 0, 'OtherC': 0, 'LoadUnloadC': 0, 'TransC': 0,
                                    'DiscountPer': value.DiscountPer, 'Discount': value.Discount, 'NetAmount': 0, 'DescriptiveName': value.DescriptiveName, 'SGST': 0, 'CGST': 0, 'IGST': 0, 'UGST': 0, 'HSNCode': value.HSNCode
                                }
                                dataMGrid.push(grdData);
                            });
                            $pogrid.pqGrid("option", "dataModel.data", dataMGrid);
                            try {
                                $pogrid.pqGrid("refreshDataAndView");
                            }
                            catch (e) { $("#pogrid").pqGrid("refreshDataAndView"); }
                        }
                    });
                }
            }
        };
        $Indentgrid = $("#Indentgrid").pqGrid(IndentM);
    });
    /**********************indfdfd ****************************/

    function LoadRFQAuthGrid() {
        $.ajax({
            type: "GET",
            url: "/RequestForQuote/GetAuthorizedRequestForQuote",
            datatype: "Json",
            data: { StoreId: 0 },
            beforeSend: function () {
                $RFQAuthoorizedGrid.pqGrid("showLoading");
            },
            complete: function () {
                $RFQAuthoorizedGrid.pqGrid("hideLoading");
            },
            success: function (data) {
                if (data.success) {
                    $("#RFQAuthorizedGrid").show();
                    $RFQAuthoorizedGrid.pqGrid("hideLoading");
                    $RFQAuthoorizedGrid.pqGrid("option", "dataModel.data", data.records);
                    $RFQAuthoorizedGrid.pqGrid("refreshDataAndView");
                } else {
                    ClearParamGrid('Indentgrid');
                }
            },
            error: function (request, status, error) {
                ClearParamGrid('RFQAuthorizedGrid');
                $RFQAuthoorizedGrid.pqGrid("hideLoading");
                ShowAlert("error", "No Record !!!");
                return;
            }
        });

    }
    //********* PO Grid Functions *********/
    $('#btnUpdateTax').on('click', function () {
        ClosePopupWindow("TaxModal");
        let rowIndx = rowIndxForTax;
        var getData = $("#Taxgrid").pqGrid("option", "dataModel.data");
        var selectedItems = jLinq.from(getData).equals("state", true).select();

        var totalTax = 0;
        var TaxIds = [];
        var sgst = 0, cgst = 0, igst = 0, ugst = 0;

        $.each(selectedItems, function (key, value) {
            totalTax += parseFloat(value.Tax_percentage);
            TaxIds.push(value.Taxid);

            switch (value.Tax_name) {
                case 'SGST':
                    sgst += parseFloat(value.Tax_percentage);
                    break;
                case 'CGST':
                    cgst += parseFloat(value.Tax_percentage);
                    break;
                case 'IGST':
                    igst += parseFloat(value.Tax_percentage);
                    break;
                case 'UGST':
                    ugst += parseFloat(value.Tax_percentage);
                    break;
            }
        });

        $("#pogrid").pqGrid('updateRow', {
            rowIndx: rowIndx,
            newRow: {
                'Tax': totalTax,
                'TaxIds': TaxIds,
                'SGST': sgst,
                'CGST': cgst,
                'IGST': igst,
                'UGST': ugst
            }
        });

        $("#pogrid").pqGrid("refreshRow", { rowIndx: rowIndx });
        CalculateTotalAmount();
    });

    $(document).ready(function () {
        $("#BED").keyup(function () {
            CalculateTotalAmount();
            showperAmount();

        });
        $("#Edu").keyup(function () {
            CalculateTotalAmount();
            showperAmount();
        });
        $("#SHECess").keyup(function () {
            CalculateTotalAmount();
            showperAmount();
        });
    });

    function showperAmount() {
        var amt = $("#Amount").val();
        if (amt == undefined || amt === "") amt = 0;
        var bed = $("#BED").val();
        if (bed == undefined || bed === "") bed = 0;
        var bedamt = (bed * amt) / 100;
        $("#BedAmt").val(Math.round(bedamt));

        var shecess = $("#SHECess").val();
        if (shecess == undefined || shecess === "") shecess = 0;
        var shecessamt = (shecess * amt) / 100;
        $("#Shecessamt").val(Math.round(shecessamt));

        var educess = $("#Edu").val();
        if (educess == undefined || educess === "") educess = 0;
        var eduamt = (educess * amt) / 100;
        $("#educessamt").val(Math.round(eduamt));

    }
    function CalculateTotalAmount() {
        var getData = $pogrid.pqGrid("option", "dataModel.data");

        var totalAmount = 0, totalTaxAmount = 0, totalOtherCharges = 0, totalDiscount = 0, totalNetAmt = 0;
        var bedAmt = parseFloat($("#BED").val()) || 0;
        var eduAmt = parseFloat($("#Edu").val()) || 0;
        var sheAmt = parseFloat($("#SHECess").val()) || 0;

        $.each(getData, function (_, item) {
            var TransC = parseFloat(item.TransC) || 0;
            var OtherC = parseFloat(item.OtherC) || 0;
            var LoadUnloadC = parseFloat(item.LoadUnloadC) || 0;
            var OctroiC = parseFloat(item.OctroiC) || 0;

            var Amount = parseFloat(item.Amount) || 0;
            var TaxAmount = parseFloat(item.TaxAmount) || 0;
            var Discount = parseFloat(item.Discount) || 0;
            var NetAmt = parseFloat(item.NetAmount) || 0;

            var otherCharges = TransC + OtherC + LoadUnloadC + OctroiC;

            totalAmount += Amount;
            totalTaxAmount += TaxAmount;
            totalOtherCharges += otherCharges;
            totalDiscount += Discount;
            totalNetAmt += NetAmt;
        });

        var bedAmount = totalAmount * (bedAmt / 100);
        var eduAmount = totalAmount * (eduAmt / 100);
        var sheAmount = totalAmount * (sheAmt / 100);
        var extraAmt = bedAmount + eduAmount + sheAmount;

        totalNetAmt += extraAmt;

        $("#Amount").val(totalAmount.toFixed(2));
        $("#Tax").val(totalTaxAmount.toFixed(2));
        $("#OtherCharges").val(totalOtherCharges.toFixed(2));
        $("#Discount").val(totalDiscount.toFixed(2));
        $("#GrandTotal").val(totalNetAmt.toFixed(2));

    }

    /********* PO Grid *********/
    $(document).ready(function () {
        var unitList = [];
        $.ajax({
            type: "GET",
            url: "/Master/AllActiveUnit",
            success: function (data) {
                $.each(data, function (index, value) {
                    unitList.push(value.UnitName)
                });
            }
        });

        var packsizes = [];
        $.ajax({
            type: "GET",
            url: "/Master/AllItemPackSize",
            success: function (data) {
                $.each(data, function (index, value) {
                    packsizes.push(value.Name)
                });
            }
        });

        var suppliers = [];
        $.ajax({
            type: "GET",
            url: "/Master/AllSupplier",
            success: function (data) {
                $.each(data, function (index, value) {
                    suppliers.push(value.Name)
                });
            }
        });

        const autoCompleteEditor = function (ui) {
            const { $cell, rowData, dataIndx, column: { width }, cls } = ui;
            const currentValue = $.trim(rowData[dataIndx]);

            const $input = $("<input>", {
                type: 'text',
                name: dataIndx,
                class: `${cls} pq-ac-editor`,
                width: width - 6,
                val: currentValue
            }).appendTo($cell);

            $input.autocomplete({
                source: dataIndx === "SupplierName" ? suppliers : (dataIndx === "OrderingUnit" ? unitList : packsizes),
                minLength: 0
            }).focus(function () {
                $(this).autocomplete("search", "");
            });
        };

        var dataModel = { location: 'remote', sorting: 'local', paging: 'local', dataType: 'JSON' };

        var setIID = {
            width: '100%',
            height: 260,
            maxheight: '400',
            title: "Item Details",
            rowHt: 40,
            autoRow: false,
            sortable: false,
            numberCell: { show: false },
            scrollModel: { flexContent: true },
            selectionModel: { type: 'row', mode: 'single' },
            hoverMode: 'cell',
            editor: { type: 'textbox' },
            showTop: true,
            resizable: true,
            wrap: false,
            cellBeforeSave: function (event, ui) {
                var dataIndx = ui.dataIndx,
                    newVal = parseFloat(ui.newVal),
                    rowData = ui.rowData;
                if (dataIndx === 'Qty') {
                    var pendingQty = parseFloat(rowData.PendingQty);
                    var savedQty = parseFloat(rowData.SavedQty);
                    if (newVal > pendingQty) {
                        ShowAlert('info', "Qty cannot exceed the Pending Qty (" + pendingQty + ").");
                        return false;
                    }
                    if (newVal > savedQty) {
                        ShowAlert('info', "Qty cannot exceed the PO Qty (" + savedQty + ").");
                        return false;
                    }
                    if (newVal <= 0) {
                        ShowAlert('info', "Qty must be greater than zero.");
                        return false;
                    }
                }
                return true;
            },
            cellSave: function (evt, ui) {
                this.refreshRow(ui);
                CalculateTotalAmount();

            },
            editModel: {
                saveKey: "",
                keyUpDown: false
            },
            draggable: false,
            colModel: [//{title: "", dataIndx: "state", width: 10, align: "center", type: 'checkBoxSelection', cls: 'ui-state-default', resizable: false, sortable: false },
                { title: "", dataIndx: "ID", width: 10, dataType: "integer", hidden: true },
                { title: "", dataIndx: "POIndDtlId", width: 10, dataType: "integer", hidden: true },
                //{
                //    title: "Supplier", dataIndx: "SupplierName", width: 200, dataType: "string",
                //    editor: { type: autoCompleteEditor },
                //    validations: [
                //        { type: 'minLen', value: 1, msg: "Required" },
                //            {
                //                type: function (ui) {
                //                    var value = ui.value;
                //                    if ($.inArray(ui.value, suppliers) == -1) {
                //                        ui.msg = value + " not found in list";
                //                        return false;
                //                    }
                //                }
                //            }
                //    ]
                //},
                { title: "", dataIndx: "ItemID", width: 10, dataType: "integer", hidden: true },
                { title: "Item Name & Description", dataIndx: "ItemName", width: 400, dataType: "string", editable: false },
                {
                    title: "Description", dataIndx: "DescriptiveName", width: 200, dataType: "string", editable: true,
                    editor: { type: "textarea", attr: "rows=5" }, hidden: true
                },
                { title: "HSNCode", dataIndx: "HSNCode", width: 150, resizable: false, dataType: "string", editable: false, hidden: true},
                { title: "Tax Rate", dataIndx: "TaxRate", width: 100, dataType: "string", editable: false },
                {
                    title: "Unit", dataIndx: "OrderingUnit", width: 100, dataType: "string", editable: true,
                    editor: { type: autoCompleteEditor },
                    validations: [
                        { type: 'minLen', value: 1, msg: "Required" },
                        {
                            type: function (ui) {
                                var value = ui.value;
                                if ($.inArray(ui.value, unitList) == -1) {
                                    ui.msg = value + " not found in list";
                                    return false;
                                }
                            }
                        }
                    ]
                },
                { title: "Make", dataIndx: "Make", width: 200, dataType: "string", align: "left", editable: false },
                { title: "MOC", dataIndx: "MaterialOfConstruct", width: 200, dataType: "string", align: "left", editable: false },
                { title: "PR Remark", dataIndx: "IndentRemark", width: 300, dataType: "string", align: "left", editable: false },
                { title: "", editable: false, minWidth: 30, sortable: false, align: 'center', render: function (ui) { return '<button type="button" onclick="addRequiredDate(' + ui.rowIndx + ');"></button>'; } },
                { title: "RequiredDate", dataIndx: "RequiredDate", width: 300, dataType: "string", align: "left", editable: false },
                { title: "Size/Wt.", dataIndx: "SizeOrWeight", width: 70, dataType: "string", align: "left", editable: true },
                { title: "PO Remark", dataIndx: "POIndentRemark", width: 300, dataType: "string", align: "left", editable: true },
                { title: "PR PendingQty", dataIndx: "PendingQty", width: 70, dataType: "float", align: "left", editable: false },
                { title: "Qty", dataIndx: "Qty", width: 70, dataType: "float", align: "left" },
                { title: "Free Qty", dataIndx: "FreeQty", width: 90, dataType: "float", align: "left", hidden: true},
                {
                    title: "Pack Size", dataIndx: "PackSize", width: 120, dataType: "string", editable: false, hidden: true,
                    editor: { type: autoCompleteEditor },
                    validations: [
                        { type: 'minLen', value: 1, msg: "Required" },
                        {
                            type: function (ui) {
                                var value = ui.value;
                                if ($.inArray(ui.value, packsizes) == -1) {
                                    ui.msg = value + " not found in list";
                                    return false;
                                }
                            }
                        }
                    ]
                },
                {
                    title: "Unit Rate", dataIndx: "Rate", width: 70, dataType: "float"
                },
                {
                    title: "MRP", dataIndx: "MRP", width: 90, dataType: "float", hidden: true
                },
                {
                    title: "Amount", dataIndx: "Amount", width: 90, dataType: "float",
                    editable: false
                },
                {
                    title: "Discount %", dataIndx: "DiscountPer", width: 100, dataType: "float", resizable: false, align: "left",
                    format: '##,###.00',
                    editable: true,

                },
                {
                    title: "Discount", dataIndx: "Discount", width: 100, dataType: "float", resizable: false, align: "left",
                    format: '##,###.00',
                    editable: true
                },
                {
                    title: "", dataIndx: "TaxableValue", width: 100, dataType: "float", resizable: false, align: "left", hidden: true
                },

                { title: "TaxIds", dataIndx: "TaxIds", width: 90, dataType: "string", editable: true, hidden: true },
                {
                    title: "", editable: false, minWidth: 30, sortable: false, align: 'center', render: function (ui) { return '<button type="button" onclick="editRow(' + ui.rowIndx + ');"></button>'; }
                },
                { title: "Tax", dataIndx: "Tax", width: 90, dataType: "float", editable: true, hidden: true },
                {
                    title: "Tax Amount", dataIndx: "TaxAmount", width: 100, dataType: "float", resizable: false,
                    format: '##,###.00',
                    editable: false
                },
                { title: "SGST", dataIndx: "SGST", width: 90, dataType: "double", align: "left", hidden: true },
                { title: "CGST", dataIndx: "CGST", width: 90, dataType: "double", align: "left", hidden: true },
                { title: "IGST", dataIndx: "IGST", width: 90, dataType: "double", align: "left", hidden: true },
                { title: "UGST", dataIndx: "UGST", width: 90, dataType: "double", align: "left", hidden: true },
                {
                    title: "SGSTAmt", dataIndx: "SGSTAmt", width: 90, dataType: "double", align: "left", format: '##,###.00'
                },
                {
                    title: "CGSTAmt", dataIndx: "CGSTAmt", width: 90, dataType: "double", align: "left", format: '##,###.00'
                },
                {
                    title: "IGSTAmt", dataIndx: "IGSTAmt", width: 90, dataType: "double", align: "left", format: '##,###.00'
                },
                {
                    title: "UGSTAmt", dataIndx: "UGSTAmt", width: 90, dataType: "double", align: "left", format: '##,###.00'
                },
                { title: "Trans. Charges", dataIndx: "TransC", width: 100, dataType: "float", resizable: false, hidden: true, align: "left" },
                { title: "Freight Amount", dataIndx: "OctroiC", width: 100, dataType: "float", resizable: false, hidden: true, align: "left" },
                { title: "Other Charges", dataIndx: "OtherC", width: 100, dataType: "float", resizable: false, hidden: true, align: "left" },
                { title: "Handling Chanrges", dataIndx: "LoadUnloadC", width: 100, dataType: "float", resizable: false, hidden: true, align: "left" },

                {
                    title: "NetAmount", dataIndx: "NetAmount", width: 120, dataType: "float", resizable: false, align: "left", editable: false,
                    format: '##,###.00'
                },
                { title: "Saved Qty", dataIndx: "SavedQty", width: 70, dataType: "float", align: "left", hidden: true},
            ],
            dataModel: dataModel,
            formulas: [
                ["MRP", function (rd) {
                    if (isNaN(rd.MRP))
                        return parseFloat(rd.Rate).toFixed(2);
                    else
                        return parseFloat(rd.MRP).toFixed(2);
                }],
                ["Amount", function (rd) {
                    return (parseFloat(rd.Qty) * parseFloat(rd.Rate)).toFixed(2);
                }],
                ["Discount", function (rd) {
                    var amount = parseFloat(rd.Amount) || 0;
                    var discper = parseFloat(rd.DiscountPer) || 0;
                    var discamt = parseFloat(rd.Discount) || 0;
                    if (discper > 0) {
                        discamt = (amount * discper / 100).toFixed(2);
                    }
                    return parseFloat(discamt).toFixed(2);
                }],
                ["TaxableValue", function (rd) {
                    var amount = parseFloat(rd.Qty) * parseFloat(rd.Rate);
                    var disc = parseFloat(rd.Discount) || 0;
                    return (amount - disc).toFixed(2);
                }],
                ["TaxAmount", function (rd) {
                    var amount = parseFloat(rd.TaxableValue) || 0;
                    var taxper = parseFloat(rd.Tax) || 0;
                    return (amount * taxper / 100).toFixed(2);
                }],
                ["SGSTAmt", function (rd) {
                    var amount = parseFloat(rd.TaxableValue) || 0;
                    var sgstPer = parseFloat(rd.SGST) || 0;
                    var sgstAmt = amount * (sgstPer / 100);
                    return parseFloat(sgstAmt).toFixed(2);
                }],
                ["CGSTAmt", function (rd) {
                    var amount = parseFloat(rd.TaxableValue) || 0;
                    var cgstPer = parseFloat(rd.CGST) || 0;
                    var cgstAmt = amount * (cgstPer / 100);
                    return parseFloat(cgstAmt).toFixed(2);
                }],
                ["IGSTAmt", function (rd) {
                    var amount = parseFloat(rd.TaxableValue) || 0;
                    var igstPer = parseFloat(rd.IGST) || 0;
                    var igstAmt = amount * (igstPer / 100);
                    return parseFloat(igstAmt).toFixed(2);
                }],
                ["UGSTAmt", function (rd) {
                    var amount = parseFloat(rd.TaxableValue) || 0;
                    var ugstPer = parseFloat(rd.UGST) || 0;
                    var ugstAmt = amount * (ugstPer / 100);
                    return parseFloat(ugstAmt).toFixed(2);
                }],
                ["NetAmount", function (rd) {
                    var amount = parseFloat(rd.TaxableValue) || 0;
                    var taxamount = parseFloat(rd.TaxAmount) || 0;
                    var transc = parseFloat(rd.TransC) || 0;
                    var octroic = parseFloat(rd.OctroiC) || 0;
                    var otherc = parseFloat(rd.OtherC) || 0;
                    var handlec = parseFloat(rd.LoadUnloadC) || 0;

                    var tempnet = amount + taxamount + transc + octroic + otherc + handlec;
                    var netAmount = parseFloat(tempnet);
                    return netAmount.toFixed(2);
                }],
            ],
            pageModel: { type: "local", rPP: 50 },
            postRenderInterval: -1,
            rowClick: function (evt, ui) {
                if (ui.rowData) {
                    selectedPORowIndx = ui.rowIndx;
                }
            }
        };
        $pogrid = $("#pogrid").pqGrid(setIID);
        $("#popup-dialog-crud").dialog({
            width: 883, modal: true,
            open: function () { $(".ui-dialog").position({ of: "#pogrid" }); },
            autoOpen: false
        });

    });
    function addRequiredDate(rowIndex) {
        selectedRequiredDate_RowIndx = rowIndex;
        $("#RequiredDatePopUpModel").modal("show");
        const gridData = $("#pogrid").pqGrid("option", "dataModel.data");
        $("#RequiredDateM").datepicker("setDate", gridData[selectedRequiredDate_RowIndx].RequiredDate);
    }
    // Function to set the required date in the grid
    function setRequiredDate() {
        const gridData = $("#pogrid").pqGrid("option", "dataModel.data");
        gridData[selectedRequiredDate_RowIndx].RequiredDate = $("#RequiredDateM").val();
        $("#pogrid").pqGrid("refreshDataAndView");
    }
    /********* Search Grid *********/
    $(document).ready(function () {
        var dataM = { location: "local", sorting: 'local' };
        var colM = [
            { title: "", dataIndx: "ID", dataType: "integer", hidden: true },
            { title: "", dataIndx: "SupplierID", dataType: "integer", hidden: true },
            { title: "", dataIndx: "StoreId", dataType: "integer", hidden: true },
            { title: "", dataIndx: "Againstid", dataType: "integer", hidden: true },
            { title: "", dataIndx: "RFQId", dataType: "integer", hidden: true },
            { title: "", dataIndx: "DeliveryAddress", dataType: "integer", hidden: true },
            { title: "", dataIndx: "VendorId", dataType: "integer", hidden: true },
            { title: "", dataIndx: "RefNo", dataType: "integer", hidden: true },
            {
                title: "PO No", dataIndx: "PONo", width: '15%',
                filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
            },
            {
                title: "PO Date", dataIndx: "strPODate", width: '14%', dataType: "date",
                filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
            },
            {
                title: "Supplier", dataIndx: "SupplierName", width: '14%',
                filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
            },
            {
                title: "Project Code", dataIndx: "StoreName", width: '14%',
                filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
            },
            {
                title: "Item Type", dataIndx: "ItemCategory", width: "15%",
                filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
            },
            {
                title: "PR No", dataIndx: "RFQNo", width: '14%',
                filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
            },
            {
                title: "Created-By", dataIndx: "CreatedBy", width: '14%',
                filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
            },
        ];

        var setM = {
            width: '100%',
            height: 400,
            sortable: false,
            numberCell: { show: false },
            hoverMode: 'cell',
            showTop: false,
            resizable: true,
            scrollModel: { autoFit: true },
            draggable: false,
            wrap: false,
            editable: false,
            columnBorders: true,
            selectionModel: { type: 'row', mode: 'single' },
            colModel: colM,
            dataModel: dataM,
            pageModel: { type: "local", rPP: 100 },
            filterModel: { on: true, mode: "AND", header: true },
            rowClick: function (evt, ui) {
                ClearForm();
                if (ui.rowData) {
                    var rowIndx = parseInt(ui.rowIndx);
                    var record = ui.rowData;
                    suplierid = record.SupplierID;
                    $("#VendorId").val(record.VendorId);
                    $("#ID").val(record.ID);
                    $("#SupplierId").val(record.SupplierID);
                    $("#PONo").val(record.PONo);
                    $("#Againstid").val(record.Againstid);
                    $("#RFQId").val(record.RFQId);
                    $("#RFQNo").val(record.RFQNo);
                    $("#DeliveryAddress").val(record.DeliveryAddress);
                    $("#RefNo").val(record.RefNo);
                    $("#PODate").val(record.strPODate);
                    $("#RefNo").val(record.RefNo);
                    $("#SupplierName").val(record.SupplierName);
                    $("#ddlStores").val(record.StoreId);
                    $("#Against").val(record.Againstid);
                    $("#Transport").val(record.Transport);
                    $("#PurchaseTerm").val(record.PurchaseTerm);
                    $("#BED").val(record.BED);
                    $("#Edu").val(record.Edu);
                    $("#SHECess").val(record.SHECess);
                    $("#PoVendorId").val(record.PoVendorId);
                    $("#PoVendorName").val(record.PoVendorName);
                    $("#DeliveryDate").val(record.strDeliveryDate);
                    if ($('#Against').val() == "0") {
                        $("#btnShowItems").hide();
                        $("#RFQNo").prop("disabled", false);
                    }
                    else {
                        $("#btnShowItems").show();
                        $("#RFQNo").prop("disabled", true);
                    }

                    $("#Details").val(record.Details);
                    $("#Tax").val(record.Tax);
                    $("#Amount").val(record.Amount);
                    $("#Discount").val(record.Discount);
                    $("#OtherCharges").val(record.OtherCharges);
                    $("#GrandTotal").val(record.GrandTotal);
                    $("#Details").val(record.Details);
                    $prePOGrandtotal = record.GrandTotal;
                    $.ajax({
                        type: "GET",
                        url: "/StoreMaster/GetProjectBudget",
                        data: { storeId: $("#ddlStores").val(), ID: record.ItemCategoryId },
                        datatype: "Json",
                        success: function (data) {
                            var budget = data.records[0].BudgetCost;
                            var utilize = data.records[0].UtilizedBudget;
                            budgetbalanc = budget - utilize;
                            $('#BalanceDue').val(budgetbalanc);
                        }
                    });
                    $.ajax({
                        type: "GET",
                        url: "/PurchaseOrder/PurchaseOrderdetails/",
                        data: { POId: record.ID },
                        datatype: "Json",
                        success: function (data) {
                            $("#BED").val(data.BED);
                            $("#Edu").val(data.Edu);
                            $("#SHECess").val(data.SHECess);
                            var dataMGrid = [];
                            $.each(data.PODetails, function (index, value) {
                                var grdData = {
                                    'ID': value.ID, 'POIndDtlId': value.POIndDtlId, 'ItemID': value.ItemID, 'ItemName': value.ItemName, 'TaxRate': value.TaxRate, 'Qty': value.Qty, 'PackSize': value.PackSize, 'Rate': value.Rate, 'MRP': value.MRP,
                                    'OrderingUnit': value.OrderingUnit, 'Make': value.Make, 'MaterialOfConstruct': value.MaterialOfConstruct, 'IndentRemark': value.IndentRemark, 'RequiredDate': value.RequiredDate,'SizeOrWeight': value.SizeOrWeight, 'POIndentRemark': value.POIndentRemark,'FreeQty': value.FreeQty, 'Amount': value.Amount,
                                    'TaxIds': value.TaxIds, 'Tax': value.Tax, 'TaxAmount': value.TaxAmount, 'TransC': value.TransC, 'OctroiC': value.OctroiC,
                                    'OtherC': value.OtherC, 'LoadUnloadC': value.LoadUnloadC, 'DiscountPer': value.discountper, 'Discount': value.Discount, 'NetAmount': value.NetAmount,
                                    'SupplierName': value.SupplierName, 'DescriptiveName': value.DescriptiveName, 'SGST': value.SGST, 'CGST': value.CGST, 'IGST': value.IGST, 'UGST': value.UGST, 'HSNCode': value.HSNCode, 'SavedQty': value.Qty
                                }
                                dataMGrid.push(grdData);
                            });
                            const details = dataMGrid.map(item => {
                                item.pq_cellattr = { ItemName: { title: item.ItemName } };
                                return item;
                            });
                            $pogrid.pqGrid("option", "dataModel.data", details);
                            $pogrid.pqGrid("refreshDataAndView");

                            var colM = $pogrid.pqGrid("option", "colModel");
                            colM[2].editable = false;
                            $pogrid.pqGrid("option", "colModel", colM);

                            var dataTerms = [];
                            $.each(data.PODeliveryTerms, function (index, value) {
                                var grdData = { 'DelTermID': value.DelTermID, 'DeliveryTermCode': value.DeliveryTermCode, 'DeliveryTermDesc': value.DeliveryTermDesc, 'state': true }
                                dataTerms.push(grdData);
                            });
                            $DeliveryTermgrid.pqGrid("option", "dataModel.data", dataTerms);
                            $DeliveryTermgrid.pqGrid("refreshDataAndView");

                            dataTerms = [];
                            $.each(data.POPaymenterms, function (index, value) {
                                var grdData = {
                                    'PayTermID': value.PayTermID, 'PaymentTermCode': value.PaymentTermCode, 'PaymentTermDesc': value.PaymentTermDesc, 'state': true, pq_cellattr: {
                                        PaymentTermDesc: {
                                            title: value.PaymentTermDesc
                                        }
                                    } }
                                dataTerms.push(grdData);
                            });
                            $PaymentTermgrid.pqGrid("option", "dataModel.data", dataTerms);
                            $PaymentTermgrid.pqGrid("refreshDataAndView");

                            dataTerms = [];
                            $.each(data.POOtherTerms, function (index, value) {
                                var grdData = { 'OtherTermID': value.OtherTermID, 'OthersTermCode': value.OthersTermCode, 'OthersTermDesc': value.OthersTermDesc, 'state': true }
                                dataTerms.push(grdData);
                            });
                            $OtherTermgrid.pqGrid("option", "dataModel.data", dataTerms);
                            $OtherTermgrid.pqGrid("refreshDataAndView");

                            dataTerms = [];
                            $.each(data.POBasis, function (index, value) {
                                var grdData = { 'BasisId': value.BasisId, 'BasisCode': value.BasisCode, 'BasisDesc': value.BasisDesc, 'state': true }
                                dataTerms.push(grdData);
                            });
                            $Basis.pqGrid("option", "dataModel.data", dataTerms);
                            $Basis.pqGrid("refreshDataAndView");

                            dataTerms = [];
                            $.each(data.POInspectio, function (index, value) {
                                var grdData = { 'InspectionId': value.InspectionId, 'InspectionCode': value.InspectionCode, 'InspectionDesc': value.InspectionDesc, 'state': true }
                                dataTerms.push(grdData);
                            });
                            $Inspection.pqGrid("option", "dataModel.data", dataTerms);
                            $Inspection.pqGrid("refreshDataAndView");
                            showperAmount();
                        }
                    });
                }
                closeModal();
            }
        };
        $searchgrid = $("#searchgrid").pqGrid(setM);
    });
    /********* Item Grid *********/
    $(document).ready(function () {
        var dataTaxM = { location: "local", sorting: 'local' }
        var colTaxM = [
            {
                dataIndx: "state", maxWidth: 25, minWidth: 25,  align: "center", type: 'checkBoxSelection', cls: 'ui-state-default', sortable: false,
                editor: false, dataType: 'bool',
                title: "<input type='checkbox' />",
                cb: { select: true, all: false, header: true }
            },
            { title: "", dataIndx: "ID", dataType: "integer", hidden: true },
            { title: "", dataIndx: "PackSizeId", dataType: "integer", hidden: true },
            { title: "Code", dataIndx: "Code", width: 200, editable: false, filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] } },
            { title: "Name", dataIndx: "Name", width: 400, editable: false, filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] } },
            { title: "PackSize", dataIndx: "PackSize", width: 200, editable: false },
            { title: "Last PORate", dataIndx: "LastPORate", width: 200, editable: false },
            { title: "Unit", dataIndx: "UnitName", width: 200, editable: false },
            { title: "Rate", dataIndx: "ItemRate", width: 200, editable: false, hidden: true },
            { title: "MRP", dataIndx: "MRP", width: 200, editable: false }
        ];
        var TaxM = {
            width: '100%',
            height: 400,
            sortable: false,
            numberCell: { show: false },
            hoverMode: 'cell',
            showTop: false,
            resizable: true,
            scrollModel: { autoFit: true },
            draggable: false,
            wrap: false,
            columnBorders: true,
            selectionModel: { type: 'row' },
            colModel: colTaxM,
            dataModel: dataTaxM,
            pageModel: { type: "local", rPP: 20 },
            filterModel: { on: true, mode: "AND", header: true },
            virtualX: true,
            virtualY: true,
        };
        $Itemgrid = $("#Itemgrid").pqGrid(TaxM);
        //LoadItemgrid();
    });
    /********* Delivery Term Search Grid *********/
    $(document).ready(function () {
        var dataModel = {
            location: "local"
        }
        var colDelM = [
            {
                dataIndx: "state", maxWidth: 25, minWidth: 25,  align: "center", type: 'checkBoxSelection', cls: 'ui-state-default', sortable: false,
                editor: false, dataType: 'bool',
                title: "<input type='checkbox' />",
                cb: { select: true, all: false, header: true }
            },
            { title: "", dataIndx: "TermID", dataType: "integer", hidden: true },
            {
                title: "Code", dataIndx: "DeliveryTermCode", width: '10%', editable: false,
                filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
            },
            {
                title: "Name", dataIndx: "DeliveryTermDesc", width: 450, editable: false,
                filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
            }
        ];
        var DelM = {
            width: '100%',
            height: 400,
            sortable: false,
            numberCell: { show: false },
            hoverMode: 'cell',
            showTop: false,
            resizable: true,
            scrollModel: { autoFit: true },
            draggable: false,
            wrap: false,
            columnBorders: true,
            selectionModel: { type: 'row' },
            colModel: colDelM,
            dataModel: dataModel,
            filterModel: { on: true, mode: "AND", header: true },
            pageModel: { type: "local", rPP: 20 },
            virtualX: true,
            virtualY: true,
        };
        $SearchDeliveryTermgrid = $("#SearchDeliveryTermgrid").pqGrid(DelM);
    });
    /********* Delivery Term Grid *********/
    $(document).ready(function () {
        $('#btnViewDelTerms').on('click', function () {
            //$("#DeliveryItem").modal('toggle');
            LoadSearchDeliveryTermgrid();
        });
        $('#btnRemoveDelTerms').on('click', function () {
            var getData = $DeliveryTermgrid.pqGrid("option", "dataModel.data");
            var selectedItems = jLinq.from(getData).equals("state", true).select();

            $.each(selectedItems, function (key, value) {
                var obj = $DeliveryTermgrid.pqGrid("getRowIndx", { rowData: value });
                var rowIndx = obj.rowIndx;
                $DeliveryTermgrid.pqGrid("deleteRow", { rowIndx: rowIndx });
            });
        });

        var dataDelM = { location: "local", sorting: 'local' }
        var colDelM = [
            {
                dataIndx: "state", maxWidth: 25, minWidth: 25,  align: "center", type: 'checkBoxSelection', cls: 'ui-state-default', sortable: false,
                editor: false, dataType: 'bool',
                title: "<input type='checkbox' />",
                cb: { select: true, all: false, header: true }
            },
            { title: "", dataIndx: "DelTermID", dataType: "integer", hidden: true },
            { title: "Code", dataIndx: "DeliveryTermCode", width: '10%', editable: false },
            { title: "Name", dataIndx: "DeliveryTermDesc", width: 400, editable: false }
        ];
        var DelM = {
            width: '100%',
            height: 250,
            sortable: false,
            numberCell: { show: false },
            hoverMode: 'cell',
            showTop: false,
            resizable: true,
            scrollModel: { autoFit: true },
            draggable: false,
            wrap: false,
            columnBorders: true,
            selectionModel: { type: 'row' },
            colModel: colDelM,
            dataModel: dataDelM,
            pageModel: { type: "local", rPP: 20 }
        };
        $DeliveryTermgrid = $("#DeliveryTermgrid").pqGrid(DelM);
    });
    /********* Payment Term Search Grid *********/
    $(document).ready(function () {
        var dataPayM = { location: "local" }
        var colPayM = [
            {
                dataIndx: "state", maxWidth: 25, minWidth: 25,  align: "center", type: 'checkBoxSelection', cls: 'ui-state-default', sortable: false,
                editor: false, dataType: 'bool',
                cb: { select: true, all: false, header: true }
            },
            { title: "", dataIndx: "TermID", dataType: "integer", hidden: true },
            {
                title: "Code", dataIndx: "PaymentTermCode", width: '10%', editable: false,
                filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
            },
            {
                title: "Name", dataIndx: "PaymentTermDesc", width: 450, editable: false,
                filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }

            }
        ];
        var DelM = {
            width: '100%',
            height: 400,
            sortable: false,
            numberCell: { show: false },
            hoverMode: 'cell',
            showTop: false,
            resizable: true,
            scrollModel: { autoFit: true },
            draggable: false,
            wrap: false,
            columnBorders: true,
            filterModel: { on: true, mode: "AND", header: true },
            selectionModel: { type: 'none', subtype: 'incr', cbHeader: true, cbAll: true },
            colModel: colPayM,
            dataModel: dataPayM,
            pageModel: { type: "local", rPP: 20 },
            virtualX: true,
            virtualY: true,
        };
        $SearchPaymentTermgrid = $("#SearchPaymentTermgrid").pqGrid(DelM);
    });
    /********* Payment Term Grid *********/
    $(document).ready(function () {
        $('#btnViewPayTerms').on('click', function () {
            //$("#PaymentItem").modal('toggle');
            LoadSearchPaymentTermgrid();
        });
        $('#btnRemovePayTerms').on('click', function () {
            var getData = $PaymentTermgrid.pqGrid("option", "dataModel.data");
            var selectedItems = jLinq.from(getData).equals("state", true).select();
            $.each(selectedItems, function (key, value) {
                var obj = $PaymentTermgrid.pqGrid("getRowIndx", { rowData: value });
                var rowIndx = obj.rowIndx;
                $PaymentTermgrid.pqGrid("deleteRow", { rowIndx: rowIndx });
            });
        });
        var dataDelM = { location: "local", sorting: 'local' }
        var colDelM = [
            {
                dataIndx: "state", maxWidth: 25, minWidth: 25,  align: "center", type: 'checkBoxSelection', cls: 'ui-state-default', sortable: false,
                editor: false, dataType: 'bool',
                title: "<input type='checkbox' />",
                cb: { select: true, all: false, header: true }
            },
            { title: "", dataIndx: "PayTermID", dataType: "integer", hidden: true },
            {
                title: "Code", dataIndx: "PaymentTermCode", width: '10%', editable: false

            },
            {
                title: "Name", dataIndx: "PaymentTermDesc", width: 400, editable: false

            }
        ];
        var DelM = {
            width: '100%',
            height: 260,
            sortable: false,
            numberCell: { show: false },
            hoverMode: 'cell',
            showTop: false,
            resizable: true,
            scrollModel: { autoFit: true },
            draggable: false,
            wrap: false,
            columnBorders: true,
            selectionModel: { type: 'row' },
            colModel: colDelM,
            dataModel: dataDelM,
            pageModel: { type: "local", rPP: 20 },
        };
        $PaymentTermgrid = $("#PaymentTermgrid").pqGrid(DelM);
    });
    /********* Other Term Search Grid *********/
    $(document).ready(function () {
        var dataDelM = { location: "local", sorting: 'local' }
        var colDelM = [
            {
                dataIndx: "state", maxWidth: 25, minWidth: 25,  align: "center", type: 'checkBoxSelection', cls: 'ui-state-default', sortable: false,
                editor: false, dataType: 'bool',
                cb: { select: true, all: false, header: true }
            },
            { title: "", dataIndx: "TermID", dataType: "integer", hidden: true },
            {
                title: "Code", dataIndx: "OthersTermCode", width: '15%', editable: false,
                filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
            },
            {
                title: "Name", dataIndx: "OthersTermDesc", width: 450, editable: false,
                filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
            }
        ];
        var DelM = {
            width: '100%',
            height: 400,
            sortable: false,
            numberCell: { show: false },
            hoverMode: 'cell',
            showTop: false,
            resizable: true,
            scrollModel: { autoFit: true },
            draggable: false,
            wrap: false,
            columnBorders: true,
            filterModel: { on: true, mode: "AND", header: true },
            selectionModel: { type: 'row' },
            colModel: colDelM,
            dataModel: dataDelM,
            pageModel: { type: "local", rPP: 20 },
            virtualX: true,
            virtualY: true,
        };
        $SearchOtherTermgrid = $("#SearchOtherTermgrid").pqGrid(DelM);
    });
    /*****************search basis term********************/

    $(document).ready(function () {
        var dataDelM = { location: "local", sorting: 'local' }
        var colDelM = [
            {
                dataIndx: "state", maxWidth: 25, minWidth: 25,  align: "center", type: 'checkBoxSelection', cls: 'ui-state-default', sortable: false,
                editor: false, dataType: 'bool',
                cb: { select: true, all: false, header: true }
            },
            { title: "", dataIndx: "BasisID", dataType: "integer", hidden: true },
            {
                title: "Code", dataIndx: "BasisCode", width: '10%', editable: false,
                filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
            },
            {
                title: "Description", dataIndx: "BasisDesc", width: 450, editable: false,
                filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
            }
        ];
        var DelM = {
            width: '100%',
            height: 400,
            sortable: false,
            numberCell: { show: false },
            hoverMode: 'cell',
            showTop: false,
            resizable: true,
            scrollModel: { autoFit: true },
            draggable: false,
            wrap: false,
            columnBorders: true,
            filterModel: { on: true, mode: "AND", header: true },
            selectionModel: { type: 'row' },
            colModel: colDelM,
            dataModel: dataDelM,
            pageModel: { type: "local", rPP: 20 },
            virtualX: true,
            virtualY: true,
        };
        $SearchBasisTermgrid = $("#SearchBasisTermgrid").pqGrid(DelM);
    });
    $(document).ready(function () {
        var dataDelM = { location: "local", sorting: 'local' }
        var colDelM = [
            {
                dataIndx: "state", maxWidth: 25, minWidth: 25,  align: "center", type: 'checkBoxSelection', cls: 'ui-state-default', sortable: false,
                editor: false, dataType: 'bool',
                cb: { select: true, all: false, header: true }
            },
            { title: "", dataIndx: "InspectionId", dataType: "integer", hidden: true },
            {
                title: "Code", dataIndx: "InspectionCode", width: '10%', editable: false,
                filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
            },
            {
                title: "Description", dataIndx: "InspectionDesc", width: 450, editable: false,
                filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
            }
        ];
        var DelM = {
            width: '100%',
            height: 400,
            sortable: false,
            numberCell: { show: false },
            hoverMode: 'cell',
            showTop: false,
            resizable: true,
            scrollModel: { autoFit: true },
            draggable: false,
            wrap: false,
            columnBorders: true,
            filterModel: { on: true, mode: "AND", header: true },
            selectionModel: { type: 'row' },
            colModel: colDelM,
            dataModel: dataDelM,
            pageModel: { type: "local", rPP: 20 },
            virtualX: true,
            virtualY: true,
        };
        $SearchInspectionTermgrid = $("#SearchInspectionTermgrid").pqGrid(DelM);
    });

    /**************Inspection Grid**************************/
    $(document).ready(function () {
        $('#btninspectionTerms').on('click', function () {
            LoadSearchInspectionTermgrid();
        });
        $('#btnRemoveinspectionTerms').on('click', function () {
            var getData = $Inspection.pqGrid("option", "dataModel.data");
            var selectedItems = jLinq.from(getData).equals("state", true).select();
            $.each(selectedItems, function (key, value) {
                var obj = $Inspection.pqGrid("getRowIndx", { rowData: value });
                var rowIndx = obj.rowIndx;
                $Inspection.pqGrid("deleteRow", { rowIndx: rowIndx });
            });
        });

        var dataOtherM = { location: "local" }
        var colOtherM = [
            {
                dataIndx: "state", maxWidth: 25, minWidth: 25,  align: "center", type: 'checkBoxSelection', cls: 'ui-state-default', sortable: false,
                editor: false, dataType: 'bool',
                title: "<input type='checkbox' />",
                cb: { select: true, all: false, header: true }
            },
            { title: "", dataIndx: "InspectionId", dataType: "integer", hidden: true },
            { title: "Code", dataIndx: "InspectionCode", width: '10%', editable: false },
            { title: "Description", dataIndx: "InspectionDesc", width: 400, editable: false }
        ];
        var inspection = {
            width: '100%',
            height: 260,
            sortable: false,
            numberCell: { show: false },
            hoverMode: 'cell',
            showTop: false,
            resizable: true,
            scrollModel: { autoFit: true },
            draggable: false,
            wrap: false,
            columnBorders: true,
            selectionModel: { type: 'row' },
            colModel: colOtherM,
            dataModel: dataOtherM,
            pageModel: { type: "local", rPP: 20 },
            virtualX: true,
            virtualY: true,
        };
        $Inspection = $("#Inspection").pqGrid(inspection);
    });
    /**********************Basis Term******************/

    $(document).ready(function () {
        $('#btnBasisTerms').on('click', function () {
            LoadSearchBasisTermgrid();
        });
        $('#btnRemoveBasisTerms').on('click', function () {
            var getData = $Basis.pqGrid("option", "dataModel.data");
            var selectedItems = jLinq.from(getData).equals("state", true).select();
            $.each(selectedItems, function (key, value) {
                var obj = $Basis.pqGrid("getRowIndx", { rowData: value });
                var rowIndx = obj.rowIndx;
                $Basis.pqGrid("deleteRow", { rowIndx: rowIndx });
            });
        });

        var basism = { location: "local" }
        var colM = [
            {
                dataIndx: "state", maxWidth: 25, minWidth: 25,  align: "center", type: 'checkBoxSelection', cls: 'ui-state-default', sortable: false,
                editor: false, dataType: 'bool',
                title: "<input type='checkbox' />",
                cb: { select: true, all: false, header: true }
            },
            { title: "", dataIndx: "BasisId", dataType: "integer", hidden: true },
            { title: "Code", dataIndx: "BasisCode", width: '10%', editable: false },
            { title: "Name", dataIndx: "BasisDesc", width: 400, editable: false }
        ];
        var basisgrid = {
            width: '100%',
            height: 260,
            sortable: false,
            numberCell: { show: false },
            hoverMode: 'cell',
            showTop: false,
            resizable: true,
            scrollModel: { autoFit: true },
            draggable: false,
            wrap: false,
            columnBorders: true,
            selectionModel: { type: 'row' },
            colModel: colM,
            dataModel: basism,
            pageModel: { type: "local", rPP: 20 },
            virtualX: true,
            virtualY: true
        };
        $Basis = $("#Basistermgrid").pqGrid(basisgrid);
    });


    /********* Other Term Grid *********/
    $(document).ready(function () {
        $('#btnViewOtherTerms').on('click', function () {
            //$("#OtherItem").modal('toggle');
            LoadSearchOtherTermgrid();
        });
        $('#btnRemoveOtherTerms').on('click', function () {
            var getData = $OtherTermgrid.pqGrid("option", "dataModel.data");
            var selectedItems = jLinq.from(getData).equals("state", true).select();
            $.each(selectedItems, function (key, value) {
                var obj = $OtherTermgrid.pqGrid("getRowIndx", { rowData: value });
                var rowIndx = obj.rowIndx;
                $OtherTermgrid.pqGrid("deleteRow", { rowIndx: rowIndx });
            });
        });

        var dataOtherM = { location: "local" }
        var colOtherM = [
            {
                dataIndx: "state", maxWidth: 25, minWidth: 25,  align: "center", type: 'checkBoxSelection', cls: 'ui-state-default', sortable: false,
                editor: false, dataType: 'bool',
                title: "<input type='checkbox' />",
                cb: { select: true, all: false, header: true }
            },
            { title: "", dataIndx: "OtherTermID", dataType: "integer", hidden: true },
            { title: "Code", dataIndx: "OthersTermCode", width: '10%', editable: false },
            { title: "Name", dataIndx: "OthersTermDesc", width: 400, editable: false }
        ];
        var DelM = {
            width: '100%',
            height: 260,
            sortable: false,
            numberCell: { show: false },
            hoverMode: 'cell',
            showTop: false,
            resizable: true,
            scrollModel: { autoFit: true },
            draggable: false,
            wrap: false,
            columnBorders: true,
            selectionModel: { type: 'row' },
            colModel: colOtherM,
            dataModel: dataOtherM,
            pageModel: { type: "local", rPP: 20 },
            virtualX: true,
            virtualY: true,
        };
        $OtherTermgrid = $("#OtherTermgrid").pqGrid(DelM);
    });
    /********* Add Button Click Events *********/
    $(document).ready(function () {
        $('#btnAddDeliveryTerm').on('click', function () {
            ClosePopupWindow("DeliveryItemModal");
            var getData = $SearchDeliveryTermgrid.pqGrid("option", "dataModel.data");
            var selectedItems = jLinq.from(getData).equals("state", true).select();

            var colM = $DeliveryTermgrid.pqGrid("option", "colModel");
            colM[2].editable = true;
            colM[3].editable = true;
            $DeliveryTermgrid.pqGrid("option", "colModel", colM);
            $.each(selectedItems, function (key, value) {
                $DeliveryTermgrid.pqGrid("addRow", { newRow: { 'DelTermID': value.TermID, 'DeliveryTermCode': value.DeliveryTermCode, 'DeliveryTermDesc': value.DeliveryTermDesc, 'state': true } })
            });
            colM[2].editable = false;
            colM[3].editable = false;
            $DeliveryTermgrid.pqGrid("option", "colModel", colM);
            //$DeliveryTermgrid.pqGrid("selection", { type: 'row', method: 'selectAll' });
        });
        $('#btnAddPaymentTerm').on('click', function () {
            ClosePopupWindow("PaymentItemModal");
            var getData = $SearchPaymentTermgrid.pqGrid("option", "dataModel.data");
            var selectedItems = jLinq.from(getData).equals("state", true).select();
            var colM = $PaymentTermgrid.pqGrid("option", "colModel");
            colM[2].editable = true;
            colM[3].editable = true;
            $PaymentTermgrid.pqGrid("option", "colModel", colM);
            $.each(selectedItems, function (key, value) {
                $PaymentTermgrid.pqGrid("addRow", {
                    newRow: {
                        'PayTermID': value.TermID, 'PaymentTermCode': value.PaymentTermCode, 'PaymentTermDesc': value.PaymentTermDesc, 'state': true, pq_cellattr: {
                            PaymentTermDesc: {
                                title: value.PaymentTermDesc
                            }
                        }} })
            });
            colM[2].editable = false;
            colM[3].editable = false;
            $PaymentTermgrid.pqGrid("option", "colModel", colM);
            //$PaymentTermgrid.pqGrid("selection", {type: 'row', method: 'selectAll' });
        });
        $('#btnAddOtherTerm').on('click', function () {
            ClosePopupWindow("OtherItemModal");
            var getData = $SearchOtherTermgrid.pqGrid("option", "dataModel.data");
            var selectedItems = jLinq.from(getData).equals("state", true).select();
            var colM = $OtherTermgrid.pqGrid("option", "colModel");
            colM[2].editable = true;
            colM[3].editable = true;
            $OtherTermgrid.pqGrid("option", "colModel", colM);
            $.each(selectedItems, function (key, value) {
                $OtherTermgrid.pqGrid("addRow", { newRow: { 'OtherTermID': value.TermID, 'OthersTermCode': value.OthersTermCode, 'OthersTermDesc': value.OthersTermDesc, 'state': true } })
            });
            colM[2].editable = false;
            colM[3].editable = false;
            $OtherTermgrid.pqGrid("option", "colModel", colM);
            //$OtherTermgrid.pqGrid("selection", {type: 'row', method: 'selectAll' });
        });
        /*******************basis search**********************/
        $('#btnAddBasisTerm').on('click', function () {
            ClosePopupWindow("BasisItemModal");
            var getData = $SearchBasisTermgrid.pqGrid("option", "dataModel.data");
            var selectedItems = jLinq.from(getData).equals("state", true).select();
            var colM = $Basis.pqGrid("option", "colModel");
            colM[2].editable = true;
            colM[3].editable = true;
            $OtherTermgrid.pqGrid("option", "colModel", colM);
            $.each(selectedItems, function (key, value) {
                $Basis.pqGrid("addRow", { newRow: { 'BasisId': value.BasisId, 'BasisCode': value.BasisCode, 'BasisDesc': value.BasisDesc, 'state': true } })
            });
            colM[2].editable = false;
            colM[3].editable = false;
            $Basis.pqGrid("option", "colModel", colM);
            //$OtherTermgrid.pqGrid("selection", {type: 'row', method: 'selectAll' });
        });
        $('#btnAddInspectionTerm').on('click', function () {
            ClosePopupWindow("InspectionItemModal");
            var getData = $SearchInspectionTermgrid.pqGrid("option", "dataModel.data");
            var selectedItems = jLinq.from(getData).equals("state", true).select();
            var colM = $Inspection.pqGrid("option", "colModel");
            colM[2].editable = true;
            colM[3].editable = true;
            $Inspection.pqGrid("option", "colModel", colM);
            $.each(selectedItems, function (key, value) {
                $Inspection.pqGrid("addRow", { newRow: { 'InspectionId': value.InspectionId, 'InspectionCode': value.InspectionCode, 'InspectionDesc': value.InspectionDesc, 'state': true } })
            });
            colM[2].editable = false;
            colM[3].editable = false;
            $Inspection.pqGrid("option", "colModel", colM);
            //$OtherTermgrid.pqGrid("selection", {type: 'row', method: 'selectAll' });
        });
        $("#btnShowItems").on('click', function () {
            if ($("#Against").val() == "1") {
                if ($("#ddlStores").val() == "") {
                    ShowAlert("error", "Please Select Project");
                    return;
                }
            }

            LoadItemgrid();
        });
        $("#btnAddItems").on('click', function () {
            $Itemgrid.pqGrid("reset", { filter: true });
            ClosePopupWindow("ItemModal");
            var dataMGrid = [];
            var getData = $Itemgrid.pqGrid("option", "dataModel.data");
            var selectedItems = jLinq.from(getData).equals("state", true).select();
            $.each(selectedItems, function (key, value) {
                var grdData = {
                    'ItemID': value.ID, 'ItemName': value.Name, 'PackSize': value.PackSize, 'Rate': value.LastPORate, 'MRP': value.MRP, 'OrderingUnit': value.UnitName,
                    'Qty': '0', 'FreeQty': '0', 'Amount': '0', 'TaxAmount': '0', 'TransC': '0', 'OctroiC': '0', 'OtherC': '0', 'LoadUnloadC': '0', 'DiscountPer': '0', 'Discount': '0', 'NetAmount': '0',
                    'DescriptiveName': value.DescriptiveName, 'SGST': '0', 'CGST': '0', 'IGST': '0', 'UGST': '0'
                }
                dataMGrid.push(grdData);
            });
            $pogrid.pqGrid("option", "dataModel.data", dataMGrid);
            $pogrid.pqGrid("refreshDataAndView");
        });
    });



    //*******************Image View********************//
    $("#btnShowAttachments").click(function () {
        var RFQId = $("#RFQId").val();
        if (RFQId === "" || RFQId === 0) {
            ShowAlert("error", "Please Select Request");
            return;
        }
        $.ajax({
            type: "GET",
            url: "/ScanDoc/ScanDoc/GetScanDocUrl",
            data: { FileId: RFQId, ScanDocSubTypeId: 18 },
            datatype: "Json",
            success: function (data) {
                if (data != '') {
                    ViewSlideShow(data, 'slideshow-container', appSetting);
                }
                else {
                    ShowAlert("error", "No Documents Found")
                }
            }
        });
    })
    /////*********Image Slide Show in Modal**********************//
    let ImgIndex = 1;

    function plusSlides(n) {
        showGallary(ImgIndex += n);
    }
    function showGallary(n) {
        let i;
        let ImgSlides = document.getElementsByClassName("imgSlide");
        let video = document.getElementById("video");
        if (n > ImgSlides.length) { ImgIndex = 1 }
        if (n < 1) { ImgIndex = ImgSlides.length }
        for (i = 0; i < ImgSlides.length; i++) {
            ImgSlides[i].style.display = "none";
        }
        ImgSlides[ImgIndex - 1].style.display = "block";
        if (video) {
            video.play();
        }
    }

    function closeImageModal() {
        $("#slideshow-container").empty();
        $("#ViewModal").css('display', 'none');
    }
    //***********Close SlideShow Modal*********************////

    // ***********Download Image in Folder********************//
    $(document).on("click", "#btnDownloadAttachment", function (e) {
        var RFQId = $("#RFQId").val();
        if (RFQId === "" || RFQId === 0) {
            ShowAlert("error", "Please Select Request");
            return;
        }
        let folderName = "Purchase Order" + $("#PONo").val();
        $.ajax({
            type: "GET",
            url: "/ScanDoc/ScanDoc/GetScanDocUrl",
            data: { FileId: RFQId, ScanDocSubTypeId: 18 },
            datatype: "Json",
            success: function (data) {
                if (data != '') {
                    DownloadFiles(data, e, appSetting, folderName)
                }
                else {
                    ShowAlert("error", "No Documents Found")
                }
            }
        });
    });




    $('#btnExport').on('click', function () {
        if ($("#ID").val() === "" || $("#ID").val() === 0) {
            ShowAlert("error", "Please Select PO");
            return;
        }
        $("#ReportModal").modal('show');

        var potype = "PROVISIONAL PURCHASE ORDER";
        var poid = $("#ID").val();
        ReportValidationCheck(potype, poid);
    });
    function ReportValidationCheck(potype, poid) {
        var url = "";
        var poId = poid;
        var poType = potype;
        var ReportType = "Vertical";
        if ($("[name='ReportType']:checked").val() === "Vertical")
            ReportType = "Vertical";
        else
            ReportType = "Horizontal";
        url = "../../Reports/ReportViewer.aspx?reportid=" + 228 + "&poId=" + poId + "&poType=" + poType + "&rpttype=" + ReportType;

        console.log(url);
        var myframe = document.getElementById("iframeReportViewer");
        if (myframe != null) {
            if (myframe.src) {
                myframe.src = url;
            }
            else if (myframe.contentWindow != null && myframe.contentWindow.location != null) {
                myframe.contentWindow.location = url;
            }
            else {
                myframe.setAttribute('src', url);
            }
            return false;
        }
    }
    /*****************Vendor Grid*********************/
    //$('#DeliveryAddress').on('click', function () {
    //    LoadVGrid();
    //});
    function LoadVGrid() {
        $("#VendorModal").dialog({
            height: 500,
            width: 900,
            modal: true,
            open: function (evt, ui) {
                $.ajax({
                    url: "/VendorMaster/ActiveVendor",
                    cache: false,
                    async: true,
                    method: "GET",
                    dataType: "JSON",
                    success: function (response) {
                        $("#Vendorgrid").pqGrid("option", "dataModel.data", response.records);
                        $("#Vendorgrid").pqGrid("refreshDataAndView");
                    }
                });
            },
            close: function (event, ui) {
            },
            show: {
                effect: "blind",
                duration: 500
            }
        });
    }

    dataVList = { location: 'local', sorting: 'local', paging: 'local', dataType: 'JSON' };
    var setVcols = [
        { title: "", dataIndx: "VendorId", dataType: "integer", hidden: true },
        {
            title: "Vendor Name", dataIndx: "Name", width: '10%', dataType: "string",
            filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
        }
    ];
    setsetpoList = {
        width: "auto", //auto width
        height: "100%-30", //height in %age
        selectionModel: { type: 'cell' },
        autoSizeInterval: 0,
        scrollModel: { autoFit: true },
        dragColumns: { enabled: false },
        hoverMode: 'cell',
        editor: { type: 'textbox' },
        filterModel: { on: true, mode: "AND", header: true },
        showTop: false,
        resizable: true,
        virtualX: true,
        colModel: setVcols,
        dataModel: dataVList,

        cellClick: function (evt, ui) {
            if (ui.rowData) {
                var record = ui.rowData;

                //$("#DeliveryAddress").val(record.VenderAdd);
                $("#VendorId").val(record.VendorId);
                ClosePopupWindow("VendorModal");
            }
        },
        pageModel: { type: "local", rPP: 20 }
    };
    $("#Vendorgrid").pqGrid(setsetpoList);

    /******************************* po vendor grid********************/
    setsetpoVendorList = {
        width: "auto", //auto width
        height: "100%-30", //height in %age
        selectionModel: { type: 'cell' },
        autoSizeInterval: 0,
        scrollModel: { autoFit: true },
        dragColumns: { enabled: false },
        hoverMode: 'cell',
        editor: { type: 'textbox' },
        filterModel: { on: true, mode: "AND", header: true },
        showTop: false,
        resizable: true,
        virtualX: true,
        colModel: setVcols,
        dataModel: dataVList,

        rowClick: function (evt, ui) {
            if (ui.rowData) {
                var rowIndx = parseInt(ui.rowIndx);
                var record = ui.rowData;

                $("#PoVendorName").val(record.Name);
                $("#PoVendorId").val(record.VendorId);
                ClosePopupWindow("PoVendorgridModal");
            }
        },
        pageModel: { type: "local", rPP: 20 }
    };
    $("#PoVendorgrid").pqGrid(setsetpoVendorList);

    $('#PoVendorName').on('click', function () {
        LoadpoVendorGridGrid();
    });

    function LoadpoVendorGridGrid() {
        $("#PoVendorgridModal").dialog({
            height: 500,
            width: 900,
            modal: true,
            open: function (evt, ui) {
                $.ajax({
                    url: "/VendorMaster/ActiveVendor",
                    cache: false,
                    async: true,
                    method: "GET",
                    dataType: "JSON",
                    success: function (response) {
                        $("#PoVendorgrid").pqGrid("option", "dataModel.data", response.records);
                        $("#PoVendorgrid").pqGrid("refreshDataAndView");
                    }
                });
            },
            close: function (event, ui) {
            },
            show: {
                effect: "blind",
                duration: 500
            }
        });
    }

    $(document).ready(function () {
        var dataIndentM = { location: "local", sorting: 'local' }
        var colIndentM = [
            { title: "", dataIndx: "IndentId", dataType: "integer", hidden: true },
            { title: "", dataIndx: "Storeid", dataType: "integer", hidden: true },
            {
                title: "PR No", dataIndx: "IndentNumber", width: "20%",
                filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
            },
            {
                title: "PR Date", dataIndx: "strIndentDate", width: "16%",
                filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
            },
            {
                title: "Project Code", dataIndx: "StoreName", width: "16%", dataType: "string",
                filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
            },
            {
                title: "Item Type", dataIndx: "ItemCategory", width: "16%",
                filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
            },
            {
                title: "RFQ-Nature", dataIndx: "strIndentNature", width: "14%", dataType: "string", hidden: true,
                filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
            },
            {
                title: "Created-By", dataIndx: "InsertedByName", width: "16%", dataType: "string",
                filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
            },
            {
                title: "Authorized-By", dataIndx: "AuthorizedByName", width: "16%", dataType: "string",
                filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
            },
        ];
        var pIndentM = {
            height: 400,
            width: '100%',
            sortable: false,
            numberCell: { show: false },
            title: "Authorized Indents",
            hoverMode: 'row',
            showTop: false,
            resizable: true,
            wrap: false,
            editable: false,
            filterModel: { on: true, mode: "AND", header: true },
            selectionModel: { type: 'row', mode: 'single' },
            colModel: colIndentM,
            dataModel: dataIndentM,
            pageModel: { type: "local", rPP: 100 },
            rowClick: function (evt, ui) {
                ClearParamGrid("pogrid");
                ClearForm();
                if (ui.rowData) {
                    var rowIndx = parseInt(ui.rowIndx);
                    var record = ui.rowData;
                    $("#RFQNo").val(record.IndentNumber);
                    $("#RFQId").val(record.IndentId);
                    $("#ddlStores").val(record.Storeid);
                    $.ajax({
                        type: "GET",
                        url: "/StoreMaster/GetProjectBudget",
                        data: { storeId: $("#ddlStores").val(), ID: record.ItemCategoryId },
                        datatype: "Json",
                        success: function (data) {
                            var budget = data.records[0].BudgetCost;
                            var utilize = data.records[0].UtilizedBudget;
                            budgetbalanc = budget - utilize;
                            $('#BalanceDue').val(budgetbalanc);
                        }
                    });
                    $.ajax({
                        type: "GET",
                        url: "/RequestForQuote/GetRequestForQuoteById/",
                        data: { IndentId: record.IndentId },
                        datatype: "Json",
                        success: function (data) {
                            var dataMGrid = [];
                            $.each(data.IndentDetails, function (index, value) {
                                var grdData = {
                                    'POIndDtlId': value.IndentDetailId, 'ItemID': value.ItemId, 'SupplierId': $("#SupplierId").val(), 'SupplierName': $("#SupplierName").val(),
                                    'ItemName': value.ItemName, 'TaxRate': value.TaxRate, 'PendingQty': value.PendingQty, 'Qty': value.PendingQty, 'Amount': 0, 'TaxAmount': value.TaxAmount, 'PackSize': value.PackSize,
                                    'PackSizeId': value.PackSizeId, 'Rate': value.ItemRate, 'MRP': value.MRP, 'OrderingUnit': value.UnitName, 'Make': value.Make, 'MaterialOfConstruct': value.MaterialOfConstruct, 'IndentRemark': value.IndentRemark,
                                    'RequiredDate': value.ItemsRequiredDate, 'FreeQty': 0, 'OctroiC': 0, 'OtherC': 0, 'LoadUnloadC': 0, 'TransC': 0, 'DiscountPer': value.DiscountPer,
                                    'Discount': value.Discount, 'NetAmount': 0, 'DescriptiveName': value.DescriptiveName,
                                    'SGST': 0, 'CGST': 0, 'IGST': 0, 'UGST': 0, 'HSNCode': value.HSNCode
                                }
                                dataMGrid.push(grdData);
                            });
                            const details = dataMGrid.map(item => {
                                item.pq_cellattr = { ItemName: { title: item.ItemName } };
                                return item;
                            });
                            $pogrid.pqGrid("option", "dataModel.data", details);
                            try {
                                $pogrid.pqGrid("refreshDataAndView");
                            } catch (e) {
                                $("#pogrid").pqGrid("refreshDataAndView");
                            }
                            $("#SupplierName").val(data.SupplierName);
                            $("#SupplierID").val(data.SupplierID);

                            var dataTerms = [];
                            $.each(data.RFQDeliveryTerms, function (index, value) {
                                var grdData = { 'DelTermID': value.DelTermID, 'DeliveryTermCode': value.DeliveryTermCode, 'DeliveryTermDesc': value.DeliveryTermDesc, 'state': true }
                                dataTerms.push(grdData);
                            });
                            $DeliveryTermgrid.pqGrid("option", "dataModel.data", dataTerms);
                            $DeliveryTermgrid.pqGrid("refreshDataAndView");

                            dataTerms = [];
                            $.each(data.RFQPaymenterms, function (index, value) {
                                var grdData = {
                                    'PayTermID': value.PayTermID, 'PaymentTermCode': value.PaymentTermCode, 'PaymentTermDesc': value.PaymentTermDesc, 'state': true, pq_cellattr: {
                                        PaymentTermDesc: {
                                            title: value.PaymentTermDesc
                                        }
                                    }}
                                dataTerms.push(grdData);
                            });
                            $PaymentTermgrid.pqGrid("option", "dataModel.data", dataTerms);
                            $PaymentTermgrid.pqGrid("refreshDataAndView");
                            CalculateTotalAmount();
                        }
                    });
                }
                closeModal();
            }
        };
        $RFQAuthoorizedGrid = $("#RFQAuthorizedGrid").pqGrid(pIndentM);
    });

    $("#btAuthorisedRFQ").on('click', function () {
        $("#SearchGridModal").modal('show');
        LoadRFQAuthGrid();
    });
    $("#btnSearch").on('click', function () {
        $("#SearchGridModal").modal('show');
        LoadSearchGrid();
    });
    function closeModal() {
        $("#searchgrid").hide();
        $("#RFQAuthorizedGrid").hide();
        $("#SearchGridModal").modal('hide');
        $("#ReportModal").modal('hide');
    }

    $(".closeJQModel").click(() => {
        $(".ui-dialog-titlebar-close").click();
    });

    $("#content-tab").tabs({  //Refreshing grids on tab change
        activate: function (event, ui) {
        let tabIndx = ui.newTab.index();
        tabIndx == "1" ? $DeliveryTermgrid.pqGrid("refreshDataAndView") : tabIndx == "2" ? $PaymentTermgrid.pqGrid("refreshDataAndView") : tabIndx == "3" ? $OtherTermgrid.pqGrid("refreshDataAndView") : tabIndx == "5" ? $Basis.pqGrid("refreshDataAndView") : $Inspection.pqGrid("refreshDataAndView")
        }
    });
</script>
