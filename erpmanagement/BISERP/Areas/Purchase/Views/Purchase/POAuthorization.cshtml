@model BISERP.Area.Purchase.Models.PurchaseOrderModel
@{
    Layout = null;
}
<style>
    td, th {
        padding: 5px;
    }
</style>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <h5 class="page-header orangeDottedBottomBorder"> PURCHASE ORDER AUTHENTICATION/CANCEL</h5>
    @* new addition 2024 *@
    <div id="SearchGridModal" class="modal fade" role="dialog" data-backdrop="false">
        <div class="modal-dialog find-search-grid-modal">
            <div class="modal-content gridmodal-content">
                <div class="modal-header gridmodal-header">
                    <button type="button" class="close" onclick="closeModal()">&times;</button>
                    <h4 class="modal-title">Search Details</h4>
                </div>
                <div class="modal-body">
                    <div class="fill">
                        <div id="searchgrid"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="ReportModal" class="modal fade" role="dialog" data-backdrop="false">
        <div class="modal-dialog find-search-grid-modal">
            <div class="modal-content gridmodal-content">
                <div class="modal-header gridmodal-header">
                    <button type="button" class="close" onclick="closeModal()">&times;</button>
                    <h4 class="modal-title">Report</h4>
                </div>
                <div class="modal-body">
                    <div class="fill">
                        <iframe id="iframeReportViewer" style="width:100%;height:400px"></iframe>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="panel-group">
        <div class="panel panel-default">
            <div class="panel-groupingBoder">
                <div class="panel-heading">
                    <div class="panel-title">
                        <a class="collapsediv" data-toggle="collapse" href="#collapse2" style="color: white">
                            ENTRY FORM
                        </a>
                    </div>
                </div>
                <div id="collapse2" class="panel-collapse collapse in" aria-expanded="true">
                    <div class="panel-body">

                        <div class="submit-row">
                            <div class="col-sm-6" style="text-align:start">
                                <button type="button" class="btn btn-success" id="btnSave">Save</button>
                                <button type="button" class="btn btn-primary" id="btnReset">Reset</button>
                                <button type="button" class="btn btn-danger" id="btnUnAuthorized">Un-Authorized</button>
                            </div>
                            <div class="col-sm-6" style="text-align:end">
                                <button type="button" class="btn btn-info" id="btnSearch">Authorized</button>
                                <a data-toggle="collapse" class="btn btn-warning" id="btnExport" href="#ReportPreview">Report</a>
                            </div>
                        </div>
                        <fieldset class="fieldsetCustom">
                            <legend class="legendCustom"> Purchase Order Auth/Canc</legend>
                            <div class="row">
                                <div class="col-lg-2">
                                    @Html.Label("Balance:")
                                    @Html.TextBox("BalanceDue", null, new { @class = "form-control" })
                                </div>
                                <div class="col-sm-0" style="display: none">
                                    @Html.TextBox("BudgetCost", null, new { @class = "form-control" })
                                </div>
                                <div class="col-sm-0" style="display: none">
                                    @Html.TextBox("UtilizedBudget", null, new { @class = "form-control" })
                                </div>
                                @*<div class="col-sm-2" style="text-align:center">
                                        <br />
                                        <input type="radio" name="AuthCancel" value="Authorized" checked> Authorized
                                        <input type="radio" name="AuthCancel" value="Cancel"> Cancel<br>
                                    </div>*@
                                <div class="col-sm-4 col-lg-2">
                                    <br />
                                    <input type="radio" id="Authorized" name="AuthCancel" value="2" checked="checked">
                                    <label for="Authorized">Authorized</label>&nbsp;&nbsp;
                                    <input type="radio" id="Cancel" name="AuthCancel" value="3">
                                    <label for="Cancel">Cancel</label>&nbsp;&nbsp;
                                    <input type="radio" id="Recheck" name="AuthCancel" value="0">
                                    <label for="Recheck">Recheck</label>
                                </div>

                                <div class="col-lg-2 col-md-4 col-sm-8">
                                    @Html.Label("Upload")
                                    <input type='file' id="files" multiple accept=".jpg,.jpeg,.png,.pdf" class="form-control btn-primary uploadup" />
                                </div>
                                <div class="col-lg-2 col-md-4 col-sm-8"><ul class="list" id="appendImg"> </ul></div>
                                <div class="col-lg-2 col-md-4 col-sm-8"><ul class="list" id="preApproveImg"> </ul></div>

                            </div>

                        </fieldset>
                        <div class="submit-row">
                            <button type="button" class="btn btn-primary" id="btnShowExistingDoc">View Files</button>
                            <button type="button" class="btn btn-primary" id="btnShowAttachments">View Upload</button>
                        </div>
                    </div>
                </div>
                <fieldset>
                    <div class="row">
                        <div class="container fill">
                            <div id="pogrid"></div>
                        </div>
                    </div>
                </fieldset>


                <div id="grid" class="panel-collapse collapse in" aria-expanded="true">
                    <div class="panel-body">
                        <div id="detailgrid"></div>
                    </div>
                </div>

            </div>
        </div>
    </div>

    <div class="panel-group">
        <div class="panel panel-default">
            <div class="panel-groupingBoder">
                <div class="panel-heading">
                    <div class="panel-title">
                        <a class="collapsediv" data-toggle="collapse" href="#content" style="color:white">
                            Terms
                        </a>
                    </div>
                </div>
                <div id="content">
                    <div id="content-tab">
                        <ul id="tabs" class="nav nav-tabs" data-tabs="tabs" style="padding: 1px;">
                            <li class="active tab"><a href="#tab1" data-toggle="tab" style="margin: 0;">Total</a></li>
                            <li><a href="#tab2" data-toggle="tab" style="margin: 0;">Delivery Terms</a></li>
                            <li><a href="#tab3" data-toggle="tab" style="margin: 0;">Payment Terms</a></li>
                            <li><a href="#tab4" data-toggle="tab" style="margin: 0;">Freight</a></li>
                            <li><a href="#tab5" data-toggle="tab" style="margin: 0;">Special Notes</a></li>
                            <li><a href="#tab6" data-toggle="tab" style="margin: 0;">P&F</a></li>
                            <li><a href="#tab7" data-toggle="tab" style="margin: 0;">Inspection</a></li>
                        </ul>
                        <fieldset class="fieldsetCustom">
                            <div id="my-tab-content" class="tab-content" style="border:none">
                                <div class="tab-pane active" id="tab1">
                                    <table align="right">
                                        <tr>
                                            <td>@Html.LabelFor(model => model.Amount)</td>
                                            <td>
                                                @Html.TextBoxFor(model => model.Amount, new Dictionary<string, object> { { "readonly", "true" }, { "class", "form-control" } })
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>@Html.LabelFor(model => model.Tax)</td>
                                            <td>
                                                @Html.TextBoxFor(model => model.Tax, new Dictionary<string, object> { { "readonly", "true" }, { "class", "form-control" } })
                                            </td>
                                        </tr>

                                        <tr>
                                            <td>@Html.LabelFor(model => model.Discount)</td>
                                            <td>
                                                @Html.TextBoxFor(model => model.Discount, new Dictionary<string, object> { { "readonly", "true" }, { "class", "form-control" } })
                                            </td>
                                        </tr>

                                        <tr>
                                            <td>@Html.LabelFor(model => model.GrandTotal)</td>
                                            <td>
                                                @Html.TextBoxFor(model => model.GrandTotal, new Dictionary<string, object> { { "readonly", "true" }, { "class", "form-control" } })
                                            </td>
                                        </tr>
                                    </table>
                                </div>
                                <div class="tab-pane" id="tab2">
                                    <br>
                                    <div class="form-group" align="left">
                                        <button type="button" class="btn btn-primary" id="btnViewDelTerms">Add Term</button>
                                        <button type="button" class="btn btn-danger" id="btnRemoveDelTerms">Remove Term</button>
                                    </div>
                                    <div id="DeliveryTermgrid"></div>
                                </div>
                                <div class="tab-pane" id="tab3">
                                    <br>
                                    <div class="form-group" align="left">
                                        <button type="button" class="btn btn-primary" id="btnViewPayTerms">Add Term</button>
                                        <button type="button" class="btn btn-danger" id="btnRemovePayTerms">Remove Term</button>
                                    </div>
                                    <div id="PaymentTermgrid"></div>
                                </div>
                                <div class="tab-pane" id="tab4">
                                    <br>
                                    <div class="form-group" align="left">
                                        <button type="button" class="btn btn-primary" id="btnViewOtherTerms">Add Term</button>
                                        <button type="button" class="btn btn-danger" id="btnRemoveOtherTerms">Remove Term</button>
                                    </div>
                                    <div id="OtherTermgrid"></div>
                                </div>
                                <div class="tab-pane" id="tab5">
                                    <br>
                                    <div class="col-sm-12">
                                        <div class="form-group">
                                            <div class="col-sm-1">
                                                <label for="Details">Special Notes</label>
                                            </div>
                                            <div class="col-sm-4">
                                                @Html.TextAreaFor(model => model.Details, new { @class = "form-control", style = "width: 1170px; height: 164px;" })
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="tab-pane" id="tab6">
                                    <br>
                                    <div class="form-group" align="left">
                                        <button type="button" class="btn btn-primary" id="btnBasisTerms">Add Term</button>
                                        <button type="button" class="btn btn-danger" id="btnRemoveBasisTerms">Remove Term</button>
                                    </div>
                                    <div id="Basistermgrid"></div>
                                </div>
                                <div class="tab-pane" id="tab7">
                                    <br>
                                    <div class="form-group" align="left">
                                        <button type="button" class="btn btn-primary" id="btninspectionTerms">Add Term</button>
                                        <button type="button" class="btn btn-danger" id="btnRemoveinspectionTerms">Remove Term</button>
                                    </div>
                                    <div id="Inspection"></div>
                                </div>
                            </div>
                        </fieldset>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="DeliveryItemModal" title="Select Delivery Terms" style="display: none;">
        <div id="SearchDeliveryTermgrid"></div>
        <button type="button" class="btn btn-primary" data-dismiss="modal" id="btnAddDeliveryTerm">Add</button>
        <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
    </div>
    <div id="PaymentItemModal" title="Select Payment Terms" style="display: none;">
        <div id="SearchPaymentTermgrid"></div>
        <button type="button" class="btn btn-primary" data-dismiss="modal" id="btnAddPaymentTerm">Add</button>
        <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
    </div>

    <div id="OtherItemModal" title="Select Freight" style="display: none;">
        <div id="SearchOtherTermgrid"></div>
        <button type="button" class="btn btn-primary" data-dismiss="modal" id="btnAddOtherTerm">Add</button>
    </div>
    <div id="BasisItemModal" title="Select P&F" style="display: none;">
        <div id="SearchBasisTermgrid"></div>
        <button type="button" class="btn btn-primary" data-dismiss="modal" id="btnAddBasisTerm">Add</button>
    </div>
    <div id="InspectionItemModal" title="Select Inspection Term" style="display: none;">
        <div id="SearchInspectionTermgrid"></div>
        <button type="button" class="btn btn-primary" data-dismiss="modal" id="btnAddInspectionTerm">Add</button>
    </div>


    <div id="PODetails" class="modal fade" role="dialog">
        <div class="modal-dialog" style="width: 55%">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Purchase Order Details</h4>
                </div>
                <div class="modal-body">
                    <table id="podetailsgrid"></table>
                </div>
                <div class="modal-body">
                    <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                </div>
            </div>

        </div>
    </div>
    @*The Modal*@
    <div id="ViewModal" class="modal slideModal">
        @*Modal content*@
        <div class="modal-content slideContent">
            <span class="close slideClose" onclick="closeImageModal()"> &#x2715 </span>
            <div id="slideshow-container">
                <!--Slidshow-->
            </div>
            <div>
                <a class="prev slide-prev" onclick="plusSlides(-1)">❮</a>
                <a class="next slide-next" onclick="plusSlides(1)">❯</a>
            </div>
        </div>
    </div>
}
<script type="text/javascript">
var appSetting = '@BISERP.Common.Constants.ScandocUrl';
var grid;
var $searchgrid;
var POId = 0;
var RFQId = 0;
var rptStatus;
var $SearchDeliveryTermgrid; var $DeliveryTermgrid;
var $SearchPaymentTermgrid; var $PaymentTermgrid;
var $SearchOtherTermgrid; var $OtherTermgrid;
var $Inspection; var $SearchInspectionTermgrid;
var $Basis; var $SearchBasisTermgrid;
$("#BED").prop('disabled', true);
$("#SHECess").prop('disabled', true);
$("#Edu").prop('disabled', true);
$("#BalanceDue").prop('disabled', true);
$.ajax({
    type: "GET",
    url: "/Master/MainStores",
    datatype: "Json",
    success: function (data) {
        $.each(data, function (index, value) {
            $('#ddlStores').append('<option value="' + value.ID + '">' + value.Name + '</option>');
        });
    }
});
function ShowRecords() {
    ClearParamGrid("pogrid");
    var StoreId = $("#ddlStores").val();
    var Against = $("#selAgainst").val();
    $.ajax({
        type: "GET",
        url: "/PurchaseOrder/GetPOForAuthorization",
        datatype: "Json",
        data: { StoreId: StoreId, AgainstId: Against },
        beforeSend: function () {
            $("#pogrid").pqGrid("showLoading");
        },
        complete: function () {
            $("#pogrid").pqGrid("hideLoading");
        },
        success: function (result) {
            if (result.success) {
                $("#pogrid").pqGrid("hideLoading");
                $("#pogrid").pqGrid("option", "dataModel", { data: result.records });
                $("#pogrid").pqGrid("refreshView");
                $("#pogrid").pqGrid("refresh");
            } else {
                ClearParamGrid('pogrid');
                ShowAlert("error", result.Messsage);
                return;
            }
        },
        error: function (request, status, error) {
            $("#pogrid").pqGrid("hideLoading");
            ShowAlert("error", "Server error! Please Contact Administrator");
            return;
        }
    });
}

$("#btnShowRequest").on('click', function () {
    ShowRecords();
});

validateFiles('files', 'preApproveImg');
$("#btnSave").on('click', function () {
    var podetails = $detailgrid.pqGrid("option", "dataModel.data");

    var getDelData = $DeliveryTermgrid.pqGrid("option", "dataModel.data");
    var delgridData = jLinq.from(getDelData).equals("state", true).select();

    var getPayData = $PaymentTermgrid.pqGrid("option", "dataModel.data");
    var paygridData = jLinq.from(getPayData).equals("state", true).select();

    var getOtherData = $OtherTermgrid.pqGrid("option", "dataModel.data");
    var othgridData = jLinq.from(getOtherData).equals("state", true).select();

    var getbasisdata = $Basis.pqGrid("option", "dataModel.data");
    var poBasis = jLinq.from(getbasisdata).equals("state", true).select();

    var getinspectiondata = $Inspection.pqGrid("option", "dataModel.data");
    var poInspectio = jLinq.from(getinspectiondata).equals("state", true).select();

    var purchaseOrder = JSON.stringify({ //Passing data
        ID: POId,
        RFQId: RFQId,
        AuthorizationStatusId: $("[name='AuthCancel']:checked").val(),
        Amount: $("#Amount").val(),
        GrandTotal: $("#GrandTotal").val(),
        Details: $("#Details").val(),
        PODetails: podetails,
        PODeliveryTerms: delgridData,
        POPaymenterms: paygridData,
        POOtherTerms: othgridData,
        POBasis: poBasis,
        POInspectio: poInspectio,
    });
    $.ajax({
        type: "POST", //HTTP POST Method
        traditional: true,
        contentType: 'application/json; charset=utf-8',
        url: '/PurchaseOrder/AuthCancelPurchaseOrder', // Controller/View
        data: purchaseOrder,
        success: function (msg) {
            if (msg.success) {
                if ($("[name='AuthCancel']:checked").val() == "2") {
                    ShowAlert("success", "PO authorized successfully.");
                }
                else if ($("[name='AuthCancel']:checked").val() == "0") {
                    ShowAlert("success", "The PO has been successfully sent for recheck.");
                }
                else {
                    ShowAlert("success", "PO cancelled successfully.");
                }
                SaveScandoc("files", POId, "Purchase", "POAuthorization");
                ClearForm();
            }
            else {
                ShowAlert("error", msg.ResponseText);
            }
        },
        error: function (jqXHR, exception) {
            ShowAlert("Falied to authorize/cancel", "error", "Error while updation! Please contact administrator!");
        }
    });
});

//var $gridMain;
//$(document).ready(function () {
//    var dataModel = {
//        location: "remote",
//        sorting: "local",
//        recIndx: "ID",
//        rPPOptions: [1, 10, 20, 30, 40, 50, 100, 500, 1000]
//    }
//    $gridMain = $("div#pogrid").pqGrid({
//        height: 400,
//        sortable: false,
//        numberCell: { show: false },
//        selectionModel: { type: 'row' },
//        hoverMode: 'cell',
//        showTop: false,
//        resizable: true,
//        virtualX: true,
//        virtualY: true,
//        scrollModel: { autoFit: true },
//        draggable: false,
//        wrap: false,
//        colModel: [
//                    {
//                        dataIndx: "state", Width: 25, align: "center", type: 'checkBoxSelection', cls: 'ui-state-default', sortable: false,
//                        editor: false, dataType: 'bool',
//                        title: "<input type='checkbox' />",
//                        cb: { select: true, all: false, header: true }
//                    },
//                    { title: "", dataIndx: "ID", width: 10, dataType: "integer", editable: false, resizable: false, hidden: true },
//                    { title: "Details", width: 60, type: "detail", dataIndx: "detail", resizable: false, sortable: false },
//                    { title: "PO NO", dataIndx: "PONo", width: 220, dataType: "string", resizable: false, editable: false },
//                    { title: "PO Date", dataIndx: "strPODate", width: 170, dataType: "date", resizable: false, editable: false },
//                    { title: "Tax Amount", dataIndx: "Tax", width: 100, resizable: false, dataType: "float", editable: false },
//                    { title: "Supplier", dataIndx: "SupplierName", width: 150, dataType: "string", resizable: false, align: "left", editable: false },
//                    { title: "Discount", dataIndx: "Discount", width: 90, dataType: "float", resizable: false, editable: false },
//                    { title: "Amount", dataIndx: "Amount", width: 100, dataType: "float", resizable: false, editable: false },
//                    { title: "AuthNotes", dataIndx: "AuthNotes", width: 100, dataType: "string", resizable: false },
//                    { title: "FORAMT", dataIndx: "F.O.R. Amount", width: 100, dataType: "float", resizable: false, align: "left", hidden: true }
//                    ],
//dataModel: dataModel,
//trackModel: { on: true }, //to turn on the track changes.
//pageModel: { type: "local", rPP: 20 },
//detailModel: {
//    cache: true,
//    collapseIcon: "ui-icon-plus",
//    expandIcon: "ui-icon-minus",
//    init: function (ui) {
//        var rowData = ui.rowData,
//            detailobj = gridDetailModel($(this), rowData), //get a copy of gridDetailModel
//            $grid = $("<div id=podetailsgrid></div>").pqGrid(detailobj); //init the detail grid.
//        return $grid;
//    }
//}
//});

//var gridDetailModel = function ($gridMain, rowData) {
//    return {
//        width: '90%',
//        //scrollModel: { autoFit: true },
//        height: 130,
//        pageModel: { type: "local", rPP: 5, strRpp: "" },
//        dataModel: {
//            location: "remote",
//            sorting: "local",
//            dataType: "json",
//            method: "GET",
//            url: "/PurchaseOrder/POdetails/get?POId=" + rowData.ID,
//            getData: function (dataJSON) {
//                var data = dataJSON;
//                return { curPage: dataJSON.curPage, totalRecords: dataJSON.totalRecords, data: data };
//            }
//        },
//        colModel: [
//            { title: "Item Name", width: 200, dataIndx: "ItemName", dataType: "string" },
//            { title: "HSN/SAC Code", dataIndx: "HSNCode", minWidth: 130, editable: false },
//            { title: "Pack Size", width: 100, dataType: "string", dataIndx: "PackSize" },
//            { title: "Qty", width: 80, dataType: "integer", dataIndx: "Qty", editable: true },
//            { title: "FreeQty", width: 80, dataType: "integer", dataIndx: "FreeQty",editable: true},
//            { title: "Rate", width: 100, dataIndx: "Rate", editable: true },
//            { title: "MRP", dataIndx: "MRP", width: 90, dataType: "string", editable: true },
//            { title: "Tax Amount", dataIndx: "TaxAmount", width: 100, dataType: "string", editable: false },
//            { title: "Item Total", dataIndx: "Amount", width: 100, dataType: "float", align: "left", editable: false },
//            { title: "Discount", dataIndx: "Discount", width: 90, dataType: "float", align: "left", editable: true },
//           { title: "NetAmt", dataIndx: "NetAmount", width: 100, dataType: "float", align: "left", editable: false }
//        ],
//        editable: false,
//        //groupModel: {
//        //    dataIndx: ["ItemName"],
//        //    dir: ["up"],
//        //    title: ["{0} - Total : {1}"],
//        //    icon: [["ui-icon-triangle-1-se", "ui-icon-triangle-1-e"]]
//        //},
//        flexHeight: true,
//        flexWidth: true,
//        numberCell: { show: false },
//        title: "Item Details",
//        showTop: false,
//        showBottom: false
//    };
//};
//});
    /**************************detail grid**************************/
    var autoCompleteEditor = function (ui) {
        var $cell = ui.$cell,
            rowData = ui.rowData,
            dataIndx = ui.dataIndx,
            width = ui.column.width,
            cls = ui.cls;
        var dc = $.trim(rowData[dataIndx]);

        var $inp = $("<input type='text' name='" + dataIndx + "' class='" + cls + " pq-ac-editor' />")
            .width(width - 6)
            .appendTo($cell)
            .val(dc);

        $inp.autocomplete({
            source: (dataIndx == "SupplierName" ? suppliers : packsizes),
            minLength: 0
        }).focus(function () {
            $(this).autocomplete("search", "");
        });
    }

var dataDetail = { location: 'local', sorting: 'local', paging: 'local', dataType: 'JSON' };
    var colDetail = [
        { title: "", dataIndx: "ID", width: 10, dataType: "integer", hidden: true, editable: false },
        { title: "", dataIndx: "POIndDtlId", width: 10, dataType: "integer", hidden: true, editable: false },
        { title: "", dataIndx: "ItemID", width: 10, dataType: "integer", hidden: true, editable: false },
        { title: "Item Name & Description", dataIndx: "ItemName", width: 400, dataType: "string", editable: false },
        { title: "Description", dataIndx: "DescriptiveName", width: 200, dataType: "string", editable: false, editor: { type: "textarea", attr: "rows=5" }, hidden: true },
        { title: "HSNCode", dataIndx: "HSNCode", width: 150, resizable: false, dataType: "string", editable: false, hidden: true },
        { title: "Tax Rate", dataIndx: "TaxRate", width: 100, dataType: "string", editable: false, hidden: true },
        { title: "Unit", dataIndx: "OrderingUnit", width: 100, dataType: "string", editable: false },
        { title: "Make", dataIndx: "Make", width: 100, dataType: "string", editable: false },
        { title: "MOC", dataIndx: "MaterialOfConstruct", width: 100, dataType: "string", editable: false },
        { title: "PR Remark", dataIndx: "IndentRemark", width: 200, dataType: "string", editable: false },
        { title: "Size/Wt.", dataIndx: "SizeOrWeight", width: 100, dataType: "string", editable: false },
        { title: "PO Remark", dataIndx: "POIndentRemark", width: 200, dataType: "string", editable: false },
        { title: "PR PendingQty", dataIndx: "PendingQty", width: 70, dataType: "float", align: "left", editable: false, hidden: true },
        { title: "Qty", dataIndx: "Qty", width: 70, dataType: "float", align: "left", editable: true, align: "right" },
        { title: "Free Qty", dataIndx: "FreeQty", width: 90, dataType: "float", align: "left", hidden: true, editable: false },
        { title: "Pack Size", dataIndx: "PackSize", width: 120, dataType: "string", editable: false, hidden: true, editor: { type: autoCompleteEditor }, validations: [{ type: 'minLen', value: 1, msg: "Required" }, { type: function (ui) { var value = ui.value; if ($.inArray(ui.value, packsizes) == -1) { ui.msg = value + " not found in list"; return false; } } }] },
        { title: "Unit Rate", dataIndx: "Rate", width: 70, dataType: "float", editable: false },
        { title: "MRP", dataIndx: "MRP", width: 90, dataType: "float", hidden: true, editable: false },
        { title: "Amount", dataIndx: "Amount", width: 90, dataType: "float", editable: false },
        { title: "Discount %", dataIndx: "DiscountPer", width: 100, dataType: "float", resizable: false, align: "left", format: '##,###.00', editable: false, hidden: true },
        { title: "Discount", dataIndx: "Discount", width: 100, dataType: "float", resizable: false, align: "right", format: '##,###.00', editable: false },
        { title: "", dataIndx: "TaxableValue", width: 100, dataType: "float", resizable: false, align: "left", hidden: true, editable: false },
        { title: "TaxIds", dataIndx: "TaxIds", width: 90, dataType: "string", editable: false, hidden: true },
        { title: "", editable: false, minWidth: 30, sortable: false, listeners: [{ click: editRow }], hidden: true, render: function (ui) { return "<button type='button' class='edit_btn'></button>"; }, postRender: function (ui) { var rowIndx = ui.rowIndx, grid = this, $cell = grid.getCell(ui); $cell.find(".edit_btn").button({ icons: { primary: 'ui-icon-pencil' } }).bind("click", function (evt) { editRow(rowIndx, grid, true); }); } },
        { title: "Tax", dataIndx: "Tax", width: 90, dataType: "float", editable: false, hidden: true },
        { title: "Tax Amount", dataIndx: "TaxAmount", width: 100, dataType: "float", resizable: false, format: '##,###.00', editable: false },
        { title: "SGST", dataIndx: "SGST", width: 90, dataType: "double", align: "left", hidden: true, editable: false },
        { title: "CGST", dataIndx: "CGST", width: 90, dataType: "double", align: "left", hidden: true, editable: false },
        { title: "IGST", dataIndx: "IGST", width: 90, dataType: "double", align: "left", hidden: true, editable: false },
        { title: "UGST", dataIndx: "UGST", width: 90, dataType: "double", align: "left", hidden: true, editable: false },
        { title: "SGSTAmt", dataIndx: "SGSTAmt", width: 90, dataType: "double", align: "left", format: '##,###.00', hidden: true, editable: false },
        { title: "CGSTAmt", dataIndx: "CGSTAmt", width: 90, dataType: "double", align: "left", format: '##,###.00', hidden: true, editable: false },
        { title: "IGSTAmt", dataIndx: "IGSTAmt", width: 90, dataType: "double", align: "left", format: '##,###.00', hidden: true, editable: false },
        { title: "UGSTAmt", dataIndx: "UGSTAmt", width: 90, dataType: "double", align: "left", format: '##,###.00', hidden: true, editable: false },
        { title: "Trans. Charges", dataIndx: "TransC", width: 100, dataType: "float", resizable: false, hidden: true, align: "left", editable: false },
        { title: "Freight Amount", dataIndx: "OctroiC", width: 100, dataType: "float", resizable: false, hidden: true, align: "left", editable: false },
        { title: "Other Charges", dataIndx: "OtherC", width: 100, dataType: "float", resizable: false, hidden: true, align: "left", editable: false },
        { title: "Handling Chanrges", dataIndx: "LoadUnloadC", width: 100, dataType: "float", resizable: false, hidden: true, align: "left", editable: false },
        { title: "NetAmount", dataIndx: "NetAmount", width: 120, dataType: "float", resizable: false, align: "right", editable: false, format: '##,###.00' },
        { title: "Saved Qty", dataIndx: "SavedQty", width: 70, dataType: "float", align: "left", hidden: true }
    ];

var setdetail = {
    width: '100%',
    height: 250,
    sortable: false,
    numberCell: { show: false },
    hoverMode: 'cell',
    showTop: false,
    resizable: true,
    scrollModel: { flexContent: true },
    //scrollModel: { autoFit: true },
    draggable: false,
    wrap: false,
    cellBeforeSave: function (event, ui) {
        var dataIndx = ui.dataIndx,
            newVal = parseFloat(ui.newVal),
            rowData = ui.rowData;
        if (dataIndx === 'Qty') {
            var savedQty = parseFloat(rowData.SavedQty);
            if (newVal > savedQty) {
                ShowAlert('info', "Qty cannot exceed the PO Qty ( " + savedQty + " ).");
                return false;
            }
            if (newVal <= 0) {
                ShowAlert('info', "Qty must be greater than zero.");
                return false;
            }
        }
        return true;
    },
    cellSave: function (evt, ui) {
        this.refreshRow(ui);
        CalculateTotalAmount();
    },
    editable: true,
    columnBorders: true,
    selectionModel: { type: 'row', mode: 'single' },
    colModel: colDetail,
    dataModel: dataDetail,
    formulas: [
        ["MRP", function (rd) {
            if (isNaN(rd.MRP)) return parseFloat(rd.Rate).toFixed(2);
            return parseFloat(rd.MRP).toFixed(2);
        }],
        ["Amount", function (rd) {
            return (parseFloat(rd.Qty) * parseFloat(rd.Rate)).toFixed(2);
        }],
        ["Discount", function (rd) {
            var amount = parseFloat(rd.Amount) || 0;
            var discper = parseFloat(rd.DiscountPer) || 0;
            var discamt = parseFloat(rd.Discount) || 0;
            if (discper > 0) {
                discamt = (amount * discper) / 100;
            }
            return discamt.toFixed(2);
        }],
        ["TaxableValue", function (rd) {
            var amount = parseFloat(rd.Qty) * parseFloat(rd.Rate);
            var disc = parseFloat(rd.Discount) || 0;
            return (amount - disc).toFixed(2);
        }],
        ["TaxAmount", function (rd) {
            var amount = parseFloat(rd.TaxableValue) || 0;
            var taxper = parseFloat(rd.Tax) || 0;
            return (amount * taxper / 100).toFixed(2);
        }],
        ["SGSTAmt", function (rd) {
            var amount = parseFloat(rd.TaxableValue) || 0;
            var sgstPer = parseFloat(rd.SGST) || 0;
            return (amount * (sgstPer / 100)).toFixed(2);
        }],
        ["CGSTAmt", function (rd) {
            var amount = parseFloat(rd.TaxableValue) || 0;
            var cgstPer = parseFloat(rd.CGST) || 0;
            return (amount * (cgstPer / 100)).toFixed(2);
        }],
        ["IGSTAmt", function (rd) {
            var amount = parseFloat(rd.TaxableValue) || 0;
            var igstPer = parseFloat(rd.IGST) || 0;
            return (amount * (igstPer / 100)).toFixed(2);
        }],
        ["UGSTAmt", function (rd) {
            var amount = parseFloat(rd.TaxableValue) || 0;
            var ugstPer = parseFloat(rd.UGST) || 0;
            return (amount * (ugstPer / 100)).toFixed(2);
        }],
        ["NetAmount", function (rd) {
            var amount = parseFloat(rd.TaxableValue) || 0;
            var taxamount = parseFloat(rd.TaxAmount) || 0;
            var discamt = parseFloat(rd.Discount) || 0;
            var transc = parseFloat(rd.TransC) || 0;
            var octroic = parseFloat(rd.OctroiC) || 0;
            var otherc = parseFloat(rd.OtherC) || 0;
            var handlec = parseFloat(rd.LoadUnloadC) || 0;

            var tempnet = amount + taxamount + transc + octroic + otherc + handlec;
            return tempnet.toFixed(2);
        }]
    ],
    editModel: {
        saveKey: "",
        keyUpDown: false
    },
    pageModel: { type: "local", rPP: 20 },
    scrollModel: { autoFit: true },
    filterModel: { on: false, mode: "AND", header: false },
}
$detailgrid = $("#detailgrid").pqGrid(setdetail);


/**********************search grid***********************/

    //********* PO Grid Functions *********/
    function editRow(rowIndx) {
        if (rowIndx != null) {
            var row = $detailgrid.pqGrid('getRowData', { rowIndx: rowIndx });
            LoadTaxgrid();

            $("#popup-dialog-crud").dialog({
                title: "Edit Record (" + (rowIndx + 1) + ")",
                buttons: {
                    Update: function () {
                        var getData = $("#Taxgrid").pqGrid("option", "dataModel.data");
                        var selectedItems = jLinq.from(getData).equals("state", true).select();

                        var totalTax = 0;
                        var TaxIds = [];
                        var sgst = 0, cgst = 0, igst = 0, ugst = 0;

                        $.each(selectedItems, function (key, value) {
                            totalTax += parseFloat(value.Tax_percentage);
                            TaxIds.push(value.Taxid);

                            switch (value.Tax_name) {
                                case 'SGST':
                                    sgst += parseFloat(value.Tax_percentage);
                                    break;
                                case 'CGST':
                                    cgst += parseFloat(value.Tax_percentage);
                                    break;
                                case 'IGST':
                                    igst += parseFloat(value.Tax_percentage);
                                    break;
                                case 'UGST':
                                    ugst += parseFloat(value.Tax_percentage);
                                    break;
                            }
                        });

                        $("#pogrid").pqGrid('updateRow', {
                            rowIndx: rowIndx,
                            newRow: {
                                'Tax': totalTax,
                                'TaxIds': TaxIds,
                                'SGST': sgst,
                                'CGST': cgst,
                                'IGST': igst,
                                'UGST': ugst
                            }
                        });

                        $("#pogrid").pqGrid("refreshRow", { rowIndx: rowIndx });
                        CalculateTotalAmount();
                        $(this).dialog("close");
                    },
                    Close: function () {
                        $(this).dialog("close");
                    }
                }
            }).dialog("open");
        }
    }

    $(document).ready(function () {
        $("#BED").keyup(function () {
            CalculateTotalAmount();
            showperAmount();

        });
        $("#Edu").keyup(function () {
            CalculateTotalAmount();
            showperAmount();
        });
        $("#SHECess").keyup(function () {
            CalculateTotalAmount();
            showperAmount();
        });
    });

    function showperAmount() {
        var amt = $("#Amount").val();
        if (amt == undefined || amt === "") amt = 0;
        var bed = $("#BED").val();
        if (bed == undefined || bed === "") bed = 0;
        var bedamt = (bed * amt) / 100;
        $("#BedAmt").val(Math.round(bedamt));

        var shecess = $("#SHECess").val();
        if (shecess == undefined || shecess === "") shecess = 0;
        var shecessamt = (shecess * amt) / 100;
        $("#Shecessamt").val(Math.round(shecessamt));

        var educess = $("#Edu").val();
        if (educess == undefined || educess === "") educess = 0;
        var eduamt = (educess * amt) / 100;
        $("#educessamt").val(Math.round(eduamt));

    }
    function CalculateTotalAmount() {
        var getData = $detailgrid.pqGrid("option", "dataModel.data");

        var totalAmount = 0, totalTaxAmount = 0, totalOtherCharges = 0, totalDiscount = 0, totalNetAmt = 0;
        var bedAmt = parseFloat($("#BED").val()) || 0;
        var eduAmt = parseFloat($("#Edu").val()) || 0;
        var sheAmt = parseFloat($("#SHECess").val()) || 0;

        $.each(getData, function (_, item) {
            var TransC = parseFloat(item.TransC) || 0;
            var OtherC = parseFloat(item.OtherC) || 0;
            var LoadUnloadC = parseFloat(item.LoadUnloadC) || 0;
            var OctroiC = parseFloat(item.OctroiC) || 0;
            var Amount = parseFloat(item.Amount) || 0;
            var TaxAmount = parseFloat(item.TaxAmount) || 0;
            var Discount = parseFloat(item.Discount) || 0;
            var NetAmt = parseFloat(item.NetAmount) || 0;

            var otherCharges = TransC + OtherC + LoadUnloadC + OctroiC;

            totalAmount += Amount;
            totalTaxAmount += TaxAmount;
            totalOtherCharges += otherCharges;
            totalDiscount += Discount;
            totalNetAmt += NetAmt;
        });

        var bedAmount = totalAmount * (bedAmt / 100);
        var eduAmount = totalAmount * (eduAmt / 100);
        var sheAmount = totalAmount * (sheAmt / 100);
        var extraAmt = parseFloat(bedAmount) + parseFloat(eduAmount) + parseFloat(sheAmount);
        totalNetAmt += parseFloat(extraAmt);

        $("#Amount").val(totalAmount.toFixed(2));
        $("#Tax").val(totalTaxAmount.toFixed(2));
        $("#OtherCharges").val(totalOtherCharges.toFixed(2));
        $("#Discount").val(totalDiscount.toFixed(2));
        $("#GrandTotal").val(totalNetAmt.toFixed(2));

    }

var budgetbalanc = 0;


var dataM = { location: "local", sorting: 'local' };
var colM = [
    { title: "", dataIndx: "ID", dataType: "integer", hidden: true },
    { title: "", dataIndx: "SupplierID", dataType: "integer", hidden: true },
    { title: "", dataIndx: "StoreId", dataType: "integer", hidden: true },
    { title: "", dataIndx: "ItemTypeId", dataType: "integer", hidden: true },
    { title: "", dataIndx: "Againstid", dataType: "integer", hidden: true },
    { title: "", dataIndx: "PurchaseIndentId", dataType: "integer", hidden: true },
    { title: "", dataIndx: "DeliveryAddress", dataType: "integer", hidden: true },
    { title: "", dataIndx: "RefNo", dataType: "integer", hidden: true },
    {
        title: "PO No", dataIndx: "PONo", width: "12%",
        filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
    },
    {
        title: "PO Date", dataIndx: "strPODate", width: "11%", dataType: "date",
        filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
    },
    {
        title: "Supplier", dataIndx: "SupplierName", width: "11%",
        filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
    },
    {
        title: "Project Code", dataIndx: "StoreName", width: "11%",
        filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
    },
    {
        title: "Item Type", dataIndx: "ItemCategory", width: "11%",
        filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
    },
    {
        title: "PR No", dataIndx: "RFQNo", width: "11%",
        filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
    },
    {
        title: "Created-By", dataIndx: "InsertedByName", width: "11%",
        filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
    },
    {
        title: "Verified-By", dataIndx: "VerifiedByName", width: "11%",
        filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
    },
    {
        title: "Authorized-By", dataIndx: "AuthorizedByName", width: "11%",
        filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
    }
];
var setM = {
    width: '100%',
    height: 400,
    sortable: false,
    numberCell: { show: false },
    hoverMode: 'cell',
    showTop: false,
    resizable: true,
    scrollModel: { autoFit: true },
    draggable: false,
    wrap: false,
    editable: false,
    columnBorders: true,
    selectionModel: { type: 'row', mode: 'single' },
    colModel: colM,
    dataModel: dataM,
    pageModel: { type: "local", rPP: 20 },
    filterModel: { on: true, mode: "AND", header: true },
    rowClick: function (evt, ui) {
        ClearForm();
        if (ui.rowData) {
            var rowIndx = parseInt(ui.rowIndx);
            var record = ui.rowData;
            POId = record.ID;
            RFQId = record.RFQId;
            viewAttachments(record.ID);
            rptStatus = record.Status;
            var storeid = record.StoreId;
            var itemtypeid = record.ItemTypeId;
            $.ajax({
                type: "GET",
                url: "/StoreMaster/GetProjectBudget",
                data: { storeId: storeid, ID: itemtypeid },
                datatype: "Json",
                success: function (data) {
                    var budget = data.records[0].BudgetCost;
                    var utilize = data.records[0].UtilizedBudget;
                    budgetbalanc = budget - utilize;
                    $('#BalanceDue').val(budgetbalanc);
                }
            });
            $.ajax({
                type: "GET",
                url: "/PurchaseOrder/PurchaseOrderdetails/",
                data: { POId: record.ID },
                datatype: "Json",

                success: function (data) {
                    $("#Details").val(data.Details);
                    $("#BED").val(data.BED);
                    $("#Edu").val(data.Edu);
                    $("#SHECess").val(data.SHECess);
                    $("#Tax").val(data.Tax);
                    $("#Amount").val(data.Amount);
                    $("#Discount").val(data.Discount);
                    $("#OtherCharges").val(data.OtherCharges);
                    $("#GrandTotal").val(data.GrandTotal);
                    var dataMGrid = [];
                    $.each(data.PODetails, function (index, value) {
                        var grdData = {
                            'ID': value.ID, 'POIndDtlId': value.POIndDtlId, 'ItemID': value.ItemID, 'ItemName': value.ItemName, 'TaxRate': value.TaxRate, 'Qty': value.Qty, 'PackSize': value.PackSize, 'Rate': value.Rate, 'MRP': value.MRP,
                            'OrderingUnit': value.OrderingUnit, 'Make': value.Make, 'MaterialOfConstruct': value.MaterialOfConstruct, 'IndentRemark': value.IndentRemark, 'SizeOrWeight': value.SizeOrWeight, 'POIndentRemark': value.POIndentRemark, 'FreeQty': value.FreeQty, 'Amount': value.Amount,
                            'TaxIds': value.TaxIds, 'Tax': value.Tax, 'TaxAmount': value.TaxAmount, 'TransC': value.TransC, 'OctroiC': value.OctroiC,
                            'OtherC': value.OtherC, 'LoadUnloadC': value.LoadUnloadC, 'DiscountPer': value.discountper, 'Discount': value.Discount, 'NetAmount': value.NetAmount,
                            'SupplierName': value.SupplierName, 'DescriptiveName': value.DescriptiveName, 'SGST': value.SGST, 'CGST': value.CGST, 'IGST': value.IGST, 'UGST': value.UGST, 'HSNCode': value.HSNCode, 'SavedQty': value.Qty
                        }
                        dataMGrid.push(grdData);
                    });
                    $detailgrid.pqGrid("option", "dataModel.data", dataMGrid);
                    $detailgrid.pqGrid("refreshDataAndView");

                    var dataTerms = [];
                    $.each(data.PODeliveryTerms, function (index, value) {
                        var grdData = { 'DelTermID': value.DelTermID, 'DeliveryTermCode': value.DeliveryTermCode, 'DeliveryTermDesc': value.DeliveryTermDesc, 'state': true }
                        dataTerms.push(grdData);
                    });
                    $DeliveryTermgrid.pqGrid("option", "dataModel.data", dataTerms);
                    $DeliveryTermgrid.pqGrid("refreshDataAndView");

                    dataTerms = [];
                    $.each(data.POPaymenterms, function (index, value) {
                        var grdData = { 'PayTermID': value.PayTermID, 'PaymentTermCode': value.PaymentTermCode, 'PaymentTermDesc': value.PaymentTermDesc, 'state': true }
                        dataTerms.push(grdData);
                    });
                    $PaymentTermgrid.pqGrid("option", "dataModel.data", dataTerms);
                    $PaymentTermgrid.pqGrid("refreshDataAndView");

                    dataTerms = [];
                    $.each(data.POOtherTerms, function (index, value) {
                        var grdData = { 'OtherTermID': value.OtherTermID, 'OthersTermCode': value.OthersTermCode, 'OthersTermDesc': value.OthersTermDesc, 'state': true }
                        dataTerms.push(grdData);
                    });
                    $OtherTermgrid.pqGrid("option", "dataModel.data", dataTerms);
                    $OtherTermgrid.pqGrid("refreshDataAndView");

                    dataTerms = [];
                    $.each(data.POBasis, function (index, value) {
                        var grdData = { 'BasisId': value.BasisId, 'BasisCode': value.BasisCode, 'BasisDesc': value.BasisDesc, 'state': true }
                        dataTerms.push(grdData);
                    });
                    $Basis.pqGrid("option", "dataModel.data", dataTerms);
                    $Basis.pqGrid("refreshDataAndView");

                    dataTerms = [];
                    $.each(data.POInspectio, function (index, value) {
                        var grdData = { 'InspectionId': value.InspectionId, 'InspectionCode': value.InspectionCode, 'InspectionDesc': value.InspectionDesc, 'state': true }
                        dataTerms.push(grdData);
                    });
                    $Inspection.pqGrid("option", "dataModel.data", dataTerms);
                    $Inspection.pqGrid("refreshDataAndView");

                    showperAmount();
                }

            });
            $("#btnShowPurchaseIndentRpt").html('');
            $.ajax({
                type: "GET",
                url: "/ScanDoc/ScanDoc/GetScanDocUrl",
                data: { FileId: POId, ScanDocSubTypeId: 15 },
                datatype: "Json",
                success: function (data) {
                    $.each(data, function (key, value) {
                        DisplayUploadedFiles("btnShowPurchaseIndentRpt", value);
                    });
                }
            });
        }
        closeModal();
    }
}
$searchgrid = $("#searchgrid").pqGrid(setM);

function LoadSearchGrid(status) {
    $.ajax({
        url: "/PurchaseOrder/GetPOForAuthorization",
        cache: false,
        async: true,
        method: "GET",
        dataType: "JSON",
        beforeSend: function () {
            $searchgrid.pqGrid("showLoading");
        },
        complete: function () {
            $searchgrid.pqGrid("hideLoading");
        },
        success: function (response) {

            if (response.records) {
                let authorized = response.records.filter(req => req.Status === 'Authorised');
                let unauthorized = response.records.filter(req => req.Status === 'Verified');

                $searchgrid.pqGrid("hideLoading");
                status == 'unauthorized' ? $searchgrid.pqGrid("option", "dataModel.data", unauthorized) : $searchgrid.pqGrid("option", "dataModel.data", authorized);
                $searchgrid.pqGrid("refreshDataAndView");
            }
        }
    });
}
function showperAmount() {
    var amt = $("#Amount").val();
    if (amt == undefined || amt === "") amt = 0;
    var bed = $("#BED").val();
    if (bed == undefined || bed === "") bed = 0;
    var bedamt = (bed * amt) / 100;
    $("#BedAmt").val(Math.round(bedamt));

    var shecess = $("#SHECess").val();
    if (shecess == undefined || shecess === "") shecess = 0;
    var shecessamt = (shecess * amt) / 100;
    $("#Shecessamt").val(Math.round(shecessamt));

    var educess = $("#Edu").val();
    if (educess == undefined || educess === "") educess = 0;
    var eduamt = (educess * amt) / 100;
    $("#educessamt").val(Math.round(eduamt));

}
$("#btnReset").on('click', function () {
    ClearForm();
});

function ClearForm() {
    ClearParamGrid("detailgrid");
    $("#Amount").val("");
    $("#Tax").val("");
    $("#OtherCharges").val(""); $("#Discount").val(""); $("#GrandTotal").val(""); $("#Transport").val(""); $("#BED").val("");
    $("#Edu").val("");
    $("#SHECess").val("");
    $("#educessamt").val("");
    $("#Shecessamt").val("");
    $("#BedAmt").val("");
    $("#files").val("");
    $("#files").html("");
    $("#BalanceDue").val("");
    $("#preApproveImg").empty(); $("#appendImg").empty(); $("#files").val(null);
    POId = 0;
    RFQId = 0;
    ClearParamGrid("DeliveryTermgrid");
    ClearParamGrid("PaymentTermgrid");
    ClearParamGrid("OtherTermgrid");
    ClearParamGrid('Basistermgrid');
    ClearParamGrid('Inspection');
    $("#Details").val('');
}

//************View uploaded Images in List ******//
function viewAttachments(SupplierId) {
    $.ajax({
        type: "GET",
        url: "/ScanDoc/ScanDoc/GetScanDocUrl",
        data: { FileId: POId, ScanDocSubTypeId: 14 },
        datatype: "Json",
        success: function (data) {
            if (data != '') {
                $.each(data, function (key, value) {
                    DisplayUploadedDocuments("appendImg", value, appSetting, 14);
                });
            }
        }
    });
}
// on upload of Image and Video this function run
var fileTypes = ['jpg', 'jpeg', 'png', 'pdf'];
$(document).on("change", '.uploadup', function (z) {
    $("#preApproveImg").empty();
    let Img = $("#files").get(0).files;
    uploadImg(Img, 'preApproveImg');
});

$(document).on("click", '.imgclick', function (e) {
    let name = e.currentTarget.getAttribute("name");
    let files = $("#files").get(0).files;
    for (f = 0; f < files.length; f++) {
        if (files.item(f).name == name) {
            imagefile = $("#files").get(0).files[f];
            imagefile_url = URL.createObjectURL(imagefile);
            window.open(imagefile_url, '_blank');
        }
    }
});

//*******************Image View********************//
$("#btnShowExistingDoc").click(function () {
    if (POId === "" || POId === 0) {
        ShowAlert("error", "Please Select Request");
        return;
    }
    $.ajax({
        type: "GET",
        url: "/ScanDoc/ScanDoc/GetScanDocUrl",
        data: { FileId: POId, ScanDocSubTypeId: 17 },
        datatype: "Json",
        success: function (data) {
            if (data != '') {
                ViewSlideShow(data, 'slideshow-container', appSetting);
            }
            else {
                ShowAlert("error", "No Documents Found")
            }
        }
    });
});

$("#btnShowAttachments").click(function () {
    /* var PurchaseIndentId = $("#PurchaseIndentId").val();*/
    if (POId === "" || POId === 0) {
        ShowAlert("error", "Please Select Request");
        return;
    }
    $.ajax({
        type: "GET",
        url: "/ScanDoc/ScanDoc/GetScanDocUrl",
        data: { FileId: POId, ScanDocSubTypeId: 14 },
        datatype: "Json",
        success: function (data) {
            if (data != '') {
                ViewSlideShow(data, 'slideshow-container', appSetting);
            }
            else {
                ShowAlert("error", "No Documents Found")
            }
        }
    });
})
/////*********Image Slide Show in Modal**********************//
let ImgIndex = 1;

function plusSlides(n) {
    showGallary(ImgIndex += n);
}
function showGallary(n) {
    let i;
    let ImgSlides = document.getElementsByClassName("imgSlide");
    let video = document.getElementById("video");
    if (n > ImgSlides.length) { ImgIndex = 1 }
    if (n < 1) { ImgIndex = ImgSlides.length }
    for (i = 0; i < ImgSlides.length; i++) {
        ImgSlides[i].style.display = "none";
    }
    ImgSlides[ImgIndex - 1].style.display = "block";
    if (video) {
        video.play();
    }
}

function closeImageModal() {
    $("#slideshow-container").empty();
    $("#ViewModal").css('display', 'none');
}
//***********Close SlideShow Modal*********************////

$('#btnExport').on('click', function () {
    var potype;
    if (POId === "" || POId === 0) {
        ShowAlert("error", "Please Select PO");
        return;
    }
    $("#ReportModal").modal('show');
    if (rptStatus === "Authorised") {
        potype = "AUTHORISED Purchase Order";
    }
    else {
        potype = "VERIFIED PURCHASE ORDER";
    }
    var poid = POId;
    ReportValidationCheck(potype, poid);
});
function ReportValidationCheck(potype, poid) {
    var url = "";
    var poId = poid;
    var poType = potype;
    url = "../../Reports/ReportViewer.aspx?reportid=" + 228 + "&poId=" + poId + "&poType=" + poType;

    console.log(url);
    var myframe = document.getElementById("iframeReportViewer");
    if (myframe != null) {
        if (myframe.src) {
            myframe.src = url;
        }
        else if (myframe.contentWindow != null && myframe.contentWindow.location != null) {
            myframe.contentWindow.location = url;
        }
        else {
            myframe.setAttribute('src', url);
        }
        return false;
    }
}

$("#btnUnAuthorized").on('click', function () {
    $("#SearchGridModal").modal('show');
    LoadSearchGrid('unauthorized');
});
$("#btnSearch").on('click', function () {
    $("#SearchGridModal").modal('show');
    LoadSearchGrid('authorized');
});
function closeModal() {
    $("#SearchGridModal").modal('hide');
    $("#ReportModal").modal('hide');
    }

    /********* Delivery Term Search Grid *********/
    $(document).ready(function () {
        var dataModel = {
            location: "local"
        }
        var colDelM = [
            {
                dataIndx: "state", Width: 25, align: "center", type: 'checkBoxSelection', cls: 'ui-state-default', sortable: false,
                editor: false, dataType: 'bool',
                title: "<input type='checkbox' />",
                cb: { select: true, all: false, header: true }
            },
            { title: "", dataIndx: "TermID", dataType: "integer", hidden: true },
            {
                title: "Code", dataIndx: "DeliveryTermCode", width: 150, editable: false,
                filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
            },
            {
                title: "Name", dataIndx: "DeliveryTermDesc", width: 450, editable: false,
                filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
            }
        ];
        var DelM = {
            width: '100%',
            height: 400,
            sortable: false,
            numberCell: { show: false },
            hoverMode: 'cell',
            showTop: false,
            resizable: true,
            scrollModel: { autoFit: true },
            draggable: false,
            wrap: false,
            columnBorders: true,
            selectionModel: { type: 'row' },
            colModel: colDelM,
            dataModel: dataModel,
            filterModel: { on: true, mode: "AND", header: true },
            pageModel: { type: "local", rPP: 20 },
            virtualX: true,
            virtualY: true,
        };
        $SearchDeliveryTermgrid = $("#SearchDeliveryTermgrid").pqGrid(DelM);
    });
    /********* Delivery Term Grid *********/
    $(document).ready(function () {
        $('#btnViewDelTerms').on('click', function () {
            //$("#DeliveryItem").modal('toggle');
            LoadSearchDeliveryTermgrid();
        });
        $('#btnRemoveDelTerms').on('click', function () {
            var getData = $DeliveryTermgrid.pqGrid("option", "dataModel.data");
            var selectedItems = jLinq.from(getData).equals("state", true).select();

            $.each(selectedItems, function (key, value) {
                var obj = $DeliveryTermgrid.pqGrid("getRowIndx", { rowData: value });
                var rowIndx = obj.rowIndx;
                $DeliveryTermgrid.pqGrid("deleteRow", { rowIndx: rowIndx });
            });
        });

        var dataDelM = { location: "local", sorting: 'local' }
        var colDelM = [
            {
                dataIndx: "state", Width: 15, align: "center", type: 'checkBoxSelection', cls: 'ui-state-default', sortable: false,
                editor: false, dataType: 'bool',
                title: "<input type='checkbox' />",
                cb: { select: true, all: false, header: true }
            },
            { title: "", dataIndx: "DelTermID", dataType: "integer", hidden: true },
            { title: "Code", dataIndx: "DeliveryTermCode", width: 200, editable: false },
            { title: "Name", dataIndx: "DeliveryTermDesc", width: 400, editable: false }
        ];
        var DelM = {
            width: '100%',
            height: 250,
            sortable: false,
            numberCell: { show: false },
            hoverMode: 'cell',
            showTop: false,
            resizable: true,
            scrollModel: { autoFit: true },
            draggable: false,
            wrap: false,
            columnBorders: true,
            selectionModel: { type: 'row' },
            colModel: colDelM,
            dataModel: dataDelM,
            pageModel: { type: "local", rPP: 20 }
        };
        $DeliveryTermgrid = $("#DeliveryTermgrid").pqGrid(DelM);
    });
    /********* Payment Term Search Grid *********/
    $(document).ready(function () {
        var dataPayM = { location: "local" }
        var colPayM = [
            {
                dataIndx: "state", Width: 25, align: "center", type: 'checkBoxSelection', cls: 'ui-state-default', sortable: false,
                editor: false, dataType: 'bool',
                cb: { select: true, all: false, header: true }
            },
            { title: "", dataIndx: "TermID", dataType: "integer", hidden: true },
            {
                title: "Code", dataIndx: "PaymentTermCode", width: 150, editable: false,
                filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
            },
            {
                title: "Name", dataIndx: "PaymentTermDesc", width: 450, editable: false,
                filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }

            }
        ];
        var DelM = {
            width: '100%',
            height: 400,
            sortable: false,
            numberCell: { show: false },
            hoverMode: 'cell',
            showTop: false,
            resizable: true,
            scrollModel: { autoFit: true },
            draggable: false,
            wrap: false,
            columnBorders: true,
            filterModel: { on: true, mode: "AND", header: true },
            selectionModel: { type: 'none', subtype: 'incr', cbHeader: true, cbAll: true },
            colModel: colPayM,
            dataModel: dataPayM,
            pageModel: { type: "local", rPP: 20 },
            virtualX: true,
            virtualY: true,
        };
        $SearchPaymentTermgrid = $("#SearchPaymentTermgrid").pqGrid(DelM);
    });
    /********* Payment Term Grid *********/
    $(document).ready(function () {
        $('#btnViewPayTerms').on('click', function () {
            //$("#PaymentItem").modal('toggle');
            LoadSearchPaymentTermgrid();
        });
        $('#btnRemovePayTerms').on('click', function () {
            var getData = $PaymentTermgrid.pqGrid("option", "dataModel.data");
            var selectedItems = jLinq.from(getData).equals("state", true).select();
            $.each(selectedItems, function (key, value) {
                var obj = $PaymentTermgrid.pqGrid("getRowIndx", { rowData: value });
                var rowIndx = obj.rowIndx;
                $PaymentTermgrid.pqGrid("deleteRow", { rowIndx: rowIndx });
            });
        });
        var dataDelM = { location: "local", sorting: 'local' }
        var colDelM = [
            {
                dataIndx: "state", Width: 15, align: "center", type: 'checkBoxSelection', cls: 'ui-state-default', sortable: false,
                editor: false, dataType: 'bool',
                title: "<input type='checkbox' />",
                cb: { select: true, all: false, header: true }
            },
            { title: "", dataIndx: "PayTermID", dataType: "integer", hidden: true },
            {
                title: "Code", dataIndx: "PaymentTermCode", width: 200, editable: false

            },
            {
                title: "Name", dataIndx: "PaymentTermDesc", width: 400, editable: false

            }
        ];
        var DelM = {
            width: '100%',
            height: 260,
            sortable: false,
            numberCell: { show: false },
            hoverMode: 'cell',
            showTop: false,
            resizable: true,
            scrollModel: { autoFit: true },
            draggable: false,
            wrap: false,
            columnBorders: true,
            selectionModel: { type: 'row' },
            colModel: colDelM,
            dataModel: dataDelM,
            pageModel: { type: "local", rPP: 20 },
        };
        $PaymentTermgrid = $("#PaymentTermgrid").pqGrid(DelM);
    });
    /********* Other Term Search Grid *********/
    $(document).ready(function () {
        var dataDelM = { location: "local", sorting: 'local' }
        var colDelM = [
            {
                dataIndx: "state", Width: 25, align: "center", type: 'checkBoxSelection', cls: 'ui-state-default', sortable: false,
                editor: false, dataType: 'bool',
                cb: { select: true, all: false, header: true }
            },
            { title: "", dataIndx: "TermID", dataType: "integer", hidden: true },
            {
                title: "Code", dataIndx: "OthersTermCode", width: 150, editable: false,
                filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
            },
            {
                title: "Name", dataIndx: "OthersTermDesc", width: 450, editable: false,
                filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
            }
        ];
        var DelM = {
            width: '100%',
            height: 400,
            sortable: false,
            numberCell: { show: false },
            hoverMode: 'cell',
            showTop: false,
            resizable: true,
            scrollModel: { autoFit: true },
            draggable: false,
            wrap: false,
            columnBorders: true,
            filterModel: { on: true, mode: "AND", header: true },
            selectionModel: { type: 'row' },
            colModel: colDelM,
            dataModel: dataDelM,
            pageModel: { type: "local", rPP: 20 },
            virtualX: true,
            virtualY: true,
        };
        $SearchOtherTermgrid = $("#SearchOtherTermgrid").pqGrid(DelM);
    });
    /*****************search basis term********************/
    $(document).ready(function () {
        var dataDelM = { location: "local", sorting: 'local' }
        var colDelM = [
            {
                dataIndx: "state", Width: 25, align: "center", type: 'checkBoxSelection', cls: 'ui-state-default', sortable: false,
                editor: false, dataType: 'bool',
                cb: { select: true, all: false, header: true }
            },
            { title: "", dataIndx: "BasisID", dataType: "integer", hidden: true },
            {
                title: "Code", dataIndx: "BasisCode", width: 150, editable: false,
                filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
            },
            {
                title: "Description", dataIndx: "BasisDesc", width: 450, editable: false,
                filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
            }
        ];
        var DelM = {
            width: '100%',
            height: 400,
            sortable: false,
            numberCell: { show: false },
            hoverMode: 'cell',
            showTop: false,
            resizable: true,
            scrollModel: { autoFit: true },
            draggable: false,
            wrap: false,
            columnBorders: true,
            filterModel: { on: true, mode: "AND", header: true },
            selectionModel: { type: 'row' },
            colModel: colDelM,
            dataModel: dataDelM,
            pageModel: { type: "local", rPP: 20 },
            virtualX: true,
            virtualY: true,
        };
        $SearchBasisTermgrid = $("#SearchBasisTermgrid").pqGrid(DelM);
    });
    $(document).ready(function () {
        var dataDelM = { location: "local", sorting: 'local' }
        var colDelM = [
            {
                dataIndx: "state", Width: 25, align: "center", type: 'checkBoxSelection', cls: 'ui-state-default', sortable: false,
                editor: false, dataType: 'bool',
                cb: { select: true, all: false, header: true }
            },
            { title: "", dataIndx: "InspectionId", dataType: "integer", hidden: true },
            {
                title: "Code", dataIndx: "InspectionCode", width: 150, editable: false,
                filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
            },
            {
                title: "Description", dataIndx: "InspectionDesc", width: 450, editable: false,
                filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
            }
        ];
        var DelM = {
            width: '100%',
            height: 400,
            sortable: false,
            numberCell: { show: false },
            hoverMode: 'cell',
            showTop: false,
            resizable: true,
            scrollModel: { autoFit: true },
            draggable: false,
            wrap: false,
            columnBorders: true,
            filterModel: { on: true, mode: "AND", header: true },
            selectionModel: { type: 'row' },
            colModel: colDelM,
            dataModel: dataDelM,
            pageModel: { type: "local", rPP: 20 },
            virtualX: true,
            virtualY: true,
        };
        $SearchInspectionTermgrid = $("#SearchInspectionTermgrid").pqGrid(DelM);
    });
    /**************Inspection Grid**************************/
    $(document).ready(function () {
        $('#btninspectionTerms').on('click', function () {
            LoadSearchInspectionTermgrid();
        });
        $('#btnRemoveinspectionTerms').on('click', function () {
            var getData = $Inspection.pqGrid("option", "dataModel.data");
            var selectedItems = jLinq.from(getData).equals("state", true).select();
            $.each(selectedItems, function (key, value) {
                var obj = $Inspection.pqGrid("getRowIndx", { rowData: value });
                var rowIndx = obj.rowIndx;
                $Inspection.pqGrid("deleteRow", { rowIndx: rowIndx });
            });
        });

        var dataOtherM = { location: "local" }
        var colOtherM = [
            {
                dataIndx: "state", Width: 15, align: "center", type: 'checkBoxSelection', cls: 'ui-state-default', sortable: false,
                editor: false, dataType: 'bool',
                title: "<input type='checkbox' />",
                cb: { select: true, all: false, header: true }
            },
            { title: "", dataIndx: "InspectionId", dataType: "integer", hidden: true },
            { title: "Code", dataIndx: "InspectionCode", width: 400, editable: false },
            { title: "Description", dataIndx: "InspectionDesc", width: 400, editable: false }
        ];
        var inspection = {
            width: '100%',
            height: 260,
            sortable: false,
            numberCell: { show: false },
            hoverMode: 'cell',
            showTop: false,
            resizable: true,
            scrollModel: { autoFit: true },
            draggable: false,
            wrap: false,
            columnBorders: true,
            selectionModel: { type: 'row' },
            colModel: colOtherM,
            dataModel: dataOtherM,
            pageModel: { type: "local", rPP: 20 },
            virtualX: true,
            virtualY: true,
        };
        $Inspection = $("#Inspection").pqGrid(inspection);
    });
    /**********************Basis Term******************/
    $(document).ready(function () {
        $('#btnBasisTerms').on('click', function () {
            LoadSearchBasisTermgrid();
        });
        $('#btnRemoveBasisTerms').on('click', function () {
            var getData = $Basis.pqGrid("option", "dataModel.data");
            var selectedItems = jLinq.from(getData).equals("state", true).select();
            $.each(selectedItems, function (key, value) {
                var obj = $Basis.pqGrid("getRowIndx", { rowData: value });
                var rowIndx = obj.rowIndx;
                $Basis.pqGrid("deleteRow", { rowIndx: rowIndx });
            });
        });

        var basism = { location: "local" }
        var colM = [
            {
                dataIndx: "state", Width: 15, align: "center", type: 'checkBoxSelection', cls: 'ui-state-default', sortable: false,
                editor: false, dataType: 'bool',
                title: "<input type='checkbox' />",
                cb: { select: true, all: false, header: true }
            },
            { title: "", dataIndx: "BasisId", dataType: "integer", hidden: true },
            { title: "Code", dataIndx: "BasisCode", width: 400, editable: false },
            { title: "Name", dataIndx: "BasisDesc", width: 400, editable: false }
        ];
        var basisgrid = {
            width: '100%',
            height: 260,
            sortable: false,
            numberCell: { show: false },
            hoverMode: 'cell',
            showTop: false,
            resizable: true,
            scrollModel: { autoFit: true },
            draggable: false,
            wrap: false,
            columnBorders: true,
            selectionModel: { type: 'row' },
            colModel: colM,
            dataModel: basism,
            pageModel: { type: "local", rPP: 20 },
            virtualX: true,
            virtualY: true
        };
        $Basis = $("#Basistermgrid").pqGrid(basisgrid);
    });
    /********* Other Term Grid *********/
    $(document).ready(function () {
        $('#btnViewOtherTerms').on('click', function () {
            //$("#OtherItem").modal('toggle');
            LoadSearchOtherTermgrid();
        });
        $('#btnRemoveOtherTerms').on('click', function () {
            var getData = $OtherTermgrid.pqGrid("option", "dataModel.data");
            var selectedItems = jLinq.from(getData).equals("state", true).select();
            $.each(selectedItems, function (key, value) {
                var obj = $OtherTermgrid.pqGrid("getRowIndx", { rowData: value });
                var rowIndx = obj.rowIndx;
                $OtherTermgrid.pqGrid("deleteRow", { rowIndx: rowIndx });
            });
        });

        var dataOtherM = { location: "local" }
        var colOtherM = [
            {
                dataIndx: "state", Width: 15, align: "center", type: 'checkBoxSelection', cls: 'ui-state-default', sortable: false,
                editor: false, dataType: 'bool',
                title: "<input type='checkbox' />",
                cb: { select: true, all: false, header: true }
            },
            { title: "", dataIndx: "OtherTermID", dataType: "integer", hidden: true },
            { title: "Code", dataIndx: "OthersTermCode", width: 200, editable: false },
            { title: "Name", dataIndx: "OthersTermDesc", width: 400, editable: false }
        ];
        var DelM = {
            width: '100%',
            height: 260,
            sortable: false,
            numberCell: { show: false },
            hoverMode: 'cell',
            showTop: false,
            resizable: true,
            scrollModel: { autoFit: true },
            draggable: false,
            wrap: false,
            columnBorders: true,
            selectionModel: { type: 'row' },
            colModel: colOtherM,
            dataModel: dataOtherM,
            pageModel: { type: "local", rPP: 20 },
            virtualX: true,
            virtualY: true,
        };
        $OtherTermgrid = $("#OtherTermgrid").pqGrid(DelM);
    });
    /********* Add Button Click Events *********/
    $(document).ready(function () {
        $('#btnAddDeliveryTerm').on('click', function () {
            ClosePopupWindow("DeliveryItemModal");
            var getData = $SearchDeliveryTermgrid.pqGrid("option", "dataModel.data");
            var selectedItems = jLinq.from(getData).equals("state", true).select();

            var colM = $DeliveryTermgrid.pqGrid("option", "colModel");
            colM[2].editable = true;
            colM[3].editable = true;
            $DeliveryTermgrid.pqGrid("option", "colModel", colM);
            $.each(selectedItems, function (key, value) {
                $DeliveryTermgrid.pqGrid("addRow", { newRow: { 'DelTermID': value.TermID, 'DeliveryTermCode': value.DeliveryTermCode, 'DeliveryTermDesc': value.DeliveryTermDesc, 'state': true } })
            });
            colM[2].editable = false;
            colM[3].editable = false;
            $DeliveryTermgrid.pqGrid("option", "colModel", colM);
            //$DeliveryTermgrid.pqGrid("selection", { type: 'row', method: 'selectAll' });
        });
        $('#btnAddPaymentTerm').on('click', function () {
            ClosePopupWindow("PaymentItemModal");
            var getData = $SearchPaymentTermgrid.pqGrid("option", "dataModel.data");
            var selectedItems = jLinq.from(getData).equals("state", true).select();
            var colM = $PaymentTermgrid.pqGrid("option", "colModel");
            colM[2].editable = true;
            colM[3].editable = true;
            $PaymentTermgrid.pqGrid("option", "colModel", colM);
            $.each(selectedItems, function (key, value) {
                $PaymentTermgrid.pqGrid("addRow", { newRow: { 'PayTermID': value.TermID, 'PaymentTermCode': value.PaymentTermCode, 'PaymentTermDesc': value.PaymentTermDesc, 'state': true } })
            });
            colM[2].editable = false;
            colM[3].editable = false;
            $PaymentTermgrid.pqGrid("option", "colModel", colM);
            //$PaymentTermgrid.pqGrid("selection", {type: 'row', method: 'selectAll' });
        });
        $('#btnAddOtherTerm').on('click', function () {
            ClosePopupWindow("OtherItemModal");
            var getData = $SearchOtherTermgrid.pqGrid("option", "dataModel.data");
            var selectedItems = jLinq.from(getData).equals("state", true).select();
            var colM = $OtherTermgrid.pqGrid("option", "colModel");
            colM[2].editable = true;
            colM[3].editable = true;
            $OtherTermgrid.pqGrid("option", "colModel", colM);
            $.each(selectedItems, function (key, value) {
                $OtherTermgrid.pqGrid("addRow", { newRow: { 'OtherTermID': value.TermID, 'OthersTermCode': value.OthersTermCode, 'OthersTermDesc': value.OthersTermDesc, 'state': true } })
            });
            colM[2].editable = false;
            colM[3].editable = false;
            $OtherTermgrid.pqGrid("option", "colModel", colM);
            //$OtherTermgrid.pqGrid("selection", {type: 'row', method: 'selectAll' });
        });
        /*******************basis search**********************/
        $('#btnAddBasisTerm').on('click', function () {
            ClosePopupWindow("BasisItemModal");
            var getData = $SearchBasisTermgrid.pqGrid("option", "dataModel.data");
            var selectedItems = jLinq.from(getData).equals("state", true).select();
            var colM = $Basis.pqGrid("option", "colModel");
            colM[2].editable = true;
            colM[3].editable = true;
            $OtherTermgrid.pqGrid("option", "colModel", colM);
            $.each(selectedItems, function (key, value) {
                $Basis.pqGrid("addRow", { newRow: { 'BasisId': value.BasisId, 'BasisCode': value.BasisCode, 'BasisDesc': value.BasisDesc, 'state': true } })
            });
            colM[2].editable = false;
            colM[3].editable = false;
            $Basis.pqGrid("option", "colModel", colM);
            //$OtherTermgrid.pqGrid("selection", {type: 'row', method: 'selectAll' });
        });
        $('#btnAddInspectionTerm').on('click', function () {
            ClosePopupWindow("InspectionItemModal");
            var getData = $SearchInspectionTermgrid.pqGrid("option", "dataModel.data");
            var selectedItems = jLinq.from(getData).equals("state", true).select();
            var colM = $Inspection.pqGrid("option", "colModel");
            colM[2].editable = true;
            colM[3].editable = true;
            $Inspection.pqGrid("option", "colModel", colM);
            $.each(selectedItems, function (key, value) {
                $Inspection.pqGrid("addRow", { newRow: { 'InspectionId': value.InspectionId, 'InspectionCode': value.InspectionCode, 'InspectionDesc': value.InspectionDesc, 'state': true } })
            });
            colM[2].editable = false;
            colM[3].editable = false;
            $Inspection.pqGrid("option", "colModel", colM);
            //$OtherTermgrid.pqGrid("selection", {type: 'row', method: 'selectAll' });
        });
        $("#btnShowItems").on('click', function () {
            if ($("#Against").val() == "1") {
                if ($("#ddlStores").val() == "") {
                    ShowAlert("error", "Please Select Project");
                    return;
                }
            }

            LoadItemgrid();
        });
        $("#btnAddItems").on('click', function () {
            $Itemgrid.pqGrid("reset", { filter: true });
            ClosePopupWindow("ItemModal");
            var dataMGrid = [];
            var getData = $Itemgrid.pqGrid("option", "dataModel.data");
            var selectedItems = jLinq.from(getData).equals("state", true).select();
            $.each(selectedItems, function (key, value) {
                var grdData = {
                    'ItemID': value.ID, 'ItemName': value.Name, 'PackSize': value.PackSize, 'Rate': value.LastPORate, 'MRP': value.MRP, 'OrderingUnit': value.UnitName,
                    'Qty': '0', 'FreeQty': '0', 'Amount': '0', 'TaxAmount': '0', 'TransC': '0', 'OctroiC': '0', 'OtherC': '0', 'LoadUnloadC': '0', 'DiscountPer': '0', 'Discount': '0', 'NetAmount': '0',
                    'DescriptiveName': value.DescriptiveName, 'SGST': '0', 'CGST': '0', 'IGST': '0', 'UGST': '0'
                }
                dataMGrid.push(grdData);
            });
            $pogrid.pqGrid("option", "dataModel.data", dataMGrid);
            $pogrid.pqGrid("refreshDataAndView");
        });
    });
    function LoadSearchDeliveryTermgrid() {
        $("#DeliveryItemModal").dialog({
            height: 500,
            width: 700,
            modal: true,
            open: function (evt, ui) {
                $.ajax({
                    type: "GET",
                    url: "/DeliveryTerm/GetActiveDeliveryTerms",
                    datatype: "Json",
                    success: function (data) {
                        $SearchDeliveryTermgrid.pqGrid("option", "dataModel.data", data.records);
                        $SearchDeliveryTermgrid.pqGrid("refreshDataAndView");
                    }
                });
            }
        });
    }
    function LoadSearchPaymentTermgrid() {
        $("#PaymentItemModal").dialog({
            height: 500,
            width: 700,
            modal: true,
            open: function (evt, ui) {
                $.ajax({
                    type: "GET",
                    url: "/PaymentTermMaster/GetActivePaymentTerm",
                    datatype: "Json",
                    success: function (data) {
                        $SearchPaymentTermgrid.pqGrid("option", "dataModel.data", data.records);
                        $SearchPaymentTermgrid.pqGrid("refreshDataAndView");
                    }
                });
            }

        });
    }
    function LoadSearchOtherTermgrid() {
        $("#OtherItemModal").dialog({
            height: 500,
            width: 700,
            modal: true,
            open: function (evt, ui) {
                $.ajax({
                    type: "GET",
                    url: "/OtherTermMaster/GetActiveOtherTerm",
                    datatype: "Json",
                    success: function (data) {
                        $SearchOtherTermgrid.pqGrid("option", "dataModel.data", data.records);
                        $SearchOtherTermgrid.pqGrid("refreshDataAndView");
                    }
                });
            }
        });
    }
    function LoadSearchBasisTermgrid() {
        $("#BasisItemModal").dialog({
            height: 500,
            width: 700,
            modal: true,
            open: function (evt, ui) {
                $.ajax({
                    type: "GET",
                    url: "/OtherTermMaster/AllBasisTerm",
                    datatype: "Json",
                    success: function (data) {
                        $SearchBasisTermgrid.pqGrid("option", "dataModel.data", data.records);
                        $SearchBasisTermgrid.pqGrid("refreshDataAndView");
                    }
                });
            }
        });
    }
    function LoadSearchInspectionTermgrid() {
        $("#InspectionItemModal").dialog({
            height: 500,
            width: 700,
            modal: true,
            open: function (evt, ui) {
                $.ajax({
                    type: "GET",
                    url: "/OtherTermMaster/AllInspectionTerm",
                    datatype: "Json",
                    success: function (data) {
                        $SearchInspectionTermgrid.pqGrid("option", "dataModel.data", data.records);
                        $SearchInspectionTermgrid.pqGrid("refreshDataAndView");
                    }
                });
            }
        });
    }

    $("#content-tab").tabs({  //Refreshing grids on tab change
        activate: function (event, ui) {
            let tabIndx = ui.newTab.index();
            tabIndx == "1" ? $DeliveryTermgrid.pqGrid("refreshDataAndView") : tabIndx == "2" ? $PaymentTermgrid.pqGrid("refreshDataAndView") : tabIndx == "3" ? $OtherTermgrid.pqGrid("refreshDataAndView") : tabIndx == "5" ? $Basis.pqGrid("refreshDataAndView") : $Inspection.pqGrid("refreshDataAndView")
        }
    });

</script>
