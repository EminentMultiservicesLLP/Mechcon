@Scripts.Render("~/bundles/jquerymodels")


<style>
    #btnNext {
        float: inline-end;
        margin-right: 35px;
    }
    #btnPrevious {
        margin-left: 35px;
    }
    .resourceName{
        color:darkred;
        font-size:15px;
    }
</style>

<script>
    $(function () {
        $(".datepicker").datepicker({
            showOn: "button",
            buttonImage: "/Content/images/calendar.gif",
            buttonImageOnly: true,
            buttonText: "Selectdate",
            'changeMonth': true,
            'changeYear': true,
            'yearRange': '2021:2030',
            "format": "dd-M-yyyy",
            todayBtn: "linked",
            pickerPosition: "bottom-left",
            "todayHighlight": true,
            autoclose: true,
        })
        $("#anim").change(function () {
            $(".datepicker").datepicker("option", "showAnim", "fadeIn");
        });
    });

    $("#FromDate").datepicker("setDate", getFirstDateOfFinancialYear());
    $("#ToDate").datepicker("setDate", new Date());
</script>

<h5 class="page-header orangeDottedBottomBorder">Dashboard</h5>

<fieldset class="fieldsetCustom">
    <legend class="legendCustom">Select Period</legend>
    <div class="row">
        @*<div class="col-lg-2 col-md-4 col-sm-12 mb-3">
            <label for="FromDate">From Date</label>
            <input type="text" id="FromDate" class="form-control datepicker" />
        </div>
        <div class="col-lg-2 col-md-4 col-sm-12 mb-3">
            <label for="ToDate">To Date</label>
            <input type="text" id="ToDate" class="form-control datepicker" />
        </div>*@
        <div class="col-lg-2 col-md-4 col-sm-12 mb-3">
            <label class="required" for="FinancialYearID">Financial Year</label>
            <select id="FinancialYearID" name="FinancialYearID" class="form-control">
                <option value="">--Select Financial Year--</option>
            </select>
        </div>
        <div class="col-lg-2 col-md-4 col-sm-12 mb-3">
            <label class="" for="ProjectID">Project</label>
            <select id="ProjectID" name="ProjectID" class="form-control">
                <option value=null>--Select Project--</option>
            </select>
        </div>
        <div class="col-lg-2 col-md-4 col-sm-12 mb-3">
            <br />
            <button type="button" id="btnGo" class="btn btn-primary" onclick="go()">GO</button>
            <button type="button" class="btn btn-warning" id="btnResetT" onclick="reset()">Reset</button>
        </div>
    </div>
</fieldset>

<fieldset class="fieldsetCustom">
    <legend class="legendCustom"> Summary </legend>
    <div class="dashboard-container">
        <div class="dashboard-card">
            <h3>Enquiry</h3>
            <h2 id="EnquiryCount">0</h2>
        </div>

        <div class="dashboard-card">
            <h3>Offer</h3>
            <h2 id="OfferCount">0</h2>
        </div>

        <div class="dashboard-card">
            <h3>Work Order</h3>
            <h2 id="WOCount">0</h2>
        </div>

        <div class="dashboard-card">
            <h3>Project</h3>
            <h2 id="ProjectCount">0</h2>
        </div>
    </div>

    <div class="dashboard-container">
        <div class="dashboard-card">
            <h3>MR Count</h3>
            <h2 id="StatusID_5">0</h2>
        </div>

        <div class="dashboard-card">
            <h3>PR Count</h3>
            <h2 id="PRCount">0</h2>
        </div>

        <div class="dashboard-card">
            <h3>PO Count</h3>
            <h2 id="POCount">0</h2>
        </div>

        <div class="dashboard-card">
            <h3>GRN Count</h3>
            <h2 id="GRNCount">0</h2>
        </div>
    </div>

    <div class="dashboard-container">
        <div class="dashboard-card">
            <h3>Total Order In Hand</h3>
            <h2 id="TotalOrderInHand">0</h2>
        </div>

        <div class="dashboard-card">
            <h3>Order In Hand</h3>
            <h2 id="OrderInHand">0</h2>
        </div>

        <div class="dashboard-card">
            <h3>Todays Booking</h3>
            <h2 id="TodaysBooking">0</h2>
        </div>

        <div class="dashboard-card">
            <h3>Monthly Dispatch</h3>
            <h2 id="MonthlyDispatch">0</h2>
        </div>
    </div>

</fieldset>

<div class="row">
    <div class="col-sm-12 col-md-6">
        <fieldset class="fieldsetCustom chartFieldset" id="dashboard_MonthlySaleFS">
            <legend class="legendCustom">Monthly Sale</legend>
        </fieldset>
    </div>
    <div class="col-sm-12 col-md-6">
        <fieldset class="fieldsetCustom chartFieldset" id="dashboard_MonthlyPurchaseFS">
            <legend class="legendCustom">Monthly Purchase</legend>
        </fieldset>
    </div>
</div>
<div class="row">
    <div class="col-sm-12 col-md-6">
        <fieldset class="fieldsetCustom chartFieldset" id="dashboard_MonthlySaleVsTargetFS">
            <legend class="legendCustom">Monthly Sale Vs Target</legend>
        </fieldset>
    </div>
    <div class="col-sm-12 col-md-6">
        <fieldset class="fieldsetCustom chartFieldset" id="dashboard_MonthlySaleVsExpenseFS">
            <legend class="legendCustom">Monthly Sale Vs Expense</legend>
        </fieldset>
    </div>
</div>
<div id="Multi_Resources" style="border: 2px solid #7bf1e1;border-radius: 10px;"></div>

<div class="row">
    <div class="col-sm-12 col-md-6">
        <fieldset class="fieldsetCustom chartFieldset" id="dashboard_SectorwiseBreakupFS">
            <legend class="legendCustom">Sectorwise Breakup</legend>
        </fieldset>
    </div>
    <div class="col-sm-12 col-md-6">
        <fieldset class="fieldsetCustom chartFieldset" id="dashboard_ProductwiseBreakupFS">
            <legend class="legendCustom">Productwise Breakup</legend>
        </fieldset>
    </div>
</div>

<div class="row">
    <div class="col-sm-12 col-md-12">
        <fieldset class="fieldsetCustom chartFieldset" id="dashboard_ProjectwiseStatusFS">
            <legend class="legendCustom">Project Status</legend>
            <button type="button" id="btnPrevious" class="btn btn-danger" disabled> Previous</button>
            <button type="button" id="btnNext" class="btn btn-danger" disabled> Next</button>
        </fieldset>
    </div>    
</div>

<script>
    var MaxProjectId = 0;
    var MinProjectId = 0;
    function loadFinancialYear() {
        $.ajax({
            type: "GET",
            url: "/ResourceTarget/GetFinancialYear",
            dataType: "json",
            success: function (data) {
                let today = new Date();
                let month = today.getMonth() + 1;
                let year = today.getFullYear();
                year = month < 4 ? year - 1 : year;
                let currentYear = data.filter(item => (item.FinancialYear).split('-')[0] == year);

                const $financialYearID = $('#FinancialYearID');
                      $financialYearID.empty();
                if (data.error) {
                    $financialYearID.append('<option value="">--Error loading financial years--</option>');
                    console.error("Error loading financial years:", data.error);
                    return;
                }
                $financialYearID.append('<option value="">--Select Financial Year--</option>');
                data.forEach(function (financialYear) {
                    $financialYearID.append(`<option value="${financialYear.FinancialYearID}">${financialYear.FinancialYear}</option>`);
                });
                $financialYearID.val(currentYear[0].FinancialYearID);
                go();
            },
            error: function (xhr, textStatus, errorThrown) {
                $('#FinancialYearID').empty();
                $('#FinancialYearID').append('<option value="">--Error loading sources--</option>');
                console.error("Error loading sources:", errorThrown);
            }
        });
    }
    loadFinancialYear();

    function loadProject() {
        $.ajax({
            type: "GET",
            url: '@Url.Action("AllStoreMasters", "StoreMaster")',
            datatype: "Json",
            success: function (data) {
                $('#ProjectID').empty();
                $('#ProjectID').append('<option value="null">' + "All" + '</option>');
                $.each(data.records, function (index, value) {
                    $('#ProjectID').append(`<option value="${value.ID}">${value.Code}</option>`);
                });
            },
            error: function (xhr, textStatus, errorThrown) {
                console.error("Error loading stores:", errorThrown);
            }
        });
    }
    loadProject();

    function go() {
        //const fromDate = $("#FromDate").val();
        //const toDate = $("#ToDate").val();
        const financialYear= $('#FinancialYearID').val();
        const projectID = $("#ProjectID").val();
        MaxProjectId = 0;

        // Check if the From Date is earlier than the To Date
        if (financialYear == 0 || financialYear == undefined) {
            ShowAlert("warning", "Please Select Financial Year First !!");
            return;
        }
        GetDashBoardCountSummury(financialYear, projectID);
        loadMonthlySale(financialYear, projectID);
        loadMonthlyPurchase(financialYear, projectID);
        loadMonthlySaleVsTarget(financialYear, projectID);
        loadMonthlySaleVsExpense(financialYear, projectID);
        loadMonthlyResourcewiseTarget(financialYear, projectID);
        loadSectorwiseBreakup(financialYear);
        loadProductwiseBreakup(financialYear);
        loadProjectStatus(financialYear, projectID, MaxProjectId); // here 0 is parameter for MaxProjectId
    }
    // btn Previous and next call
    $("#btnPrevious").on("click", function () {
        const financialYear = $('#FinancialYearID').val();
        const projectID = $("#ProjectID").val();        

        MaxProjectId = MinProjectId - 10;
        MaxProjectId <= 0 ? 0 : MaxProjectId;

        loadProjectStatus(financialYear, projectID, MaxProjectId);
        
    });
    $("#btnNext").on("click", function () {
        const financialYear = $('#FinancialYearID').val();
        const projectID = $("#ProjectID").val();

        loadProjectStatus(financialYear, projectID, MaxProjectId);
       
    });

    $('#FinancialYearID').on('change', function () {
        MaxProjectId = 0;
    })
    function GetDashBoardCountSummury(FinancialYearID, projectID) {
        const antiForgeryToken = $("input[name=__RequestVerificationToken]").val();

        $.ajax({
            headers: { "__RequestVerificationToken": antiForgeryToken },
            type: 'GET',
            url: "/DashBoard/GetDashBoardCountSummury",
            data: { FinancialYearID: FinancialYearID, ProjectID: projectID },
            dataType: "json",
            success(response) {
                if (response.success && Array.isArray(response.records)) {
                    response.records.forEach(({ Type, Count }) => {
                        const element = $(`#${Type}`);
                        if (element.length) {
                            element.text(Count);
                        }
                    });
                } else {
                    alert(response.message || "Unable to load count summury.");
                }
            },
            error() {
                alert("An error occurred while loading count summury. Please try again later.");
            }
        });
    }
    // convert number to small

    function formatValue(value) {
        let val = Math.abs(value);
        if (val >= 10 ** 3 && val < 10 ** 5) {
            val = (val / 1000).toFixed(2) + 'K'
        } else if (val >= 10 ** 5 && val < 10 ** 7) {
            val = (val / 100000).toFixed(2) + 'L';
        } else if (val >= 10 ** 7) {
            val = (val / 10000000).toFixed(2) + 'Cr';
        }
        else {
            val = val;
        }

        return val
    }

    function NumbertoMoney(value) {
        if (typeof value !== "undefined") {
            return "Rs." + value.toLocaleString('en-US');
        }
        return value
    }
    //-----------------Start MutliChart_BarChart --------------------//
    function renderMutliChart_BarChart({ containerId, data, count }) {
      
        let ResourceName = data[0].ResourceName;
        $("#Multi_Resources").append('<div class="row"><div class="col-sm-12 col-md-12"><fieldset class="fieldsetCustom chartFieldset" id="' + containerId + '_Multi' + count + 'FS"><legend class="legendCustom"><span class="resourceName">' + ResourceName +'</span> Monthwise Target </legend><div id ="' + containerId + count + 'Chart" class="chart-container"></div></fieldset></div></div>');

        // Check if data is valid
        if (!data || data.length === 0) {
            $(`#${containerId}${count}Chart`).html('<div class="no-data-message" >No data available for the selected period.</div>');
            return;
        }
        const lableData = data.map(item => item.MonthName);
        const seriesdata = [{
            name: 'Target Value',
            type: 'column',
            data: data.map(item => item.TargetValue)
        },
        {
            name: 'Won Value',
            type: 'column',
            data: data.map(item => item.WonValue)
        }]
       
        // Chart options
        const options = {
            series: seriesdata,
            chart: {
                type: 'bar',
                height: 280,
                events: {
                    resize: (chart, width, height) => {
                        chart.updateOptions({
                            chart: { height: height || 280 }
                        });
                    }
                }
            },
            stroke: {
                width: [0, 2.5],
                curve: 'smooth'
            },
            plotOptions: {
                bar: {
                    horizontal: false,
                    columnWidth: '50%',
                    dataLabels: {
                            enabled: true,
                            orientation: 'vertical',
                            position: 'center'
                    }
                }
            },
            dataLabels: {
                enabled: true,
                style: {
                    fontFamily: 'Calibri',
                    fontWeight: 'normal',
                    color: 'white'
                },
                  formatter: formatValue,
                dropShadow: {
                    enabled: false
                },

            },
            xaxis: {
                categories: lableData,
            },
            yaxis: {
                labels: {
                    formatter: formatValue,
                    style: {
                        fontSize: '9px',
                        colors: '#000',
                    }
                }
            },
            grid: {
                borderColor: '#e7e7e7',
                row: {
                    colors: ['#f3f3f3', 'transparent'],
                    opacity: 0.5
                }
            },
            tooltip: {
                shared: true,
                intersect: false,

                y: {
                    formatter: function (val){
                        return `${NumbertoMoney(val)}`;
                    }
                }
            },
            legend: {
                position: 'top',
                horizontalAlign: 'center'
            },
            responsive: [{
                breakpoint: 768,
                options: {
                    chart: { height: 300 },
                    plotOptions: { bar: { horizontal: false } }
                }
            }]
        };

        // Render the chart
        const chart = new ApexCharts(document.querySelector(`#${containerId}${count}Chart`), options);
        chart.render();
    }
    //-----------------Start Location Wise Chart Rendering Function with Base Configuration --------------------//
    function renderBarChart({ containerId, data, callFor }) {
        // Remove existing chart and create a new container
        $(`#${containerId}Chart`).remove();
        $(`#${containerId}FS`).append(`<div id="${containerId}Chart" class="chart-container"></div>`);

        // Check if data is valid
        if (!data || data.length === 0) {
            $(`#${containerId}Chart`).html('<div class="no-data-message" >No data available for the selected period.</div>');
            return;
        }
        const lableData = data.map(item => item.MonthName);

        var chartData = {};
        let isStack = true;
        let ishorizontal = true;

        if (callFor.length == 1) {

            chartData = {
                [`Total${callFor[0]}`]: data.map(item => item[`Total${callFor[0]}`])
            };
            isStack = true
        }
        else if (callFor.length == 2) {
            chartData = {
                [`Total${callFor[0]}`]: data.map(item => item[`Total${callFor[0]}`]),
                [`Total${callFor[1]}`]: data.map(item => item[`Total${callFor[1]}`])
            };
            isStack = false;
            ishorizontal = false;
        }

        const seriesdata = Object.keys(chartData).map(key => {
            return {
                name: key.charAt(0).toUpperCase() + key.slice(1).replace(/([A-Z])/g, ' $1'), // Title case
                data: chartData[key]
            };
        });
        // Tooltip formatter helper function
        const getTooltipContent = (monthName, dataPointIndex) => {
            if (callFor.length == 1) {
                return `<div style="padding: 10px; font-size: 14px; border: 1px solid #ccc; border-radius: 5px; background: #fff;">
                    <strong>${monthName}</strong><br>
                    Total ${callFor[0]}: ${NumbertoMoney(chartData[`Total${callFor[0]}`][dataPointIndex])}
                </div>`;
            }
            else if (callFor.length == 2) {
                return `<div style="padding: 10px; font-size: 14px; border: 1px solid #ccc; border-radius: 5px; background: #fff;">
                    <strong>${monthName}</strong><br>
                    Total ${callFor[0]}: ${NumbertoMoney(chartData[`Total${callFor[0]}`][dataPointIndex])}<br>
                    Total ${callFor[1]}: ${NumbertoMoney(chartData[`Total${callFor[1]}`][dataPointIndex])}
                </div>`;
            }

        };

        // Chart options
        const options = {
            series: seriesdata,
            chart: {
                type: 'bar',
                height: 280,
                toolbar: { show: false },
                //  stacked: isStack,
                events: {
                    resize: (chart, width, height) => {
                        chart.updateOptions({
                            chart: { height: height || 280 }
                        });
                    }
                }
            },
            plotOptions: {
                bar: {
                    horizontal: false,
                    columnWidth: '50%',
                    dataLabels: {
                        enabled: true,
                        orientation: 'vertical',
                        position: 'center',
                    }
                }
            },
            dataLabels: {
                enabled: true,
                style: {
                    fontFamily: 'Calibri',
                    fontWeight: 'normal',
                    color: 'white'
                },
                dropShadow: {
                    enabled: false
                },
                formatter: formatValue,
            },
            xaxis: {
                categories: lableData,
            },
            yaxis: {
                labels: {
                    formatter: formatValue,
                    style: {
                        fontSize: '9px',
                        colors: '#000',
                    }
                }
            },
            grid: {
                borderColor: '#e7e7e7',
                row: {
                    colors: ['#f3f3f3', 'transparent'],
                    opacity: 0.5
                }
            },
            tooltip: {
                shared: true,
                intersect: false,
                y:{
                    formatter: function (val) {
                        return `${NumbertoMoney(val)}`;
                    }
                }
            },
            legend: {
                position: 'top',
                horizontalAlign: 'center'
            },
            responsive: [{
                breakpoint: 768,
                options: {
                    chart: { height: 300 },
                    plotOptions: { bar: { horizontal: false } }
                }
            }]
        };

        // Render the chart
        const chart = new ApexCharts(document.querySelector(`#${containerId}Chart`), options);
        chart.render();
    }
    //-----------------Start Pie Chart Rendering Function with Base Configuration --------------------//
    function renderPieChart({ containerId, data, callFor }) {
        // Remove existing chart and append a new container
        $(`#${containerId}Chart`).remove();
        $(`#${containerId}FS`).append(`<div id="${containerId}Chart" class="chart-container"></div>`);

        // Handle no-data scenario
        if (!data || data.length === 0 || data.every(item => (item.Percentage || 0) === 0)) {
            $(`#${containerId}Chart`).html(
                `<div class="no-data-message" >
                No data available for the selected period.
            </div>`
            );
            return;
        }
        
        // Prepare series and labels for the chart
        var series = data.map(item => item.Percentage || 0);
        var labels = data.map(item => item[callFor]);
        var NetAmount = data.map(item => item.WonValue);
        
        // Define chart options
        const options = {
            series:series,
            chart: {
                height: 250,
                type: 'pie',
                toolbar: { show: false }
            },
            labels: labels,
            colors: ['#008FFB', '#00E396', '#FEB019', '#FF4560', '#775DD0', '#c7f464', '#F86624','#2E294E'],
            tooltip: {
                shared: true,
                intersect: false,
                y: {
                    formatter: function (_, opts) {
                        const details = data[opts.seriesIndex];                       
                        return NumbertoMoney(details.WonValue);
                        
                    }
                }
            },
            legend: {
                position: 'top',
                horizontalAlign: 'center'
            },
            dataLabels: {
                enabled: true,
                formatter: (val, opts) => `${val.toFixed(1)}%`,
                style: {
                    fontFamily: 'Calibri',
                    fontWeight: 'normal',
                    colors: ['#000000']
                },
                dropShadow: { enabled: false }
            },
            responsive: [{
                breakpoint: 768,
                options: {
                    chart: { height: 250 },
                    legend: { position: 'bottom' }
                }
            }]
        };

        // Render the chart
        const chart = new ApexCharts(document.querySelector(`#${containerId}Chart`), options);
        chart.render();
    }
     //-----------------Start Column Chart Rendering Function with Base Configuration --------------------//
    function renderColumnChart({ containerId, data, callFor }) {
        $(`#${containerId}Chart`).remove();
        $(`#${containerId}FS`).append(`<div id="${containerId}Chart" class="chart-container"></div>`);

        // Check if data is valid
        if (!data || data.length === 0) {
            $(`#${containerId}Chart`).html('<div class="no-data-message" >No data available for the selected period.</div>');
            return;
        }
        const count = data.map(item => item.RowCount);
        let maxId= Math.max(...data.filter(item => item.ProjectID).map(item => item.ProjectID));
        MinProjectId = Math.min(...data.filter(item => item.ProjectID).map(item => item.ProjectID));

        if (count[0] == 10 && MaxProjectId > 0) {
            $("#btnPrevious").prop('disabled', false);
            $("#btnNext").prop('disabled', false);
        }
        else if (count[0] == 10 && MaxProjectId > 10) {
            $("#btnPrevious").prop('disabled', true);
            $("#btnNext").prop('disabled', false);
        }
        else if (count[0] < 10 && MaxProjectId == 0) {
            $("#btnPrevious").prop('disabled', true);
            $("#btnNext").prop('disabled', true);
        } else if (count[0] < 10) {
            $("#btnPrevious").prop('disabled', false);
            $("#btnNext").prop('disabled', true);
        }
        else {
            $("#btnNext").prop('disabled', false);
        }
       

        MaxProjectId = maxId; // Set here  MaxProjectId value

        const lableData = data.map(item => item.ProjectCode);
        const seriesdata = [{
            name: 'Allocated Budget',
            type: 'column',
            data: data.map(item => item.ProjectBudget)
        },
        {
            name: 'Utilized Cost',
            type: 'line',
            data: data.map(item => item.UtilizedCost)
        }]              

       
        // Chart options
        const options = {
            series: seriesdata,
            chart: {
                type: 'line',
                height: 280,
                zoom: {
                    enabled: false
                },
                toolbar: { show: false }              
            },
            plotOptions: {
                bar: {
                    horizontal: false,
                    columnWidth: '50%',
                    dataLabels: {
                        enabled: true,
                        orientation: 'vertical',
                        position: 'center',
                    }
                }
            },
            dataLabels: {
                enabled: true,
                enabledOnSeries: [0],
                style: {
                    fontFamily: 'Arial',
                    fontSize: '11px',
                    fontWeight: 'normal',
                    /* colors: '#000'*/
                },
                formatter: formatValue
                , dropShadow: {
                    enabled: false,
                    top: 0,
                    left: 0,
                    blur: 3,
                    opacity: 0.5
                }
            },
            colors: ['#008FFB', '#FF4560', '#FEB019'],
            xaxis: {
                categories: lableData,
            },
            yaxis: {
                labels: {
                    formatter: formatValue,
                    style: {
                        fontSize: '9px',
                        colors: '#000',
                    }
                }
            },
           
            stroke: {
                width: [0, 3.5],
                curve: 'smooth'
            },
            //grid: {
            //    borderColor: '#e7e7e7',
            //    row: {
            //        colors: ['#f3f3f3', 'transparent'],
            //        opacity: 0.5
            //    }
            //},
            tooltip: {
                shared: true,
                intersect: false,
                y: {
                    formatter: function (val) {
                        return `${NumbertoMoney(val)}`;
                    }
                }
            },
            legend: {
                position: 'top',
                horizontalAlign: 'center'
            },
            responsive: [{
                breakpoint: 768,
                options: {
                    chart: { height: 300 },
                    plotOptions: { bar: { horizontal: false } }
                }
            }]
        };

        // Render the chart
        const chart = new ApexCharts(document.querySelector(`#${containerId}Chart`), options);
        chart.render();
    }

    //-----------------End Chart Rendering Function with Base Configuration --------------------//
    function loadData({ url, data, containerId, renderChart, callFor }) {
        const antiForgeryToken = $("input[name=__RequestVerificationToken]").val();
        $.ajax({
            headers: { "__RequestVerificationToken": antiForgeryToken },
            type: 'GET',
            url: url,
            data: data,
            dataType: "json",
            success(response) {
                if (response.success && Array.isArray(response.records)) {
                    if (renderChart.name != "renderMutliChart_BarChart") {
                        renderChart({
                            containerId: containerId,
                            data: response.records,
                            callFor: callFor
                        });
                    }
                    else {
                        let Resource = [...new Set(response.records.map(record => record.ResourceName))];
                        let count = 1;
                        // Remove existing chart and create a new container
                        $("#Multi_Resources").empty();

                        Resource.forEach(resourceName => {
                            let filteredRecords = response.records.filter(record => record.ResourceName === resourceName);
                            renderChart({
                                containerId: containerId,
                                data: filteredRecords,
                                count: count++
                            });
                        });
                    }
                }
                else {
                    alert(response.message || `Unable to load data for ${containerId}.`);
                    renderChart({
                        containerId: containerId,
                        data: [],
                        callFor: callFor
                    });
                }
            },
            error() {
                alert(`An error occurred while loading data for ${containerId}. Please try again later.`);
            }
        });
    }

    //-----------------Functions For Fetching Data--------------------//
    function loadMonthlySale(FinancialYearID, ProjectID) {
        loadData({
            url: "/DashBoard/DashboardGetMonthlySale",
            data: { FinancialYearID, ProjectID},
            containerId: 'dashboard_MonthlySale',
            renderChart: renderBarChart,
            callFor: ['Sale']
        });
    }
    function loadMonthlyPurchase(FinancialYearID, ProjectID) {
        loadData({
            url: "/DashBoard/DashboardGetMonthlyPurchase",
            data: { FinancialYearID, ProjectID },
            containerId: 'dashboard_MonthlyPurchase',
            renderChart: renderBarChart,
            callFor: ['Purchase']
        });
    }
    function loadMonthlySaleVsTarget(FinancialYearID, ProjectID) {
        loadData({
            url: "/DashBoard/DashboardGetMonthlySaleVsTarget",
            data: { FinancialYearID, ProjectID},
            containerId: 'dashboard_MonthlySaleVsTarget',
            renderChart: renderBarChart,
            callFor: ['Sale','Target']
        });
    }
    function loadMonthlySaleVsExpense(FinancialYearID, ProjectID) {
        loadData({
            url: "/DashBoard/DashboardGetMonthlySaleVsExpense",
            data: { FinancialYearID, ProjectID},
            containerId: 'dashboard_MonthlySaleVsExpense',
            renderChart: renderBarChart,
            callFor: ['Sale', 'Expense']
        });
    }
    function loadMonthlyResourcewiseTarget(FinancialYearID, ProjectID) {
        loadData({
            url: "/DashBoard/DashboardGetMonthlyResourcewiseTarget",
            data: { FinancialYearID, ProjectID },
            containerId: 'dashboard_MonthlyResourcewise',
            renderChart: renderMutliChart_BarChart,
            callFor: 0
        });
    }

    function loadSectorwiseBreakup(FinancialYearID) {
        loadData({
            url: "/SM_Reports/SM_Reports/GetSectorWiseSalesRpt",
            data: { FinancialYearID},
            containerId: 'dashboard_SectorwiseBreakup',
            renderChart: renderPieChart,
            callFor:'Sector'
        });
    }
    function loadProductwiseBreakup(FinancialYearID) {
        loadData({
            url: "/SM_Reports/SM_Reports/GetProductWiseSalesRpt",
            data: { FinancialYearID },
            containerId: 'dashboard_ProductwiseBreakup',
            renderChart: renderPieChart,
            callFor: 'Product'
        });
    }
    function loadProjectStatus(FinancialYearID, ProjectID, MaxId) {
        loadData({
            url: "/DashBoard/DashboardGetProjectStatusDataYearly",
            data: { FinancialYearID, ProjectID, MaxId },
            containerId: 'dashboard_ProjectwiseStatus',
            renderChart: renderColumnChart,
            callFor: [MaxProjectId]
        });
    }

    function reset() {
        loadFinancialYear();
        $('#ProjectID').val("null");
        $('.dashboard-card h2').text('0');
        go();
    }
</script>