@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <div class="panel-group">
        <div class="panel panel-default">
            <div class="panel-groupingBoder">
                <div class="panel-heading">
                    <div class="panel-title">
                        Entry Form
                    </div>
                </div>
                <div id="collapse2" class="panel-collapse collapse in" aria-expanded="true">
                    <div class="panel-body">
                        <fieldset>
                            <legend></legend>
                            <div class="row">
                                <div class="col-sm-12">
                                    <button type="button" class="btn btn-success" id="btnSave">Save</button>
                                    <a data-toggle="collapse" class="btn btn-success" id="btnAdd">Reset</a>
                                </div>
                            </div>
                            <br>
                            <div class="row">
                                <div class="form-group form-horizontal">
                                    <div class="col-sm-3">
                                        @Html.Label("Branch")
                                        @Html.DropDownList("ddlBranch", new SelectList(string.Empty, "Value", "Text"), "Select Branch", new { @class = "form-control" })
                                    </div>
                                </div>

                                <div class="form-group form-horizontal">
                                    <div class="col-sm-3">
                                        @Html.Label("From Date")
                                        <div class='input-group date' id='FromDate'>
                                            <input type='text' class="form-control" />
                                            <span class="input-group-addon">
                                                <span class="glyphicon glyphicon-calendar"></span>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group form-horizontal">
                                    <div class="col-sm-3">
                                        @Html.Label("To Date")
                                        <div class='input-group date' id='ToDate'>
                                            <input type='text' class="form-control" />
                                            <span class="input-group-addon">
                                                <span class="glyphicon glyphicon-calendar"></span>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-2">
                                    <div class="form-group">
                                        <button type="button" class="btn btn-primary" id="btnSchedule">Show</button>
                                    </div>
                                </div>
                            </div>                            
                        </fieldset>
                        <fieldset>
                            <legend></legend>
                            <div class="row">
                                <div class="container fill">
                                    <div id="grid"></div>
                                </div>
                            </div>
                        </fieldset>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div title="Select Items" id="AssetModal" style="display: none;">
        <div id="Assetgrid"></div>
    </div>
    <script type="text/javascript">
        var $AssetGrid;
        var setIID, colIID, dataIID;
        var colIL, dataIL, setIL;
        function LoadAssetGrid() {
            var BranchId = $("#ddlBranch").val();
            if (BranchId == undefined || BranchId == "") BranchId = 0
            var fromdate = $("#FromDate").data('date');
            var todate = $("#ToDate").data('date');
            
            $.ajax({
                url: "/Asset/AssetSchedule/GetAssetSchedule",
                cache: false,
                async: true,
                method: "GET",
                dataType: "JSON",
                data: { BranchId: BranchId, fromdate: fromdate, todate: todate },
                success: function (response) {
                    $("#grid").pqGrid("option", "dataModel.data", response);
                    $("#grid").pqGrid("refreshDataAndView");
                },
                error: function (request, status, error) {
                    ClearParamGrid("grid");
                    return;
                }
            });
        }
        function ClearForm() {
            $("#ddlBranch").val("");
            $("#ScheduleId").val("");
            $("#AssetId").val("");
            $("#AssetCode").val("");
            $("#AssetName").val("");
            ClearParamGrid("grid");
        }
        $("#btnAdd").click(function () {
            ClearForm();
        });
        $(function () {
            $('#FromDate').datetimepicker({
                format: 'DD-MMM-YYYY',
                extraFormats: ['DD-MM-YYYY', 'DD-MM-YY'],
                defaultDate: new Date()
            });
            $('#ToDate').datetimepicker({
                format: 'DD-MMM-YYYY',
                extraFormats: ['DD-MM-YYYY', 'DD-MM-YY'],
                defaultDate: new Date()
            });

            $.ajax({
                type: "GET",
                url: "/Master/AllBranches",
                datatype: "Json",
                async: true,
                success: function (data) {
                    $.each(data, function (index, value) {
                        $('#ddlBranch').append('<option value="' + value.BranchID + '">' + value.BranchName + '</option>');
                    });
                }
            });

            var dateEditor = function (ui) {
                var $inp = ui.$cell.find("input"),
                    grid = this,
                    validate = function (that) {
                        var valid = grid.isValid({
                            dataIndx: ui.dataIndx,
                            value: $inp.val(),
                            rowIndx: ui.rowIndx
                        }).valid;
                        if (!valid) {
                            that.firstOpen = false;
                        }
                    };

                $inp.on("input", function (evt) {
                    validate(this);
                })
                .datepicker({
                    changeMonth: true,
                    changeYear: true,
                    showAnim: '',
                    onSelect: function () {
                        this.firstOpen = true;
                        validate(this);
                    },
                    beforeShow: function (input, inst) {
                        return !this.firstOpen;
                    },
                    onClose: function () {
                        this.focus();
                    }
                });
            }
        
            colIID =[
            { dataIndx: "AssetId", hidden: true },
            { dataIndx: "ScheduleId", hidden: true },
            { dataIndx: "ScheduleDetailId", hidden: true },
            { title: "AssetCode", dataIndx: "AssetCode", width: 100, dataType: "string" },
            { title: "AssetName", dataIndx: "ItemName", width: 100, dataType: "string" },
            { title: "SchDate", dataIndx: "StrScheduleDate", width: 150, dataType: "string" },
            { title: "", dataIndx: "ScheduleDate", width: 100, dataType: "datetime", hidden: true },
            { title: "Maint.type", dataIndx: "MaintenanceType", width: 130, dataType: "string" },
            { title: "", dataIndx: "MaintenanceTypeId", width: 50, dataType: "int", hidden: true },
            { title: "ToDo", dataIndx: "TODO", dataType: "string", width: 150 },
            { title: "Sch.Remark", dataIndx: "Remark", dataType: "string", width: 150 },
            { title: "DoneBy", dataIndx: "DoneBy", dataType: "string", width: 100 },
            {
                title: "Comp.Date", width: 150, dataIndx: "CompletedDate", dataType: 'date',
                format: 'dd-mm-yy',
                editor: {
                    type: 'textbox',
                    init: dateEditor
                },
                validations: [
                    { type: 'regexp', value: '^[0-9]{2}/[0-9]{2}/[0-9]{4}$', msg: 'Not in dd/mm/yyyy format' }
                ]
            },

            { title: "Comp.Remark", dataIndx: "CompletionRemark", width: 100, dataType: "string" },
            // { title: "Is Cont", dataIndx: "UserName", width: 100, dataType: "string" },
            ];
        
            dataIID = {
                location: 'local',
                sorting: 'local',
                paging: 'local',
                dataType: 'JSON'
            };

            setIID = {
                height: '300',
                maxheight: '400',
                title: "Schedules",
                sortable: false,
                numberCell: { show: false },
                selectionModel: { type: 'row' },
                hoverMode: 'cell',
                editor: { type: 'textbox' },
                showTop: true,
                resizable: true,
                editModel: {
                    saveKey: $.ui.keyCode.ENTER
                },
                draggable: false,
                virtualX: true,
                virtualY: true,
                colModel: colIID,
                dataModel: dataIID,
                pageModel: { type: "local", rPP: 50 },
            };
             $("#grid").pqGrid(setIID);

             $('#btnSchedule').on('click', function () {
                 if ($("#ddlBranch").val() == "") {
                     ShowAlert("error", "Please Select Branch ");
                     return;
                 }
                LoadAssetGrid();
            });
            $("#btnSave").click(function () {
                var dataMGrid = [];
                var items = $("#grid").pqGrid("getData", { dataIndx: ['AssetId', 'ScheduleId', 'MaintenanceTypeId', 'StrScheduleDate', 'Remark', 'TODO', 'CompletedDate', 'DoneBy', 'CompletionRemark', 'ScheduleDetailId'] });
                var griditems = JSON.stringify(items);
                $.ajax(
                {
                    type: "POST", //HTTP POST Method
                    traditional: true,
                    contentType: 'application/json; charset=utf-8',
                    url: '/AssetSchedule/SaveAssetScheduleCompletion', // Controller/View
                    data: griditems,
                    success: function (msg) {
                        if (msg.success) {
                            ShowAlert("success", msg.Message);
                            ClearForm();
                        }
                        else {
                            ShowAlert("error", msg.Message);
                        }
                    },
                    error: function (jqXHR, exception) {
                    }
                });
            });
        });

    </script>
}

