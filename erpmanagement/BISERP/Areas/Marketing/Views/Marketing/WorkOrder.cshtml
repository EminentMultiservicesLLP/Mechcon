@Scripts.Render("~/bundles/jquerymodels")

<h5 class="page-header orangeDottedBottomBorder">Proposal</h5>

<div id="SearchGridModal" class="modal fade" role="dialog" data-backdrop="false">
    <div class="modal-dialog find-search-grid-modal">
        <div class="modal-content gridmodal-content">
            <div class="modal-header gridmodal-header">
                <button type="button" class="close" onclick="closeModal()">&times;</button>
                <h4 class="modal-title">Proposed Work Order</h4>
            </div>
            <div class="modal-body">
                <div class="fill">
                    <div id="ProposalGrid"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="panel-group">
    <div class="panel panel-default">
        <div class="panel-groupingBoder">
            <div class="panel-heading">
                <div class="panel-title">
                    <a class="collapsediv" data-toggle="collapse" href="#SearchDetails">
                        Work Order
                    </a>
                </div>
            </div>
            <div id="SearchDetails" class="panel-collapse collapse in" aria-expanded="true">
                <div class="panel-body">
                    <div class="fill">
                        <div class="submit-row">
                            <button type="button" id="btnSave" class="btn btn-success" onclick="SaveProposal()">Save</button>
                            <button type="button" class="btn btn-warning" id="btnResetT" onclick="clearFormData()">Clear</button>
                            <button type="button" id="btnFind" class="btn btn-primary" onclick="showModal()">Find</button>
                        </div>

                        <div class="row">
                            <div class="col-sm-6">
                                <label for="OrderBookLabel" class="required">Order Book</label>
                                <input id="OrderBookLabel" class="form-control" type="text" placeholder="Search by - (Work Order No) | (Project Code) | (EnquiryNo)">
                                <input type="hidden" id="OrderBookID">
                                <input type="hidden" id="EnquiryID">
                            </div>
                        </div>
                        <br />

                        <div class="submit-row">
                            <button type="button" id="btnAddOtherFields" class="btn btn-primary" onclick="addOtherFields()">Add Attachment</button>
                            <button type="button" id="btnViewAttachment" class="btn btn-info" onclick="viewAttachment()">View <i class="pe-va pe-7s-paperclip pe-2x"></i></button>
                        </div>
                        <br />

                        <div class="row">
                            <div class="col-sm-6">
                                <table class="table table-hover">
                                    <tbody id="attachmentsFields">
                                    </tbody>
                                </table>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="ViewModal" class="modal slideModal">
    <div class="modal-content slideContent">
        <span class="close slideClose" onclick="closeImageModal()"> &#x2715 </span>
        <div id="slideshow-container"></div>
        <div>
            <a class="prev slide-prev" onclick="plusSlides(-1)">❮</a>
            <a class="next slide-next" onclick="plusSlides(1)">❯</a>
        </div>
    </div>
</div>

<script>
    var appSetting = '@BISERP.Common.Constants.ScandocUrl';
    let attachmentsFieldsIndx = 0;
    let ProposedEnq = [];
    $("#btnViewAttachment").hide();

    function getWorkOrder() {
        $("#OrderBookLabel").autocomplete({
            source: [],
            minLength: 0,
            select: handleWOSelection,
            change: handleWOSelection,
        });

        $.ajax({
            type: "GET",
            url: "/SM_WorkOrder/GetEnqForWorkOrder",
            dataType: "json",
            success: function (response) {
                UnProposedEnq = response.records.filter(({ ProposalExists }) =>  ProposalExists == false);

                ProposedEnq = response.records.filter(({ ProposalExists }) => ProposalExists == true);

                if (response.success && UnProposedEnq.length > 0) {
                    const suggestions = UnProposedEnq.map(({EnquiryNo, OrderBookNo, ProjectCode, OrderBookID}) => ({
                        label: `(${OrderBookNo}) | (${ProjectCode}) | (${EnquiryNo})`,
                        orderBookID: OrderBookID
                    }));

                    $("#OrderBookLabel").autocomplete("option", "source", suggestions);
                } else {
                    $("#OrderBookLabel").autocomplete("option", "source", [{ label: "--No Work Order Found--", value: "" }]);
                }
            },
            error: function () {
                $("#OrderBookLabel").autocomplete("option", "source", [{ label: "--Error loading work orders--", value: "" }]);
            }
        });
    }
    function handleWOSelection(event, ui) {
        event.preventDefault();
        const $orderBookLabel = $(event.target);
        const $orderBookID = $("#OrderBookID");
        if (ui.item && ui.item.value) {
            if (ui.item.label === "--No Enquiry Found--" || ui.item.label === "--Error loading work orders--") {
                $orderBookLabel.val('');
                $orderBookID.val('');
            } else {
                $orderBookLabel.val(ui.item.label);
                $orderBookID.val(ui.item.orderBookID);
            }
        } else {
            $orderBookLabel.val('');
            $orderBookID.val('');
        }
    }
    $("#OrderBookLabel").on("focus", function () {
        $(this).autocomplete("search", "");
    });

    //-----------------------------------ProposalGrid (Starts here)-----------------------------------//
    var ProposalGrid_GDM = { location: "local" };

    var ProposalGrid_GCM = [
        {
            title: "Order Book No", dataIndx: "OrderBookNo", width: '33%',
            filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
        },
        {
            title: "Project Code", dataIndx: "ProjectCode", width: '33%',
            filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
        },
        {
            title: "Enquiry No", dataIndx: "EnquiryNo", width: '33%',
            filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
        }
    ];

    var setProposalGrid = {
        height: 300,
        width: 'auto',
        maxWidth: '100%',
        minWidth: 800,
        sortable: true,
        autofill: true,
        numberCell: { show: true },
        hoverMode: 'row',
        showTop: true,
        showTitle: true,
        showBottom: true,
        resizable: true,
        //scrollModel: { autoFit: true },
        filterModel: { on: true, mode: "AND", header: true },
        draggable: false,
        hwrap: false,
        wrap: false,
        editable: false,
        columnBorders: true,
        menuIcon: true,
        selectionModel: { type: 'row', mode: 'single', cbHeader: false },
        colModel: ProposalGrid_GCM,
        dataModel: ProposalGrid_GDM,
        pageModel: { type: "local" },
        rowClick: function (evt, ui) {
            if (ui.rowData) {
                const data = ui.rowData;
                closeModal();
                clearFormData();
                const $orderBookLabel = $('#OrderBookLabel');
                const $orderBookID = $('#OrderBookID');
                $orderBookLabel.val(`(${data.OrderBookNo}) | (${data.ProjectCode}) | (${data.EnquiryNo})`);
                $orderBookID.val(data.OrderBookID);
                $orderBookLabel.prop('disabled', true);

                $("#btnViewAttachment").show();
            }
        }
    }

    var $ProposalGrid = $("#ProposalGrid").pqGrid(setProposalGrid);

    function loadProposalGrid() {
        const grid = $("#ProposalGrid").pqGrid();
        grid.pqGrid("option", "dataModel.data", ProposedEnq);
        grid.pqGrid("refreshDataAndView");
        PqGridRefreshClick(grid);
    }

    function showModal() {
        $("#SearchGridModal").modal('show');
        loadProposalGrid();
    }

    function closeModal() {
        $("#SearchGridModal").modal('hide');
    }
    //-----------------------------------OrderBookGrid (Ends here)-----------------------------------//

    $(document).on('change', '.attachment', function () {
        const fileInput = this;
        const files = fileInput.files;

        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            const fileSizeMB = file.size / (1024 * 1024); // Convert bytes to MB
            const fileExtension = file.name.split('.').pop().toLowerCase(); // Get file extension

            if (fileSizeMB > 1) {
                $(fileInput).val(null);
                ShowAlert("error", `File "${file.name}" exceeds 1 MB. Please upload a smaller file.`);
                return;
            }

            // Allowed image extensions
            const allowedExtensions = ['jpg', 'jpeg', 'png'];

            if (!allowedExtensions.includes(fileExtension.toLowerCase())) {
                $(fileInput).val(null); // Clear the input
                ShowAlert("error", `File "${file.name}" is not allowed. Please upload an image file.`);
                return;
            }

            // Allow only alphanumeric characters, dots, underscores, spaces, hyphens, and parentheses
            const specialCharsRegex = /[^a-zA-Z0-9_. ()-]/;
            if (specialCharsRegex.test(file.name)) {
                $(fileInput).val(null);
                ShowAlert("error", `FileName "${file.name}" should not contain any special characters. ('!#$%^&*+={}[]|\\:;'<>,?/~\`` + "\`)");
                return;
            }
        }
    });

    function SaveScandoc(file, NewId, location, sublocation) {
        const fileControl = $("#" + file);
        const fdata = new FormData();
        const files = fileControl.get(0).files;

        for (let i = 0; i < files.length; i++) {
            fdata.append("files" + i, files[i]);
        }
        fdata.append("NewId", NewId);
        fdata.append("AreaLocation", location);
        fdata.append("SubAreaLocation", sublocation);

        return new Promise((resolve, reject) => {
            if (files.length > 0) {
                $.ajax({
                    type: 'POST',
                    url: '/FileUploadDownload/Upload',
                    data: fdata,
                    contentType: false,
                    processData: false,
                    success: function (data) {
                        resolve(data);
                    },
                    error: function (xhr) {
                        reject({
                            status: xhr.status,
                            statusText: xhr.statusText,
                            responseText: xhr.responseText
                        });
                    }
                });
            } else {
                resolve();
            }
        });
    }

    async function SaveProposal() {
        const orderBookId = $("#OrderBookID").val();
        if (!orderBookId || orderBookId == 0) {
            ShowAlert("error", "Select an Order Book to proceed.");
            return false;
        }

        let allFilesSaved = true;

        let ids = [];

        $("#attachmentsFields tr").each(function () {
            const rowId = $(this).attr('id').replace('tr', '');
            ids.push(rowId);
        });

        ids.sort((a, b) => a - b);

        for (const id of ids) {
            try {
                await SaveScandoc(`Attachment${id}`, orderBookId, "Marketing", "Proposal");
            } catch (error) {
                console.error(`Error saving attachment for row ${id}:`, error);
                allFilesSaved = false;
            }
        }

        ShowAlert(allFilesSaved ? "success" : "error", allFilesSaved ? "Attachments uploaded successfully" : "Some attachments failed to save.");
        clearFormData();
        return allFilesSaved;
    }

    function clearFormData() {
        getWorkOrder();
        attachmentsFieldsIndx = 0;
        $("#OrderBookLabel").val('');
        $("#OrderBookID").val('');
        $("#attachmentsFields").empty();
        $("#OrderBookLabel").val('').prop('disabled', false);
        $("#btnViewAttachment").hide();
    }

    function addOtherFields() {
        const orderBookId = $("#OrderBookID").val();
        if (!orderBookId || orderBookId == 0) {
            ShowAlert("error", "Select an Order Book to proceed.");
            return false;
        }
        attachmentsFieldsIndx++;
        addDiv(attachmentsFieldsIndx);
    }

    function addDiv(index) {
        const divContent = `
            <tr id="tr${index}">
                <th scope="row">
                    <div class="row">
                        <div class="col-sm-11">
                            <input class="form-control btn-primary attachment" type="file" accept=".jpg,.jpeg,.png" id="Attachment${index}" />
                        </div>
                        <div class="col-sm-1" style="text-align: center;">
                            <span><a class="btnDelete" onclick="deleteRow(${index})"><i class="fa fa-times-circle" style="color: red; font-size: 29px;"></i></a></span>
                        </div>
                    </div>
                </th>
            </tr>
        `;

        $("#attachmentsFields").append(divContent);
    }

    function deleteRow(index) {
        $(`#tr${index}`).remove();
    }

    //---------------------------------------------------------------------Show Attachments-----------------------------------------------------------------//
    function viewAttachment() {
        const orderBookID = $("#OrderBookID").val();

        if (!orderBookID || orderBookID == 0) {
            ShowAlert("error", "Please select a Work Order first.");
            return false;
        }

        $.ajax({
            type: "GET",
            url: "/ScanDoc/ScanDoc/GetScanDocUrl",
            data: { FileId: orderBookID, ScanDocSubTypeId: 29 },
            dataType: "json",
            success: function (data) {
                if (data?.length > 0) {
                    closeImageModal();
                    ViewSlideShow(data, 'slideshow-container', appSetting);
                } else {
                    ShowAlert("error", "No documents found.");
                }
            },
            error: function () {
                ShowAlert("error", "An error occurred while fetching documents. Please try again later.");
            }
        });
    }

    let imageSrcs = [];
    function ViewSlideShow(ImageGallery, containerId, appSetting) {
        if (!ImageGallery?.length) {
            ShowAlert("error", "No Attachment found.");
            return;
        }

        const supportedExtensions = new Set(['pdf', 'jpeg', 'jpg', 'png']);
        const $container = $(`#${containerId}`).empty();
        imageSrcs = [];
        let slidesHtml = '';

        ImageGallery.forEach(({ FilePath, FileId, ScanDocId }) => {
            const fileNameWithExtension = FilePath.split('\\').pop();
            const [name, extension] = fileNameWithExtension.split('.').map(part => part.toLowerCase());
            if (!supportedExtensions.has(extension)) return;

            const src = `${appSetting}${FilePath}`;
            imageSrcs.push(src);

            let contentHtml = '';
            if (extension === 'pdf') {
                contentHtml = `<object data="${src}#toolbar=0&navpanes=0&scrollbar=0" type="application/pdf" width="100%" height="500px"></object>`;
            } else {
                contentHtml = `<img src="${src}" style="width:800px;height:500px;">`;
            }

            slidesHtml += `
            <div class="imgSlide">
                ${contentHtml}
                <div class="divider"></div>
                <div class="row">
                    <div class="col-sm-2">
                        <a href="javascript:void(0);" data-id="${FileId}" class="deleteItem fa fa-trash" style="font-size: x-large;"
                           onclick="Deletefile(${FileId}, ${ScanDocId}); return false;"></a>
                    </div>
                    <div class="col-sm-8 text-center">
                        <span class="text" style="font-weight: bold; font-size: large;">${name}</span>
                    </div>
                    <div class="col-sm-2">
                        <a class="fa fa-download downloadFiles" href="javascript:void(0);" onclick="generatePdf()" download></a>
                    </div>
                </div>
            </div>`;
        });

        $container.append(slidesHtml);
        $("#ViewModal").show();
        showGallery(1);
    }

    function generatePdf() {
        const { jsPDF } = window.jspdf;
        const pdf = new jsPDF();
        let processedCount = 0;

        imageSrcs.forEach((src, index) => {
            const img = new Image();
            img.src = src;
            img.onload = () => {
                const imgWidth = img.width;
                const imgHeight = img.height;

                // Define maximum dimensions for the PDF page
                const pageWidth = pdf.internal.pageSize.getWidth();
                const pageHeight = pdf.internal.pageSize.getHeight();

                // Calculate aspect ratio to fit the image within the page
                let renderWidth = pageWidth - 20; // 10px margin on each side
                let renderHeight = (imgHeight * renderWidth) / imgWidth;

                if (renderHeight > pageHeight - 20) {
                    renderHeight = pageHeight - 20; // Adjust if height exceeds the page
                    renderWidth = (imgWidth * renderHeight) / imgHeight;
                }

                if (index > 0) pdf.addPage();
                pdf.addImage(img, 'JPEG', 10, 10, renderWidth, renderHeight);

                processedCount++;
                if (processedCount === imageSrcs.length) {
                    pdf.save('images.pdf');
                }
            };
        });
    }

    let ImgIndex = 1;
    function plusSlides(n) {
        showGallery(ImgIndex += n);
    }

    function showGallery(n) {
        const slides = document.querySelectorAll(".imgSlide");
        ImgIndex = (n > slides.length) ? 1 : (n < 1) ? slides.length : n;

        slides.forEach((slide, index) => {
            slide.style.display = (index + 1 === ImgIndex) ? "block" : "none";
        });
    }

    function Deletefile(fId, sId) {
        $.ajax({
            type: "POST",
            url: "/ScanDoc/ScanDoc/DeleteScanDocfile",
            data: { fileId: fId, scanDocId: sId },
            success: function () {
                $(`[data-id="${fId}"]`).closest(".imgSlide").remove();
                ShowAlert("success", "File Removed successfully.");
                closeImageModal();
            },
            error: function () {
                ShowAlert("error", "Error deleting the file.");
            }
        });
    }

    function closeImageModal() {
        $("#slideshow-container").empty();
        $("#ViewModal").hide();
    }

    //------------------------------------------------ On Load--------------------------------------------------//
    getWorkOrder();
</script>