@Scripts.Render("~/bundles/jquerymodels")
<script>
    $(function () {
        $(".datepicker").datepicker({
            showOn: "button",
            buttonImage: "/Content/images/calendar.gif",
            buttonImageOnly: true,
            buttonText: "Selectdate",
            'changeMonth': true,
            'changeYear': true,
            'yearRange': '2021:2030',
            "format": "dd-M-yyyy",
            todayBtn: "linked",
            pickerPosition: "bottom-left",
            "todayHighlight": true,
            autoclose: true,
        }).datepicker("setDate", new Date());
        $("#anim").change(function () {
            $(".datepicker").datepicker("option", "showAnim", "fadeIn");
        });
    });
</script>
<style>
    .table {
        margin: 0;
    }
</style>
<h5 class="page-header orangeDottedBottomBorder">Ticket Activity</h5>

<div id="SearchGridModal" class="modal fade" role="dialog" data-backdrop="false">
    <div class="modal-dialog find-search-grid-modal">
        <div class="modal-content gridmodal-content">
            <div class="modal-header gridmodal-header">
                <button type="button" class="close" onclick="closeModal()">&times;</button>
                <h4 class="modal-title">Tickets</h4>
            </div>
            <div class="modal-body">
                <div class="fill">
                    <div id="TicketGrid"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="panel-group">
    <div class="panel panel-default">
        <div class="panel-groupingBoder">
            <div class="panel-heading">
                <div class="panel-title">
                    <a class="collapsediv" data-toggle="collapse" href="#SearchDetails">
                        Ticket Activity
                    </a>
                </div>
            </div>
            <div id="SearchDetails" class="panel-collapse collapse in" aria-expanded="true">
                <div class="panel-body">
                    <div class="fill">
                        <div class="submit-row">
                            <button type="button" id="btnSelect" class="btn btn-danger" onclick="selectActivity()">Select</button>
                            <button type="button" id="btnSave" class="btn btn-success" onclick="SaveTicketActivity()">Save</button>
                            <button type="button" class="btn btn-warning" id="btnResetT" onclick="clearFormData()">Clear</button>
                            <button type="button" id="btnFind" class="btn btn-primary" onclick="findActivity()">Find</button>
                        </div>

                        <div class="divider"></div>
                        <fieldset class="fieldsetCustom" disabled>
                            <legend class="legendCustom">Ticket Details</legend>
                            <table class="table table-hover">
                                <tbody>
                                    <tr>
                                        <th scope="row">
                                            <div class="row">
                                                <div class="col-sm-4 tbl-required">Subject</div>
                                                <div class="col-sm-8">
                                                    <input type="text" id="Subject" class="form-control" placeholder="Subject" />
                                                </div>
                                            </div>
                                        </th>
                                    </tr>
                                    <tr>
                                        <th scope="row">
                                            <div class="row">
                                                <div class="col-sm-4 tbl-required">Description</div>
                                                <div class="col-sm-8">
                                                    <textarea id="Description" class="form-control" placeholder="Description" style="height: 90px;"></textarea>
                                                </div>
                                            </div>
                                        </th>
                                    </tr>
                                    <tr>
                                        <th scope="row">
                                            <div class="row">
                                                <div class="col-sm-4 tbl-required">Priority</div>
                                                <div class="col-sm-8">
                                                    <input type="text" id="Priority" class="form-control" placeholder="Priority" />
                                                </div>
                                            </div>
                                        </th>
                                    </tr>
                                    <tr>
                                        <th scope="row">
                                            <div class="row">
                                                <div class="col-sm-4">Allocated To</div>
                                                <div class="col-sm-8">
                                                    <input type="text" id="AllocatedToName" class="form-control" placeholder="AllocatedTo" />
                                                </div>
                                            </div>
                                        </th>
                                    </tr>
                                </tbody>
                            </table>
                        </fieldset>

                        <div class="divider"></div>
                        <fieldset class="fieldsetCustom">
                            <legend class="legendCustom">Activities</legend>
                            <div id="activityContainer"></div>
                            <div class="submit-row">
                                <button type="button" id="btnAddNew" class="btn btn-primary">Add Activity</button>
                            </div>
                        </fieldset>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="ViewModal" class="modal slideModal">
    <div class="modal-content slideContent">
        <span class="close slideClose" onclick="closeImageModal()"> &#x2715 </span>
        <div id="slideshow-container"></div>
        <div>
            <a class="prev slide-prev" onclick="plusSlides(-1)">❮</a>
            <a class="next slide-next" onclick="plusSlides(1)">❯</a>
        </div>
    </div>
</div>

<script>
    var appSetting = '@BISERP.Common.Constants.ScandocUrl';
    var tempTicketID = 0;
    var activityCount = 0;
    var MstStatus = [];

    function loadStatus() {
        $.ajax({
            type: "GET",
            url: "/TicketRegister/GetStatus",
            dataType: "json",
            success: function (data) {
                MstStatus = data.filter(status => status.StatusID >= 3)
            },
            error: function (xhr, textStatus, errorThrown) {
                console.error("Error loading statuses:", errorThrown);
            }
        });
    }
    loadStatus();

    function GetActivity(ticketID) {
        const antiForgeryToken = $("input[name=__RequestVerificationToken]").val();

        $.ajax({
            headers: {
                "__RequestVerificationToken": antiForgeryToken
            },
            type: 'GET',
            url: "/TicketActivity/GetActivity",
            data: { TicketID: ticketID },
            dataType: "json",
            success: function (response) {
                if (response.success && Array.isArray(response.records) && response.records.length > 0) {
                    response.records.forEach((detail) => {
                        if (detail.ActivityID) {
                            AddDiv(detail.ActivityID, true);

                            const activityDateInput = $(`#ActivityDate${detail.ActivityID}`);
                            const activityInput = $(`#Activity${detail.ActivityID}`);
                            const responseDateInput = $(`#ResponseDate${detail.ActivityID}`);
                            const responseInput = $(`#Response${detail.ActivityID}`);
                            const statusIDInput = $(`#StatusID${detail.ActivityID}`);
                            const deactiveCheckbox = $(`#Deactive${detail.ActivityID}`);

                            activityDateInput.val(detail.strActivityDate || '');
                            activityInput.val(detail.Activity || '');
                            responseDateInput.val(detail.strResponseDate || '');
                            responseInput.val(detail.Response || '');
                            statusIDInput.val(detail.StatusID || '');

                            if (detail.Deactive) {
                                deactiveCheckbox.prop('checked', true);
                            }
                        }
                    });
                } else {
                    console.warn("No details found or an issue occurred: ", response.message);
                }
            },
            error: function (xhr, status, error) {
                console.error("Error loading activity details:", status, error);
                alert("An error occurred while loading activity details. Please try again.");
            }
        });
    }

    //-----------------------------------TicketGrid (Starts here)-----------------------------------//
    var TicketGrid_GDM = { location: "local" };
    var TicketGrid_GCM = [
        {
            title: "Ticket No", dataIndx: "TicketNo", width: '20%',
            filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
        },
        {
            title: "TicketDate", dataIndx: "strTicketDate", width: '20%',
            filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
        },
        {
            title: "Client Name", dataIndx: "ClientName", width: '40%',
            filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
        },
        {
            title: "Project Code", dataIndx: "ProjectCode", width: '20%',
            filter: { type: 'textbox', condition: 'contain', listeners: ['keyup'] }
        },
    ];
    var setTicketGrid = {
        height: 300,
        width: 'auto',
        maxWidth: '100%',
        minWidth: 800,
        sortable: true,
        autofill: true,
        numberCell: { show: true },
        hoverMode: 'row',
        showTop: true,
        showTitle: true,
        showBottom: true,
        resizable: true,
        scrollModel: { autoFit: true },
        filterModel: { on: true, mode: "AND", header: true },
        draggable: false,
        hwrap: false,
        wrap: false,
        editable: false,
        columnBorders: true,
        menuIcon: true,
        selectionModel: { type: 'row', mode: 'single', cbHeader: false },
        colModel: TicketGrid_GCM,
        dataModel: TicketGrid_GDM,
        pageModel: { type: "local" },
        rowClick: function (evt, ui) {
            if (ui.rowData) {
                var data = ui.rowData;
                closeModal();
                clearFormData();
                tempTicketID = data.TicketID;
                $("#Subject").val(data.Subject);
                $("#Description").val(data.Description);
                $("#Priority").val(data.Priority);
                $("#AllocatedToName").val(data.AllocatedToName);
                GetActivity(data.TicketID);
            }
        }

    }
    var $TicketGrid = $("#TicketGrid").pqGrid(setTicketGrid);

    function loadTicketGrid(ticketType) {
        var antiForgeryToken = $("input[name='__RequestVerificationToken']").val();
        $.ajax({
            headers: {
                "__RequestVerificationToken": antiForgeryToken
            },
            type: 'GET',
            url: "/TicketActivity/GetTicketForActivity",
            data: { TicketType: ticketType },
            dataType: "json",

            beforeSend: function () {
                $("#TicketGrid").pqGrid("showLoading");
            },

            complete: function () {
                $("#TicketGrid").pqGrid("hideLoading");
            },

            success: function (response) {
                const grid = $("#TicketGrid").pqGrid();

                if (response.success) {
                    grid.pqGrid("option", "dataModel.data", response.records);
                } else {
                    console.warn("No data found or an issue occurred: ", response.message);
                    grid.pqGrid("option", "dataModel.data", []);
                }

                grid.pqGrid("refreshDataAndView");
                PqGridRefreshClick(grid);
            },

            error: function (jqXHR, textStatus, errorThrown) {
                console.error("Error loading Ticket Register grid:", textStatus, errorThrown);
                console.error("Response text:", jqXHR.responseText);
                $("#TicketGrid").pqGrid("hideLoading");
            }
        });

    }
    //-----------------------------------TicketGrid (Ends here)-----------------------------------//


    //-----------------------------------Add Offer Click Start-----------------------------------//

    $("#btnAddNew").on('click', function () {
        if (tempTicketID) {
            GetActivityID(tempTicketID);
        } else {
            ShowAlert("error", "Please select a ticket first");
        }
    });

    function GetActivityID(ticketID) {
        var antiForgeryToken = $("input[name=__RequestVerificationToken]").val();
        $.ajax({
            headers: {
                "__RequestVerificationToken": antiForgeryToken
            },
            type: 'GET',
            url: "/TicketActivity/GetActivityID",
            data: { TicketID: ticketID },
            dataType: "json",
            success: function (response) {
                if (response.success) {
                    const details = response.record;
                    AddDiv(details.ActivityID);
                    $('#btnAddNew').prop('disabled', true);
                } else {
                    console.warn("No details found or an issue occurred: ", response.message);
                }
            },
            error: function (xhr, status, error) {
                console.error("Error loading ticket details: ", status, error);
            }
        });
    }

    function AddDiv(ActivityID, rowclick) {
        activityCount += 1;

        let btnViewAttachment = rowclick ? `
    <div class="col-12 col-md-2 text-center">
        </br>
        <button type="button" id="btnViewAttachment${ActivityID}" class="btn btn-primary mt-3" onclick="viewAttachment(${ActivityID})">
            View <i class="pe-va pe-7s-paperclip pe-2x"></i>
        </button>
    </div>` : '';

        const divContent = `
    <fieldset class="fieldsetCustom activity-div mb-4" id="Div_${ActivityID}">
        <legend class="legendCustom">Activity - ${activityCount}</legend>
        <div class="row g-3">
            <div class="col-12 col-md-3">
                <label for="ActivityDate${ActivityID}">Activity Date</label>
                <input type="text" id="ActivityDate${ActivityID}" class="form-control datepicker" />
            </div>
            <div class="col-12 col-md-9">
                <label for="Activity${ActivityID}" class="required">Activity</label>
                <textarea class="form-control Activity" id="Activity${ActivityID}" placeholder="Enter Activity" rows="3"></textarea>
            </div>
            <div class="col-12 col-md-3">
                <label for="ResponseDate${ActivityID}">Cust Resp Date</label>
                <input type="text" id="ResponseDate${ActivityID}" class="form-control datepicker" />
            </div>
            <div class="col-12 col-md-9">
                <label for="Response${ActivityID}">Cust Resp</label>
                <textarea class="form-control" id="Response${ActivityID}" placeholder="Enter Cust Response" rows="3"></textarea>
            </div>
            <div class="col-12 col-md-4">
                <label for="Attachment${ActivityID}">Attachment</label>
                <input class="form-control btn-primary attachment" type="file" multiple accept=".jpg,.jpeg,.png,.pdf" id="Attachment${ActivityID}" />
            </div>
            <div class="col-12 col-md-4">
                <label for="StatusID${ActivityID}" class="required">Status</label>
                <select id="StatusID${ActivityID}" class="form-control">
                    <option value="">--Select Status--</option>
                </select>
            </div>
            <div class="col-12 col-md-2 text-center align-self-center">
                <div class="form-check mt-3">
                    </br>
                    <label class="form-check-label" for="Deactive${ActivityID}">Deactive</label>
                    <input class="form-check-input" type="checkbox" id="Deactive${ActivityID}" name="Deactive${ActivityID}">
                </div>
            </div>
            ${btnViewAttachment}
        </div>
    </fieldset>`;

        $("#activityContainer").append(divContent);

        $(`#Div_${ActivityID} .datepicker`).each(function () {
            let isActivityDate = $(this).attr("id").includes("ActivityDate");

            $(this).datepicker({
                showOn: "button",
                buttonImage: "/Content/images/calendar.gif",
                buttonImageOnly: true,
                buttonText: "Select date",
                changeMonth: true,
                changeYear: true,
                yearRange: '2021:2030',
                format: "dd-M-yyyy",
                todayBtn: "linked",
                pickerPosition: "bottom-left",
                todayHighlight: true,
                autoclose: true
            });

            if (isActivityDate) {
                $(this).datepicker("setDate", new Date());
            }
        });

        const $statusDropdown = $(`#StatusID${ActivityID}`);
        $statusDropdown.empty().append('<option value="">--Select Status--</option>');
        MstStatus.forEach(function (status) {
            $statusDropdown.append(`<option value="${status.StatusID}">${status.Status}</option>`);
        });

        // Disable all fieldsets except the last one
        $(".activity-div").find("input, select, textarea").prop("disabled", true);  // Disable all
        $(".activity-div:last").find("input, select, textarea").prop("disabled", false); // Enable the last one
    }

    //-----------------------------------Add Offer Click Ends-----------------------------------//

    $(document).on('change', '.attachment', function () {
        const fileInput = this;
        const files = fileInput.files;

        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            const fileSizeMB = file.size / (1024 * 1024); // Convert bytes to MB
            const fileExtension = file.name.split('.').pop().toLowerCase(); // Get file extension

            if (fileSizeMB > 1) {
                $(fileInput).val(null);
                ShowAlert("error", `File "${file.name}" exceeds 1 MB. Please upload a smaller file.`);
                return;
            }

            if (fileExtension === 'docx') {
                $(fileInput).val(null);
                ShowAlert("error", `File "${file.name}" is not allowed. Please upload a different file.`);
                return;
            }

            // Allow only alphanumeric characters, dots, underscores, spaces, hyphens, and parentheses
            const specialCharsRegex = /[^a-zA-Z0-9_. ()-]/;
            if (specialCharsRegex.test(file.name)) {
                $(fileInput).val(null);
                ShowAlert("error", `FileName "${file.name}" should not contain any special characters. ('!#$%^&*+={}[]|\\:;'<>,?/~\`` + "\`)");
                return;
            }
        }
    });

    function getActivityData() {
        const activityDataArray = [];
        let hasValidActivityDetail = false;
        let firstErrorMessage = null;

        $(".activity-div").each(function () {
            const $activityDiv = $(this);
            const activityID = $activityDiv.attr('id').split('_')[1];

            const activityValue = $(`#Activity${activityID}`).val().trim();
            const statusValue = $(`#StatusID${activityID}`).val().trim();

            // Check if both Activity and Status are provided
            const isValidActivity = activityValue.length > 0 && statusValue.length > 0 && statusValue != 0;

            if (isValidActivity) {
                activityDataArray.push({
                    TicketID: tempTicketID,
                    ActivityID: activityID,
                    ActivityDate: $(`#ActivityDate${activityID}`).val(),
                    Activity: activityValue,
                    ResponseDate: $(`#ResponseDate${activityID}`).val(),
                    Response: $(`#Response${activityID}`).val(),
                    Attachment: $(`#Attachment${activityID}`).val(),
                    StatusID: statusValue,
                    Deactive: $(`#Deactive${activityID}`).is(":checked"),
                });
                hasValidActivityDetail = true;
            } else {
                if (!firstErrorMessage) {
                    firstErrorMessage = `Activity and Status are required.`;
                }
            }
        });

        if (!hasValidActivityDetail) {
            if (!firstErrorMessage) {
                firstErrorMessage = "At least one valid activity detail is required.";
            }
        }

        if (firstErrorMessage) {
            ShowAlert("error", firstErrorMessage);
            return false;
        }

        return activityDataArray;
    }

    function SaveTicketActivity() {
        const activityList = getActivityData();
        if (!activityList) {
            return false;
        }

        const Details = {
            ActivityList: activityList
        };

        const antiForgeryToken = $("input[name=__RequestVerificationToken]").val();

        $.ajax({
            headers: {
                "__RequestVerificationToken": antiForgeryToken
            },
            type: "POST",
            contentType: 'application/json; charset=utf-8',
            url: "/TicketActivity/SaveActivity",
            data: JSON.stringify(Details),
            success: function (response) {
                if (response.success) {
                    debugger
                    let fileSaveMsg = "";
                    try {
                        activityList.forEach(({ ActivityID }) => {
                            debugger
                            SaveScandoc(`Attachment${ActivityID}`, ActivityID, "Ticket", "TicketActivity");
                        });
                    } catch (err) {
                        fileSaveMsg = "But failed to save attached files.";
                    } finally {
                        const message = "Activity saved successfully!";
                        ShowAlert("success", `${message}\n${fileSaveMsg}`);
                        clearFormData();
                    }
                } else {
                    ShowAlert("error", response.message || "An error occurred while saving the activity.");
                }
            },
            error: function (xhr, status, error) {
                ShowAlert("error", `An unexpected error occurred: ${xhr.responseText || error}`);
            }
        });

    }

    function clearFormData() {
        tempTicketID = 0;
        activityCount = 0;
        $("#Subject").val('')
        $("#Description").val('');
        $("#Priority").val('');
        $("#AllocatedToName").val('');
        $("#activityContainer").empty();
        $('#btnAddNew').prop('disabled', false);
    }

    function selectActivity() {
        $("#SearchGridModal").modal('show');
        loadTicketGrid(0);
    }

    function findActivity() {
        $("#SearchGridModal").modal('show');
        loadTicketGrid(1);
    }

    function closeModal() {
        $("#SearchGridModal").modal('hide');
    }

    //---------------------------------------------------------------------Show Attachments-----------------------------------------------------------------//

    function viewAttachment(fileID) {
        $.ajax({
            type: "GET",
            url: "/ScanDoc/ScanDoc/GetScanDocUrl",
            data: { FileId: fileID, ScanDocSubTypeId: 30 },
            dataType: "json",
            success: function (data) {
                if (data && data.length) {
                    closeImageModal();
                    ViewSlideShow(data, 'slideshow-container', appSetting);
                } else {
                    ShowAlert("error", "No Documents Found");
                }
            }
        });
    }

    function ViewSlideShow(ImageGallery, container, appSetting) {
        if (ImageGallery.length === 0) {
            ShowAlert("error", "No Attachment found");
            return;
        }

        const supportedExtensions = new Set(['pdf', 'jpeg', 'jpg', 'png']);
        const $container = $("#" + container);
        let slidesHtml = '';

        $container.empty();

        ImageGallery.forEach(image => {
            const filePath = image.FilePath;
            const fileNameWithExtension = filePath.split('\\').pop();
            const [name, extension] = fileNameWithExtension.split('.').map(part => part.toLowerCase());

            if (!supportedExtensions.has(extension)) return;

            const src = `${appSetting}${filePath}`;
            const deleteItemHtml = `
            <a href="javascript:void(0);" data-id="${image.FileId}" class="deleteItem fa fa-trash" style="font-size: x-large;"
               onclick="Deletefile(${image.FileId}, ${image.ScanDocId}); return false;"></a>`;
            const downloadHtml = '<a class="fa fa-download downloadFiles" href="' + src + '" download></a>';
            const nameHtml = `<span class="text" style='font-weight: bold; font-size: large;'>${name}</span>`;
            let contentHtml = '';

            switch (extension) {
                case 'pdf':
                    contentHtml = `<object data="${src}#toolbar=0&navpanes=0&scrollbar=0" type="application/pdf" width="100%" height="500px"></object>`;
                    break;
                case 'jpeg':
                case 'jpg':
                case 'png':
                    contentHtml = `<img src="${src}" style="width:800px;height:500px;">`;
                    break;
            }

            slidesHtml += `
            <div class="imgSlide">
                ${contentHtml}
                <div class="divider"></div>
                <div class="row">
                    <div class="col-sm-2">${deleteItemHtml}</div>
                    <div class="col-sm-8 text-center">${nameHtml}</div>
                    <div class="col-sm-2">${downloadHtml}</div>
                </div>
            </div>`;
        });

        $container.append(slidesHtml);
        $("#ViewModal").css('display', 'block');
        showGallery(1);
    }

    let ImgIndex = 1;

    function plusSlides(n) {
        showGallery(ImgIndex += n);
    }

    function showGallery(n) {
        let i;
        let ImgSlides = document.getElementsByClassName("imgSlide");
        let video = document.getElementById("video");
        if (n > ImgSlides.length) { ImgIndex = 1; }
        if (n < 1) { ImgIndex = ImgSlides.length; }
        for (i = 0; i < ImgSlides.length; i++) {
            ImgSlides[i].style.display = "none";
        }
        ImgSlides[ImgIndex - 1].style.display = "block";
        if (video) {
            video.play();
        }
    }

    function Deletefile(fId, sId) {
        $.ajax({
            type: "POST",
            url: "/ScanDoc/ScanDoc/DeleteScanDocfile",
            data: {
                fileId: fId,
                scanDocId: sId
            },
            success: function () {
                $("#" + fId).parent().remove();
                $("#appendImg").empty();
                ShowAlert("success", "File Removed successfully");
                closeImageModal();
            },
            error: function () {
                ShowAlert("error", "Error deleting the file.");
            }
        });
        return false;
    }

    function closeImageModal() {
        $("#slideshow-container").empty();
        $("#ViewModal").css('display', 'none');
    }

</script>
